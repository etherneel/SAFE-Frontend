"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cid-tool";
exports.ids = ["vendor-chunks/cid-tool"];
exports.modules = {

/***/ "(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js":
/*!*********************************************************************!*\
  !*** ./node_modules/cid-tool/node_modules/uint8arrays/to-string.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst bases = __webpack_require__(/*! ./util/bases */ \"(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js\");\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */ /**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */ function toString(array, encoding = \"utf8\") {\n    const base = bases[encoding];\n    if (!base) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    // strip multibase prefix\n    return base.encoder.encode(array).substring(1);\n}\nmodule.exports = toString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3RvLXN0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXRCOztDQUVDLEdBRUQ7Ozs7Ozs7Ozs7Q0FVQyxHQUNELFNBQVNDLFNBQVVDLEtBQUssRUFBRUMsV0FBVyxNQUFNO0lBQ3pDLE1BQU1DLE9BQU9MLEtBQUssQ0FBQ0ksU0FBUztJQUU1QixJQUFJLENBQUNDLE1BQU07UUFDVCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRUYsU0FBUyxDQUFDLENBQUM7SUFDdEQ7SUFFQSx5QkFBeUI7SUFDekIsT0FBT0MsS0FBS0UsT0FBTyxDQUFDQyxNQUFNLENBQUNMLE9BQU9NLFNBQVMsQ0FBQztBQUM5QztBQUVBQyxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3RvLXN0cmluZy5qcz82YTZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBiYXNlcyA9IHJlcXVpcmUoJy4vdXRpbC9iYXNlcycpXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi91dGlsL2Jhc2VzJykuU3VwcG9ydGVkRW5jb2RpbmdzfSBTdXBwb3J0ZWRFbmNvZGluZ3NcbiAqL1xuXG4vKipcbiAqIFR1cm5zIGEgYFVpbnQ4QXJyYXlgIGludG8gYSBzdHJpbmcuXG4gKlxuICogU3VwcG9ydHMgYHV0ZjhgLCBgdXRmLThgIGFuZCBhbnkgZW5jb2Rpbmcgc3VwcG9ydGVkIGJ5IHRoZSBtdWx0aWJhc2UgbW9kdWxlLlxuICpcbiAqIEFsc28gYGFzY2lpYCB3aGljaCBpcyBzaW1pbGFyIHRvIG5vZGUncyAnYmluYXJ5JyBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IHRvIHR1cm4gaW50byBhIHN0cmluZ1xuICogQHBhcmFtIHtTdXBwb3J0ZWRFbmNvZGluZ3N9IFtlbmNvZGluZz11dGY4XSAtIFRoZSBlbmNvZGluZyB0byB1c2VcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nIChhcnJheSwgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3QgYmFzZSA9IGJhc2VzW2VuY29kaW5nXVxuXG4gIGlmICghYmFzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5jb2RpbmcgXCIke2VuY29kaW5nfVwiYClcbiAgfVxuXG4gIC8vIHN0cmlwIG11bHRpYmFzZSBwcmVmaXhcbiAgcmV0dXJuIGJhc2UuZW5jb2Rlci5lbmNvZGUoYXJyYXkpLnN1YnN0cmluZygxKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nXG4iXSwibmFtZXMiOlsiYmFzZXMiLCJyZXF1aXJlIiwidG9TdHJpbmciLCJhcnJheSIsImVuY29kaW5nIiwiYmFzZSIsIkVycm9yIiwiZW5jb2RlciIsImVuY29kZSIsInN1YnN0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js":
/*!**********************************************************************!*\
  !*** ./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { bases } = __webpack_require__(/*! multiformats/basics */ \"(ssr)/./node_modules/multiformats/cjs/src/basics.js\");\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */ /**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */ function createCodec(name, prefix, encode, decode) {\n    return {\n        name,\n        prefix,\n        encoder: {\n            name,\n            prefix,\n            encode\n        },\n        decoder: {\n            decode\n        }\n    };\n}\nconst string = createCodec(\"utf8\", \"u\", (buf)=>{\n    const decoder = new TextDecoder(\"utf8\");\n    return \"u\" + decoder.decode(buf);\n}, (str)=>{\n    const encoder = new TextEncoder();\n    return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec(\"ascii\", \"a\", (buf)=>{\n    let string = \"a\";\n    for(let i = 0; i < buf.length; i++){\n        string += String.fromCharCode(buf[i]);\n    }\n    return string;\n}, (str)=>{\n    str = str.substring(1);\n    const buf = new Uint8Array(str.length);\n    for(let i = 0; i < str.length; i++){\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n});\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */ /**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */ const BASES = {\n    \"utf8\": string,\n    \"utf-8\": string,\n    \"hex\": bases.base16,\n    \"latin1\": ascii,\n    \"ascii\": ascii,\n    \"binary\": ascii,\n    ...bases\n};\nmodule.exports = BASES;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3V0aWwvYmFzZXMuanMiLCJtYXBwaW5ncyI6IkFBQUU7QUFFRixNQUFNLEVBQUVBLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUUxQjs7Q0FFQyxHQUVEOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLFlBQWFDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE1BQU07SUFDaEQsT0FBTztRQUNMSDtRQUNBQztRQUNBRyxTQUFTO1lBQ1BKO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFDQUcsU0FBUztZQUNQRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLE1BQU1HLFNBQVNQLFlBQVksUUFBUSxLQUFLLENBQUNRO0lBQ3ZDLE1BQU1GLFVBQVUsSUFBSUcsWUFBWTtJQUNoQyxPQUFPLE1BQU1ILFFBQVFGLE1BQU0sQ0FBQ0k7QUFDOUIsR0FBRyxDQUFDRTtJQUNGLE1BQU1MLFVBQVUsSUFBSU07SUFDcEIsT0FBT04sUUFBUUYsTUFBTSxDQUFDTyxJQUFJRSxTQUFTLENBQUM7QUFDdEM7QUFFQSxNQUFNQyxRQUFRYixZQUFZLFNBQVMsS0FBSyxDQUFDUTtJQUN2QyxJQUFJRCxTQUFTO0lBRWIsSUFBSyxJQUFJTyxJQUFJLEdBQUdBLElBQUlOLElBQUlPLE1BQU0sRUFBRUQsSUFBSztRQUNuQ1AsVUFBVVMsT0FBT0MsWUFBWSxDQUFDVCxHQUFHLENBQUNNLEVBQUU7SUFDdEM7SUFDQSxPQUFPUDtBQUNULEdBQUcsQ0FBQ0c7SUFDRkEsTUFBTUEsSUFBSUUsU0FBUyxDQUFDO0lBQ3BCLE1BQU1KLE1BQU0sSUFBSVUsV0FBV1IsSUFBSUssTUFBTTtJQUVyQyxJQUFLLElBQUlELElBQUksR0FBR0EsSUFBSUosSUFBSUssTUFBTSxFQUFFRCxJQUFLO1FBQ25DTixHQUFHLENBQUNNLEVBQUUsR0FBR0osSUFBSVMsVUFBVSxDQUFDTDtJQUMxQjtJQUVBLE9BQU9OO0FBQ1Q7QUFFQTs7Q0FFQyxHQUVEOztDQUVDLEdBQ0QsTUFBTVksUUFBUTtJQUNaLFFBQVFiO0lBQ1IsU0FBU0E7SUFDVCxPQUFPVCxNQUFNdUIsTUFBTTtJQUNuQixVQUFVUjtJQUNWLFNBQVNBO0lBQ1QsVUFBVUE7SUFFVixHQUFHZixLQUFLO0FBQ1Y7QUFFQXdCLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9jaWQtdG9vbC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvdXRpbC9iYXNlcy5qcz9lODc2Il0sInNvdXJjZXNDb250ZW50IjpbIiAgJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgYmFzZXMgfSA9IHJlcXVpcmUoJ211bHRpZm9ybWF0cy9iYXNpY3MnKVxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ211bHRpZm9ybWF0cy9iYXNlcy9pbnRlcmZhY2UnKS5NdWx0aWJhc2VDb2RlYzxhbnk+fSBNdWx0aWJhc2VDb2RlY1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXhcbiAqIEBwYXJhbSB7KGJ1ZjogVWludDhBcnJheSkgPT4gc3RyaW5nfSBlbmNvZGVcbiAqIEBwYXJhbSB7KHN0cjogc3RyaW5nKSA9PiBVaW50OEFycmF5fSBkZWNvZGVcbiAqIEByZXR1cm5zIHtNdWx0aWJhc2VDb2RlY31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29kZWMgKG5hbWUsIHByZWZpeCwgZW5jb2RlLCBkZWNvZGUpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIHByZWZpeCxcbiAgICBlbmNvZGVyOiB7XG4gICAgICBuYW1lLFxuICAgICAgcHJlZml4LFxuICAgICAgZW5jb2RlXG4gICAgfSxcbiAgICBkZWNvZGVyOiB7XG4gICAgICBkZWNvZGVcbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgc3RyaW5nID0gY3JlYXRlQ29kZWMoJ3V0ZjgnLCAndScsIChidWYpID0+IHtcbiAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigndXRmOCcpXG4gIHJldHVybiAndScgKyBkZWNvZGVyLmRlY29kZShidWYpXG59LCAoc3RyKSA9PiB7XG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKVxuICByZXR1cm4gZW5jb2Rlci5lbmNvZGUoc3RyLnN1YnN0cmluZygxKSlcbn0pXG5cbmNvbnN0IGFzY2lpID0gY3JlYXRlQ29kZWMoJ2FzY2lpJywgJ2EnLCAoYnVmKSA9PiB7XG4gIGxldCBzdHJpbmcgPSAnYSdcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gc3RyaW5nXG59LCAoc3RyKSA9PiB7XG4gIHN0ciA9IHN0ci5zdWJzdHJpbmcoMSlcbiAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aClcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGJ1ZltpXSA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gIH1cblxuICByZXR1cm4gYnVmXG59KVxuXG4vKipcbiAqIEB0eXBlZGVmIHsndXRmOCcgfCAndXRmLTgnIHwgJ2hleCcgfCAnbGF0aW4xJyB8ICdhc2NpaScgfCAnYmluYXJ5JyB8IGtleW9mIGJhc2VzIH0gU3VwcG9ydGVkRW5jb2RpbmdzXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7UmVjb3JkPFN1cHBvcnRlZEVuY29kaW5ncywgTXVsdGliYXNlQ29kZWM+fVxuICovXG5jb25zdCBCQVNFUyA9IHtcbiAgJ3V0ZjgnOiBzdHJpbmcsXG4gICd1dGYtOCc6IHN0cmluZyxcbiAgJ2hleCc6IGJhc2VzLmJhc2UxNixcbiAgJ2xhdGluMSc6IGFzY2lpLFxuICAnYXNjaWknOiBhc2NpaSxcbiAgJ2JpbmFyeSc6IGFzY2lpLFxuXG4gIC4uLmJhc2VzXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQkFTRVNcbiJdLCJuYW1lcyI6WyJiYXNlcyIsInJlcXVpcmUiLCJjcmVhdGVDb2RlYyIsIm5hbWUiLCJwcmVmaXgiLCJlbmNvZGUiLCJkZWNvZGUiLCJlbmNvZGVyIiwiZGVjb2RlciIsInN0cmluZyIsImJ1ZiIsIlRleHREZWNvZGVyIiwic3RyIiwiVGV4dEVuY29kZXIiLCJzdWJzdHJpbmciLCJhc2NpaSIsImkiLCJsZW5ndGgiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJVaW50OEFycmF5IiwiY2hhckNvZGVBdCIsIkJBU0VTIiwiYmFzZTE2IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/base32.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/base32.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\");\n// @ts-ignore no types\nconst explain = __webpack_require__(/*! explain-error */ \"(ssr)/./node_modules/explain-error/index.js\");\n/**\n * @param {CID | string | Uint8Array} cid\n */ module.exports = function base32(cid) {\n    try {\n        cid = new CID(cid);\n    } catch (err) {\n        throw explain(err, `invalid cid: ${cid}`);\n    }\n    if (cid.version !== 1) {\n        cid = cid.toV1();\n    }\n    return cid.toBaseEncodedString(\"base32\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZTMyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDcEIsc0JBQXNCO0FBQ3RCLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDO0FBRXhCOztDQUVDLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxPQUFRQyxHQUFHO0lBQ25DLElBQUk7UUFDRkEsTUFBTSxJQUFJTixJQUFJTTtJQUNoQixFQUFFLE9BQU9DLEtBQUs7UUFDWixNQUFNTCxRQUFRSyxLQUFLLENBQUMsYUFBYSxFQUFFRCxJQUFJLENBQUM7SUFDMUM7SUFFQSxJQUFJQSxJQUFJRSxPQUFPLEtBQUssR0FBRztRQUNyQkYsTUFBTUEsSUFBSUcsSUFBSTtJQUNoQjtJQUVBLE9BQU9ILElBQUlJLG1CQUFtQixDQUFDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZTMyLmpzPzc3OWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IENJRCA9IHJlcXVpcmUoJ2NpZHMnKVxuLy8gQHRzLWlnbm9yZSBubyB0eXBlc1xuY29uc3QgZXhwbGFpbiA9IHJlcXVpcmUoJ2V4cGxhaW4tZXJyb3InKVxuXG4vKipcbiAqIEBwYXJhbSB7Q0lEIHwgc3RyaW5nIHwgVWludDhBcnJheX0gY2lkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmFzZTMyIChjaWQpIHtcbiAgdHJ5IHtcbiAgICBjaWQgPSBuZXcgQ0lEKGNpZClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgZXhwbGFpbihlcnIsIGBpbnZhbGlkIGNpZDogJHtjaWR9YClcbiAgfVxuXG4gIGlmIChjaWQudmVyc2lvbiAhPT0gMSkge1xuICAgIGNpZCA9IGNpZC50b1YxKClcbiAgfVxuXG4gIHJldHVybiBjaWQudG9CYXNlRW5jb2RlZFN0cmluZygnYmFzZTMyJylcbn1cbiJdLCJuYW1lcyI6WyJDSUQiLCJyZXF1aXJlIiwiZXhwbGFpbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJiYXNlMzIiLCJjaWQiLCJlcnIiLCJ2ZXJzaW9uIiwidG9WMSIsInRvQmFzZUVuY29kZWRTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/base32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/bases.js":
/*!*************************************************!*\
  !*** ./node_modules/cid-tool/src/core/bases.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\");\nmodule.exports = function bases() {\n    const output = [];\n    for (const base of Object.values(multibase.names)){\n        output.push({\n            name: base.name,\n            code: base.code\n        });\n    }\n    return output;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUUxQkMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDO0lBQ3hCLE1BQU1DLFNBQVMsRUFBRTtJQUVqQixLQUFLLE1BQU1DLFFBQVFDLE9BQU9DLE1BQU0sQ0FBQ1IsVUFBVVMsS0FBSyxFQUFHO1FBQ2pESixPQUFPSyxJQUFJLENBQUM7WUFBRUMsTUFBTUwsS0FBS0ssSUFBSTtZQUFFQyxNQUFNTixLQUFLTSxJQUFJO1FBQUM7SUFDakQ7SUFFQSxPQUFPUDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZXMuanM/YzkxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgbXVsdGliYXNlID0gcmVxdWlyZSgnbXVsdGliYXNlJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiYXNlcyAoKSB7XG4gIGNvbnN0IG91dHB1dCA9IFtdXG5cbiAgZm9yIChjb25zdCBiYXNlIG9mIE9iamVjdC52YWx1ZXMobXVsdGliYXNlLm5hbWVzKSkge1xuICAgIG91dHB1dC5wdXNoKHsgbmFtZTogYmFzZS5uYW1lLCBjb2RlOiBiYXNlLmNvZGUgfSlcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRcbn1cbiJdLCJuYW1lcyI6WyJtdWx0aWJhc2UiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImJhc2VzIiwib3V0cHV0IiwiYmFzZSIsIk9iamVjdCIsInZhbHVlcyIsIm5hbWVzIiwicHVzaCIsIm5hbWUiLCJjb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/bases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/codecs.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/codecs.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\");\nmodule.exports = function codecs() {\n    const output = [];\n    for (const [key, value] of Object.entries(CID.codecs)){\n        output.push({\n            name: key,\n            code: value\n        });\n    }\n    return output;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvY29kZWNzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsTUFBTUMsbUJBQU9BLENBQUM7QUFFcEJDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQztJQUN4QixNQUFNQyxTQUFTLEVBQUU7SUFFakIsS0FBSyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDVCxJQUFJSSxNQUFNLEVBQUc7UUFDckRDLE9BQU9LLElBQUksQ0FBQztZQUFFQyxNQUFNTDtZQUFLTSxNQUFNTDtRQUFNO0lBQ3ZDO0lBRUEsT0FBT0Y7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL2NpZC10b29sL3NyYy9jb3JlL2NvZGVjcy5qcz9hZWY2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBDSUQgPSByZXF1aXJlKCdjaWRzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb2RlY3MgKCkge1xuICBjb25zdCBvdXRwdXQgPSBbXVxuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENJRC5jb2RlY3MpKSB7XG4gICAgb3V0cHV0LnB1c2goeyBuYW1lOiBrZXksIGNvZGU6IHZhbHVlIH0pXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG4iXSwibmFtZXMiOlsiQ0lEIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb2RlY3MiLCJvdXRwdXQiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJwdXNoIiwibmFtZSIsImNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/codecs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/format.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/format.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\");\nconst bases = __webpack_require__(/*! ./bases */ \"(ssr)/./node_modules/cid-tool/src/core/bases.js\");\nconst codecs = __webpack_require__(/*! ./codecs */ \"(ssr)/./node_modules/cid-tool/src/core/codecs.js\");\n// @ts-ignore no types\nconst explain = __webpack_require__(/*! explain-error */ \"(ssr)/./node_modules/explain-error/index.js\");\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\");\nconst multihash = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\");\nconst uint8ArrayToString = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js\");\n/**\n * @typedef {import('multibase').BaseName} BaseName\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n */ /**\n * @param {CID | string | Uint8Array} cid\n * @param {import('./types').FormatOptions} options\n */ module.exports = function format(cid, options) {\n    options = options || {};\n    let formatStr = options.format || \"%s\";\n    if (formatStr === \"prefix\") {\n        formatStr = \"%P\";\n    }\n    if (!isString(formatStr) || formatStr.indexOf(\"%\") === -1) {\n        throw new Error(`invalid format string: ${formatStr}`);\n    }\n    const originalCid = cid;\n    try {\n        cid = new CID(cid);\n    } catch (err) {\n        throw explain(err, `invalid cid: ${cid}`);\n    }\n    if (options.cidVersion != null && cid.version !== options.cidVersion) {\n        if (options.cidVersion === 0) {\n            cid = cid.toV0();\n        } else if (options.cidVersion === 1) {\n            cid = cid.toV1();\n        } else {\n            throw new Error(`invalid cid version: ${options.cidVersion}`);\n        }\n    }\n    /**\n   * @type {BaseName}\n   */ let base = \"base58btc\";\n    if (options.base) {\n        // Validate passed base name/code\n        base = findBase(options.base).name;\n    } else if (isString(originalCid)) {\n        // Use base of input CID if string\n        base = multibase.isEncoded(originalCid) || base;\n    }\n    return formatStr.replace(/%([a-zA-Z%])/g, replacer(cid, base));\n};\n/**\n * @param {*} obj\n * @returns {obj is String}\n */ function isString(obj) {\n    return Object.prototype.toString.call(obj) === \"[object String]\";\n}\n/**\n * @param {CID} cid\n * @param {BaseName} base\n * @returns {(match: any, specifier: string) => string}\n */ function replacer(cid, base) {\n    /**\n   * @param {*} match\n   * @param {string} specifier\n   */ const replace = (match, specifier)=>{\n        switch(specifier){\n            case \"%\":\n                return \"%\";\n            case \"b\":\n                return base;\n            case \"B\":\n                return findBase(base).code;\n            case \"v\":\n                return `cidv${cid.version}`;\n            case \"V\":\n                return cid.version.toString();\n            case \"c\":\n                return cid.codec;\n            case \"C\":\n                return findCodec(cid).toString();\n            case \"h\":\n                return multihash.decode(cid.multihash).name;\n            case \"H\":\n                return multihash.decode(cid.multihash).code.toString();\n            case \"L\":\n                return multihash.decode(cid.multihash).length.toString();\n            case \"m\":\n                return uint8ArrayToString(multibase.encode(base, cid.multihash));\n            case \"M\":\n                return uint8ArrayToString(cid.multihash, base);\n            case \"d\":\n                return uint8ArrayToString(multibase.encode(base, multihash.decode(cid.multihash).digest));\n            case \"D\":\n                return uint8ArrayToString(multihash.decode(cid.multihash).digest, base);\n            case \"s\":\n                return cid.toString(base);\n            case \"S\":\n                return cid.version === 1 ? cid.toString(base).slice(1) : uint8ArrayToString(cid.bytes, base);\n            case \"P\":\n                return prefix(cid);\n            default:\n                throw new Error(`unrecognized specifier in format string: ${specifier}`);\n        }\n    };\n    return replace;\n}\n/**\n * @param {BaseNameOrCode} nameOrCode\n */ function findBase(nameOrCode) {\n    const baseNameCode = bases().find((b)=>b.code === nameOrCode || b.name === nameOrCode);\n    if (!baseNameCode) {\n        throw new Error(`invalid multibase: ${nameOrCode}`);\n    }\n    return baseNameCode;\n}\n/**\n * @param {CID} cid\n */ function findCodec(cid) {\n    const codec = codecs().find((c)=>c.name === cid.codec);\n    if (!codec) {\n        throw new Error(`invalid codec: ${cid.codec}`);\n    }\n    return codec.code;\n}\n/**\n * @param {CID} cid\n */ function prefix(cid) {\n    const { name, length } = multihash.decode(cid.multihash);\n    return `cidv${cid.version}-${cid.codec}-${name}-${length}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/hashes.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/hashes.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst multihash = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\");\n// TODO: list only safe hashes https://github.com/ipfs/go-verifcid\nmodule.exports = function hashes() {\n    const output = [];\n    for (const [name, code] of Object.entries(multihash.names)){\n        output.push({\n            name,\n            code\n        });\n    }\n    return output;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvaGFzaGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsWUFBWUMsbUJBQU9BLENBQUM7QUFFMUIsa0VBQWtFO0FBQ2xFQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0M7SUFDeEIsTUFBTUMsU0FBUyxFQUFFO0lBRWpCLEtBQUssTUFBTSxDQUFDQyxNQUFNQyxLQUFLLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ1QsVUFBVVUsS0FBSyxFQUFHO1FBQzFETCxPQUFPTSxJQUFJLENBQUM7WUFBRUw7WUFBTUM7UUFBSztJQUMzQjtJQUVBLE9BQU9GO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9jaWQtdG9vbC9zcmMvY29yZS9oYXNoZXMuanM/NTE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgbXVsdGloYXNoID0gcmVxdWlyZSgnbXVsdGloYXNoZXMnKVxuXG4vLyBUT0RPOiBsaXN0IG9ubHkgc2FmZSBoYXNoZXMgaHR0cHM6Ly9naXRodWIuY29tL2lwZnMvZ28tdmVyaWZjaWRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzaGVzICgpIHtcbiAgY29uc3Qgb3V0cHV0ID0gW11cblxuICBmb3IgKGNvbnN0IFtuYW1lLCBjb2RlXSBvZiBPYmplY3QuZW50cmllcyhtdWx0aWhhc2gubmFtZXMpKSB7XG4gICAgb3V0cHV0LnB1c2goeyBuYW1lLCBjb2RlIH0pXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG4iXSwibmFtZXMiOlsibXVsdGloYXNoIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJoYXNoZXMiLCJvdXRwdXQiLCJuYW1lIiwiY29kZSIsIk9iamVjdCIsImVudHJpZXMiLCJuYW1lcyIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/hashes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/index.js":
/*!*************************************************!*\
  !*** ./node_modules/cid-tool/src/core/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.base32 = __webpack_require__(/*! ./base32 */ \"(ssr)/./node_modules/cid-tool/src/core/base32.js\");\nexports.bases = __webpack_require__(/*! ./bases */ \"(ssr)/./node_modules/cid-tool/src/core/bases.js\");\nexports.codecs = __webpack_require__(/*! ./codecs */ \"(ssr)/./node_modules/cid-tool/src/core/codecs.js\");\nexports.format = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/cid-tool/src/core/format.js\");\nexports.hashes = __webpack_require__(/*! ./hashes */ \"(ssr)/./node_modules/cid-tool/src/core/hashes.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsd0dBQXlCO0FBQ3pCQSxxR0FBd0I7QUFDeEJBLHdHQUF5QjtBQUN6QkEsd0dBQXlCO0FBQ3pCQSx3R0FBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9jaWQtdG9vbC9zcmMvY29yZS9pbmRleC5qcz80ZWU3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJhc2UzMiA9IHJlcXVpcmUoJy4vYmFzZTMyJylcbmV4cG9ydHMuYmFzZXMgPSByZXF1aXJlKCcuL2Jhc2VzJylcbmV4cG9ydHMuY29kZWNzID0gcmVxdWlyZSgnLi9jb2RlY3MnKVxuZXhwb3J0cy5mb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpXG5leHBvcnRzLmhhc2hlcyA9IHJlcXVpcmUoJy4vaGFzaGVzJylcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiYmFzZTMyIiwicmVxdWlyZSIsImJhc2VzIiwiY29kZWNzIiwiZm9ybWF0IiwiaGFzaGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/cid-tool/src/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * @typedef {import('./core/types').FormatOptions} FormatOptions\n */ module.exports = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/cid-tool/src/core/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FFREEscUdBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2luZGV4LmpzPzI0YmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlL3R5cGVzJykuRm9ybWF0T3B0aW9uc30gRm9ybWF0T3B0aW9uc1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb3JlJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/index.js\n");

/***/ })

};
;
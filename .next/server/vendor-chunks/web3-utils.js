"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-utils";
exports.ids = ["vendor-chunks/web3-utils"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-utils/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/web3-utils/lib/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar ethjsUnit = __webpack_require__(/*! ethjs-unit */ \"(ssr)/./node_modules/ethjs-unit/lib/index.js\");\nvar utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-utils/lib/utils.js\");\nvar soliditySha3 = __webpack_require__(/*! ./soliditySha3.js */ \"(ssr)/./node_modules/web3-utils/lib/soliditySha3.js\");\nvar randombytes = __webpack_require__(/*! randombytes */ \"(ssr)/./node_modules/randombytes/index.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @param {any} optionalData\n * @return {Object} the emitter\n */ var _fireError = function(error, emitter, reject, callback, optionalData) {\n    /*jshint maxcomplexity: 10 */ // add data if given\n    if (!!error && typeof error === \"object\" && !(error instanceof Error) && error.data) {\n        if (!!error.data && typeof error.data === \"object\" || Array.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n        error = error.message + \"\\n\" + error.data;\n    }\n    if (typeof error === \"string\") {\n        error = new Error(error);\n    }\n    if (typeof callback === \"function\") {\n        callback(error, optionalData);\n    }\n    if (typeof reject === \"function\") {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (emitter && typeof emitter.listeners === \"function\" && emitter.listeners(\"error\").length || typeof callback === \"function\") {\n            emitter.catch(function() {});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function() {\n            reject(error);\n        }, 1);\n    }\n    if (emitter && typeof emitter.emit === \"function\") {\n        // emit later, to be able to return emitter\n        setTimeout(function() {\n            emitter.emit(\"error\", error, optionalData);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n    return emitter;\n};\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */ var _jsonInterfaceMethodToString = function(json) {\n    if (!!json && typeof json === \"object\" && json.name && json.name.indexOf(\"(\") !== -1) {\n        return json.name;\n    }\n    return json.name + \"(\" + _flattenTypes(false, json.inputs).join(\",\") + \")\";\n};\n/**\n * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings\n *\n * @method _flattenTypes\n * @param {bool} includeTuple\n * @param {Object} puts\n * @return {Array} parameters as strings\n */ var _flattenTypes = function(includeTuple, puts) {\n    // console.log(\"entered _flattenTypes. inputs/outputs: \" + puts)\n    var types = [];\n    puts.forEach(function(param) {\n        if (typeof param.components === \"object\") {\n            if (param.type.substring(0, 5) !== \"tuple\") {\n                throw new Error(\"components found but type is not tuple; report on GitHub\");\n            }\n            var suffix = \"\";\n            var arrayBracket = param.type.indexOf(\"[\");\n            if (arrayBracket >= 0) {\n                suffix = param.type.substring(arrayBracket);\n            }\n            var result = _flattenTypes(includeTuple, param.components);\n            // console.log(\"result should have things: \" + result)\n            if (Array.isArray(result) && includeTuple) {\n                // console.log(\"include tuple word, and its an array. joining...: \" + result.types)\n                types.push(\"tuple(\" + result.join(\",\") + \")\" + suffix);\n            } else if (!includeTuple) {\n                // console.log(\"don't include tuple, but its an array. joining...: \" + result)\n                types.push(\"(\" + result.join(\",\") + \")\" + suffix);\n            } else {\n                // console.log(\"its a single type within a tuple: \" + result.types)\n                types.push(\"(\" + result + \")\");\n            }\n        } else {\n            // console.log(\"its a type and not directly in a tuple: \" + param.type)\n            types.push(param.type);\n        }\n    });\n    return types;\n};\n/**\n * Returns a random hex string by the given bytes size\n *\n * @param {Number} size\n * @returns {string}\n */ var randomHex = function(size) {\n    return \"0x\" + randombytes(size).toString(\"hex\");\n};\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */ var hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex)) throw new Error(\"The parameter must be a valid HEX string.\");\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === \"0x\") {\n        i = 2;\n    }\n    for(; i < l; i += 2){\n        var code = parseInt(hex.slice(i, i + 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */ var asciiToHex = function(str) {\n    if (!str) return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++){\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? \"0\" + n : n;\n    }\n    return \"0x\" + hex;\n};\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */ var getUnitValue = function(unit) {\n    unit = unit ? unit.toLowerCase() : \"ether\";\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"' + unit + \"\\\" doesn't exist, please use the one of the following units\" + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */ var fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n    if (!utils.isBN(number) && !(typeof number === \"string\")) {\n        throw new Error(\"Please pass numbers as strings or BN objects to avoid precision errors.\");\n    }\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */ var toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n    if (!utils.isBN(number) && !(typeof number === \"string\")) {\n        throw new Error(\"Please pass numbers as strings or BN objects to avoid precision errors.\");\n    }\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */ var toChecksumAddress = function(address) {\n    if (typeof address === \"undefined\") return \"\";\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) throw new Error('Given address \"' + address + '\" is not a valid Ethereum address.');\n    address = address.toLowerCase().replace(/^0x/i, \"\");\n    var addressHash = utils.sha3(address).replace(/^0x/i, \"\");\n    var checksumAddress = \"0x\";\n    for(var i = 0; i < address.length; i++){\n        // If ith character is 8 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n/**\n * Returns -1 if a<b, 1 if a>b; 0 if a == b.\n * For more details on this type of function, see\n * developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * Block tag `safe` and `block number` combination param is not supported\n * @method compareBlockNumbers\n *\n * @param {String|Number|BN} a\n *\n * @param {String|Number|BN} b\n *\n * @returns {Number} -1, 0, or 1\n */ var compareBlockNumbers = function(a, b) {\n    // Increasing order: (genesis = earliest), safe, (finalized ~ latest), pending\n    // safe vs block-num cant be compared as block number provided can be on left or right side of safe tag, until safe tag block number is extracted and compared\n    if (a === b) {\n        return 0;\n    } else if ((\"genesis\" === a || \"earliest\" === a || 0 === a) && (\"genesis\" === b || \"earliest\" === b || 0 === b)) {\n        return 0;\n    } else if (\"genesis\" === a || \"earliest\" === a || a === 0) {\n        // b !== a, thus a < b\n        return -1;\n    } else if (\"genesis\" === b || \"earliest\" === b || b === 0) {\n        // b !== a, thus a > b\n        return 1;\n    } else if (a === \"latest\" || a === \"finalized\") {\n        if (b === \"pending\") {\n            return -1;\n        } else {\n            // b !== (\"pending\" OR \"latest\"), thus a > b\n            return 1;\n        }\n    } else if (b === \"latest\" || b === \"finalized\") {\n        if (a === \"pending\") {\n            return 1;\n        } else {\n            // b !== (\"pending\" OR \"latest\"), thus a > b\n            return -1;\n        }\n    } else if (a === \"pending\") {\n        // b (== OR <) \"latest\", thus a > b\n        return 1;\n    } else if (b === \"pending\") {\n        return -1;\n    } else if (a === \"safe\" || b === \"safe\") {\n        // either a or b is \"safe\" and the other one did not fall into any of the conditions above, so the other one is a number\n        return undefined;\n    } else {\n        let bnA = new BN(a);\n        let bnB = new BN(b);\n        if (bnA.lt(bnB)) {\n            return -1;\n        } else if (bnA.eq(bnB)) {\n            return 0;\n        } else {\n            return 1;\n        }\n    }\n};\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    _flattenTypes: _flattenTypes,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    sha3Raw: utils.sha3Raw,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3.soliditySha3,\n    soliditySha3Raw: soliditySha3.soliditySha3Raw,\n    encodePacked: soliditySha3.encodePacked,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n    hexToNumberString: utils.hexToNumberString,\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber,\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex,\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n    stripHexPrefix: utils.stripHexPrefix,\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement,\n    isBloom: utils.isBloom,\n    isUserEthereumAddressInBloom: utils.isUserEthereumAddressInBloom,\n    isContractAddressInBloom: utils.isContractAddressInBloom,\n    isTopic: utils.isTopic,\n    isTopicInBloom: utils.isTopicInBloom,\n    isInBloom: utils.isInBloom,\n    compareBlockNumbers: compareBlockNumbers,\n    toNumber: utils.toNumber\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/lib/soliditySha3.js":
/*!*****************************************************!*\
  !*** ./node_modules/web3-utils/lib/soliditySha3.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-utils/lib/utils.js\");\nvar _elementaryName = function(name) {\n    /*jshint maxcomplexity:false */ if (name.startsWith(\"int[\")) {\n        return \"int256\" + name.slice(3);\n    } else if (name === \"int\") {\n        return \"int256\";\n    } else if (name.startsWith(\"uint[\")) {\n        return \"uint256\" + name.slice(4);\n    } else if (name === \"uint\") {\n        return \"uint256\";\n    } else if (name.startsWith(\"fixed[\")) {\n        return \"fixed128x128\" + name.slice(5);\n    } else if (name === \"fixed\") {\n        return \"fixed128x128\";\n    } else if (name.startsWith(\"ufixed[\")) {\n        return \"ufixed128x128\" + name.slice(6);\n    } else if (name === \"ufixed\") {\n        return \"ufixed128x128\";\n    }\n    return name;\n};\n// Parse N from type<N>\nvar _parseTypeN = function(type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n// Parse N from type[<N>]\nvar _parseTypeNArray = function(type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\nvar _parseNumber = function(arg) {\n    var type = typeof arg;\n    if (type === \"string\") {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i, \"\"), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === \"number\") {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg + \" is not a number\");\n    }\n};\nvar _solidityPack = function(type, value, arraySize) {\n    /*jshint maxcomplexity:false */ var size, num;\n    type = _elementaryName(type);\n    if (type === \"bytes\") {\n        if (value.replace(/^0x/i, \"\").length % 2 !== 0) {\n            throw new Error(\"Invalid bytes characters \" + value.length);\n        }\n        return value;\n    } else if (type === \"string\") {\n        return utils.utf8ToHex(value);\n    } else if (type === \"bool\") {\n        return value ? \"01\" : \"00\";\n    } else if (type.startsWith(\"address\")) {\n        if (arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n        if (!utils.isAddress(value)) {\n            throw new Error(value + \" is not a valid address, or the checksum is invalid.\");\n        }\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n    size = _parseTypeN(type);\n    if (type.startsWith(\"bytes\")) {\n        if (!size) {\n            throw new Error(\"bytes[] not yet supported in solidity\");\n        }\n        // must be 32 byte slices when in an array\n        if (arraySize) {\n            size = 32;\n        }\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i, \"\").length / 2) {\n            throw new Error(\"Invalid bytes\" + size + \" for \" + value);\n        }\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith(\"uint\")) {\n        if (size % 8 || size < 8 || size > 256) {\n            throw new Error(\"Invalid uint\" + size + \" size\");\n        }\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error(\"Supplied uint exceeds width: \" + size + \" vs \" + num.bitLength());\n        }\n        if (num.lt(new BN(0))) {\n            throw new Error(\"Supplied uint \" + num.toString() + \" is negative\");\n        }\n        return size ? utils.leftPad(num.toString(\"hex\"), size / 8 * 2) : num;\n    } else if (type.startsWith(\"int\")) {\n        if (size % 8 || size < 8 || size > 256) {\n            throw new Error(\"Invalid int\" + size + \" size\");\n        }\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error(\"Supplied int exceeds width: \" + size + \" vs \" + num.bitLength());\n        }\n        if (num.lt(new BN(0))) {\n            return num.toTwos(size).toString(\"hex\");\n        } else {\n            return size ? utils.leftPad(num.toString(\"hex\"), size / 8 * 2) : num;\n        }\n    } else {\n        // FIXME: support all other types\n        throw new Error(\"Unsupported or invalid type: \" + type);\n    }\n};\nvar _processSolidityEncodePackedArgs = function(arg) {\n    /*jshint maxcomplexity:false */ if (Array.isArray(arg)) {\n        throw new Error(\"Autodetection of array types is not supported.\");\n    }\n    var type, value = \"\";\n    var hexArg, arraySize;\n    // if type is given\n    if (!!arg && typeof arg === \"object\" && (arg.hasOwnProperty(\"v\") || arg.hasOwnProperty(\"t\") || arg.hasOwnProperty(\"value\") || arg.hasOwnProperty(\"type\"))) {\n        type = arg.hasOwnProperty(\"t\") ? arg.t : arg.type;\n        value = arg.hasOwnProperty(\"v\") ? arg.v : arg.value;\n    // otherwise try to guess the type\n    } else {\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n        if (!type.startsWith(\"int\") && !type.startsWith(\"uint\")) {\n            type = \"bytes\";\n        }\n    }\n    if ((type.startsWith(\"int\") || type.startsWith(\"uint\")) && typeof value === \"string\" && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n    // get the array size\n    if (Array.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if (arraySize && value.length !== arraySize) {\n            throw new Error(type + \" is not matching the given array \" + JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n    if (Array.isArray(value)) {\n        hexArg = value.map(function(val) {\n            return _solidityPack(type, val, arraySize).toString(\"hex\").replace(\"0x\", \"\");\n        });\n        return hexArg.join(\"\");\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString(\"hex\").replace(\"0x\", \"\");\n    }\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */ var soliditySha3 = function() {\n    /*jshint maxcomplexity:false */ var args = Array.prototype.slice.call(arguments);\n    var hexArgs = args.map(_processSolidityEncodePackedArgs);\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n    return utils.sha3(\"0x\" + hexArgs.join(\"\"));\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`\n *\n * @method soliditySha3Raw\n * @return {Object} the sha3\n */ var soliditySha3Raw = function() {\n    return utils.sha3Raw(\"0x\" + Array.prototype.slice.call(arguments).map(_processSolidityEncodePackedArgs).join(\"\"));\n};\n/**\n * Encode packed args to hex\n *\n * @method encodePacked\n * @return {String} the hex encoded arguments\n */ var encodePacked = function() {\n    /*jshint maxcomplexity:false */ var args = Array.prototype.slice.call(arguments);\n    var hexArgs = args.map(_processSolidityEncodePackedArgs);\n    return \"0x\" + hexArgs.join(\"\").toLowerCase();\n};\nmodule.exports = {\n    soliditySha3: soliditySha3,\n    soliditySha3Raw: soliditySha3Raw,\n    encodePacked: encodePacked\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/lib/soliditySha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/web3-utils/lib/utils.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar numberToBN = __webpack_require__(/*! number-to-bn */ \"(ssr)/./node_modules/number-to-bn/src/index.js\");\nvar utf8 = __webpack_require__(/*! utf8 */ \"(ssr)/./node_modules/utf8/utf8.js\");\nvar ethereumjsUtil = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@ethereumjs/util/dist/index.js\");\nvar ethereumBloomFilters = __webpack_require__(/*! ethereum-bloom-filters */ \"(ssr)/./node_modules/ethereum-bloom-filters/dist/index.js\");\nvar { keccak256 } = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/web3-utils/node_modules/ethereum-cryptography/keccak.js\");\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */ var isBN = function(object) {\n    return BN.isBN(object);\n};\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */ var isBigNumber = function(object) {\n    return object && object.constructor && object.constructor.name === \"BigNumber\";\n};\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */ var toBN = function(number) {\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch (e) {\n        throw new Error(e + ' Given value: \"' + number + '\"');\n    }\n};\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */ var toTwosComplement = function(number) {\n    return \"0x\" + toBN(number).toTwos(256).toString(16, 64);\n};\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */ var isAddress = function(address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n    // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n    // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */ var checkAddressChecksum = function(address) {\n    // Check each case\n    address = address.replace(/^0x/i, \"\");\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, \"\");\n    for(var i = 0; i < 40; i++){\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */ var leftPad = function(string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === \"number\";\n    string = string.toString(16).replace(/^0x/i, \"\");\n    var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n    return (hasPrefix ? \"0x\" : \"\") + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */ var rightPad = function(string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === \"number\";\n    string = string.toString(16).replace(/^0x/i, \"\");\n    var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n    return (hasPrefix ? \"0x\" : \"\") + string + new Array(padding).join(sign ? sign : \"0\");\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */ var utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/, \"\");\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/, \"\");\n    str = str.split(\"\").reverse().join(\"\");\n    for(var i = 0; i < str.length; i++){\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? \"0\" + n : n;\n    // }\n    }\n    return \"0x\" + hex;\n};\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */ var hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex)) throw new Error('The parameter \"' + hex + '\" must be a valid HEX string.');\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i, \"\");\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/, \"\");\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/, \"\");\n    hex = hex.split(\"\").reverse().join(\"\");\n    var l = hex.length;\n    for(var i = 0; i < l; i += 2){\n        code = parseInt(hex.slice(i, i + 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n    // }\n    }\n    return utf8.decode(str);\n};\n/**\n * Converts value to it's number representation.\n * However, if the value is larger than the maximum safe integer, returns the value as a string.\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @param {Boolean} bigIntOnOverflow - if true, return the hex value in case of overflow\n * @return {Number|String}\n */ var hexToNumber = function(value, bigIntOnOverflow = false) {\n    if (!value) {\n        return value;\n    }\n    if (typeof value === \"string\" && !isHexStrict(value)) {\n        throw new Error('Given value \"' + value + '\" is not a valid hex string.');\n    }\n    const n = toBN(value);\n    if (bigIntOnOverflow && (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER)) {\n        return BigInt(n);\n    }\n    return n.toNumber();\n};\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */ var hexToNumberString = function(value) {\n    if (!value) return value;\n    if (typeof value === \"string\" && !isHexStrict(value)) {\n        throw new Error('Given value \"' + value + '\" is not a valid hex string.');\n    }\n    return toBN(value).toString(10);\n};\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */ var numberToHex = function(value) {\n    if (value === null || value === undefined) {\n        return value;\n    }\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"' + value + '\" is not a number.');\n    }\n    var number = toBN(value);\n    var result = number.toString(16);\n    return number.lt(new BN(0)) ? \"-0x\" + result.slice(1) : \"0x\" + result;\n};\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */ var bytesToHex = function(bytes) {\n    for(var hex = [], i = 0; i < bytes.length; i++){\n        /* jshint ignore:start */ hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n    /* jshint ignore:end */ }\n    return \"0x\" + hex.join(\"\");\n};\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */ var hexToBytes = function(hex) {\n    hex = hex.toString(16);\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"' + hex + '\" is not a valid hex string.');\n    }\n    hex = hex.replace(/^0x/i, \"\");\n    for(var bytes = [], c = 0; c < hex.length; c += 2)bytes.push(parseInt(hex.slice(c, c + 2), 16));\n    return bytes;\n};\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object|Buffer} value\n * @param {Boolean} returnType\n * @return {String}\n */ var toHex = function(value, returnType) {\n    /*jshint maxcomplexity: false */ if (isAddress(value)) {\n        return returnType ? \"address\" : \"0x\" + value.toLowerCase().replace(/^0x/i, \"\");\n    }\n    if (typeof value === \"boolean\") {\n        return returnType ? \"bool\" : value ? \"0x01\" : \"0x00\";\n    }\n    if (Buffer.isBuffer(value)) {\n        return \"0x\" + value.toString(\"hex\");\n    }\n    if (typeof value === \"object\" && !!value && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? \"string\" : utf8ToHex(JSON.stringify(value));\n    }\n    // if its a negative number, pass it through numberToHex\n    if (typeof value === \"string\") {\n        if (value.indexOf(\"-0x\") === 0 || value.indexOf(\"-0X\") === 0) {\n            return returnType ? \"int256\" : numberToHex(value);\n        } else if (value.indexOf(\"0x\") === 0 || value.indexOf(\"0X\") === 0) {\n            return returnType ? \"bytes\" : value;\n        } else if (!isFinite(value)) {\n            return returnType ? \"string\" : utf8ToHex(value);\n        }\n    }\n    return returnType ? value < 0 ? \"int256\" : \"uint256\" : numberToHex(value);\n};\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */ var isHexStrict = function(hex) {\n    return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */ var isHex = function(hex) {\n    return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n};\n/**\n * Remove 0x prefix from string\n *\n * @method stripHexPrefix\n * @param {String} str to be checked\n * @returns {String}\n */ var stripHexPrefix = function(str) {\n    if (str !== 0 && isHex(str)) return str.replace(/^(-)?0x/i, \"$1\");\n    return str;\n};\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} bloom encoded bloom filter\n * @return {Boolean}\n */ var isBloom = function(bloom) {\n    return ethereumBloomFilters.isBloom(bloom);\n};\n/**\n * Returns true if the ethereum users address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} ethereumAddress encoded bloom filter\n * @param {String} bloom ethereum addresss\n * @return {Boolean}\n */ var isUserEthereumAddressInBloom = function(bloom, ethereumAddress) {\n    return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);\n};\n/**\n * Returns true if the contract address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} contractAddress contract addresss\n * @return {Boolean}\n */ var isContractAddressInBloom = function(bloom, contractAddress) {\n    return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);\n};\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} topic encoded topic\n * @return {Boolean}\n */ var isTopic = function(topic) {\n    return ethereumBloomFilters.isTopic(topic);\n};\n/**\n * Returns true if the topic is part of the given bloom\n * note: false positives are possible.\n *\n * @method isTopicInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} topic encoded topic\n * @return {Boolean}\n */ var isTopicInBloom = function(bloom, topic) {\n    return ethereumBloomFilters.isTopicInBloom(bloom, topic);\n};\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @method isInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String | Uint8Array} topic encoded value\n * @return {Boolean}\n */ var isInBloom = function(bloom, topic) {\n    return ethereumBloomFilters.isInBloom(bloom, topic);\n};\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */ var SHA3_NULL_S = \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\";\nvar sha3 = function(value) {\n    if (isBN(value)) {\n        value = value.toString();\n    }\n    if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n        value = ethereumjsUtil.toBuffer(value);\n    } else if (typeof value === \"string\") {\n        // Assume value is an arbitrary string\n        value = Buffer.from(value, \"utf-8\");\n    }\n    var returnValue = ethereumjsUtil.bufferToHex(keccak256(value));\n    if (returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = keccak256;\n/**\n * @method sha3Raw\n *\n * @param value\n *\n * @returns {string}\n */ var sha3Raw = function(value) {\n    value = sha3(value);\n    if (value === null) {\n        return SHA3_NULL_S;\n    }\n    return value;\n};\n/**\n * Auto converts any given value into it's hex representation,\n * then converts hex to number.\n *\n * @method toNumber\n * @param {String|Number|BN} value\n * @param {Boolean} bigIntOnOverflow - if true, return the hex value in case of overflow\n * @return {Number|String}\n */ var toNumber = function(value, bigIntOnOverflow = false) {\n    return typeof value === \"number\" ? value : hexToNumber(toHex(value), bigIntOnOverflow);\n};\n// 1.x currently accepts 0x... strings, bn.js after update doesn't. it would be a breaking change\nvar BNwrapped = function(value) {\n    // check negative\n    if (typeof value == \"string\" && value.includes(\"0x\")) {\n        const [negative, hexValue] = value.toLocaleLowerCase().startsWith(\"-\") ? [\n            \"-\",\n            value.slice(3)\n        ] : [\n            \"\",\n            value.slice(2)\n        ];\n        return new BN(negative + hexValue, 16);\n    } else {\n        return new BN(value);\n    }\n};\nObject.setPrototypeOf(BNwrapped, BN);\nObject.setPrototypeOf(BNwrapped.prototype, BN.prototype);\nmodule.exports = {\n    BN: BNwrapped,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom,\n    isUserEthereumAddressInBloom: isUserEthereumAddressInBloom,\n    isContractAddressInBloom: isContractAddressInBloom,\n    isTopic: isTopic,\n    isTopicInBloom: isTopicInBloom,\n    isInBloom: isInBloom,\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    stripHexPrefix: stripHexPrefix,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3,\n    sha3Raw: sha3Raw,\n    toNumber: toNumber\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy11dGlscy9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0Q7Ozs7Q0FJQztBQUNELElBQUlBLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ2pCLElBQUlDLGFBQWFELG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlFLE9BQU9GLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlHLGlCQUFpQkgsbUJBQU9BLENBQUM7QUFDN0IsSUFBSUksdUJBQXVCSixtQkFBT0EsQ0FBQztBQUNuQyxJQUFJLEVBQUVLLFNBQVMsRUFBRSxHQUFHTCxtQkFBT0EsQ0FBQztBQUM1Qjs7Ozs7O0NBTUMsR0FDRCxJQUFJTSxPQUFPLFNBQVVDLE1BQU07SUFDdkIsT0FBT1IsR0FBR08sSUFBSSxDQUFDQztBQUNuQjtBQUNBOzs7Ozs7Q0FNQyxHQUNELElBQUlDLGNBQWMsU0FBVUQsTUFBTTtJQUM5QixPQUFPQSxVQUFVQSxPQUFPRSxXQUFXLElBQUlGLE9BQU9FLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLO0FBQ3ZFO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsSUFBSUMsT0FBTyxTQUFVQyxNQUFNO0lBQ3ZCLElBQUk7UUFDQSxPQUFPWCxXQUFXWSxLQUFLLENBQUMsTUFBTUM7SUFDbEMsRUFDQSxPQUFPQyxHQUFHO1FBQ04sTUFBTSxJQUFJQyxNQUFNRCxJQUFJLG9CQUFvQkgsU0FBUztJQUNyRDtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsSUFBSUssbUJBQW1CLFNBQVVMLE1BQU07SUFDbkMsT0FBTyxPQUFPRCxLQUFLQyxRQUFRTSxNQUFNLENBQUMsS0FBS0MsUUFBUSxDQUFDLElBQUk7QUFDeEQ7QUFDQTs7Ozs7O0NBTUMsR0FDRCxJQUFJQyxZQUFZLFNBQVVDLE9BQU87SUFDN0IsdURBQXVEO0lBQ3ZELElBQUksQ0FBQyx1QkFBdUJDLElBQUksQ0FBQ0QsVUFBVTtRQUN2QyxPQUFPO0lBQ1AsMENBQTBDO0lBQzlDLE9BQ0ss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My11dGlscy9saWIvdXRpbHMuanM/MDg2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cbi8qKlxuICogQGZpbGUgdXRpbHMuanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBudW1iZXJUb0JOID0gcmVxdWlyZSgnbnVtYmVyLXRvLWJuJyk7XG52YXIgdXRmOCA9IHJlcXVpcmUoJ3V0ZjgnKTtcbnZhciBldGhlcmV1bWpzVXRpbCA9IHJlcXVpcmUoJ0BldGhlcmV1bWpzL3V0aWwnKTtcbnZhciBldGhlcmV1bUJsb29tRmlsdGVycyA9IHJlcXVpcmUoJ2V0aGVyZXVtLWJsb29tLWZpbHRlcnMnKTtcbnZhciB7IGtlY2NhazI1NiB9ID0gcmVxdWlyZSgnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2Nhay5qcycpO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGlzIEJOLCBvdGhlcndpc2UgZmFsc2VcbiAqXG4gKiBAbWV0aG9kIGlzQk5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBpc0JOID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBCTi5pc0JOKG9iamVjdCk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGlzIEJpZ051bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKlxuICogQG1ldGhvZCBpc0JpZ051bWJlclxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzQmlnTnVtYmVyID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yICYmIG9iamVjdC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQmlnTnVtYmVyJztcbn07XG4vKipcbiAqIFRha2VzIGFuIGlucHV0IGFuZCB0cmFuc2Zvcm1zIGl0IGludG8gYW4gQk5cbiAqXG4gKiBAbWV0aG9kIHRvQk5cbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ3xCTn0gbnVtYmVyLCBzdHJpbmcsIEhFWCBzdHJpbmcgb3IgQk5cbiAqIEByZXR1cm4ge0JOfSBCTlxuICovXG52YXIgdG9CTiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gbnVtYmVyVG9CTi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSArICcgR2l2ZW4gdmFsdWU6IFwiJyArIG51bWJlciArICdcIicpO1xuICAgIH1cbn07XG4vKipcbiAqIFRha2VzIGFuZCBpbnB1dCB0cmFuc2Zvcm1zIGl0IGludG8gQk4gYW5kIGlmIGl0IGlzIG5lZ2F0aXZlIHZhbHVlLCBpbnRvIHR3bydzIGNvbXBsZW1lbnRcbiAqXG4gKiBAbWV0aG9kIHRvVHdvc0NvbXBsZW1lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ3xCTn0gbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbnZhciB0b1R3b3NDb21wbGVtZW50ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICAgIHJldHVybiAnMHgnICsgdG9CTihudW1iZXIpLnRvVHdvcygyNTYpLnRvU3RyaW5nKDE2LCA2NCk7XG59O1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHN0cmluZyBpcyBhbiBhZGRyZXNzXG4gKlxuICogQG1ldGhvZCBpc0FkZHJlc3NcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIHRoZSBnaXZlbiBIRVggYWRkcmVzc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBiYXNpYyByZXF1aXJlbWVudHMgb2YgYW4gYWRkcmVzc1xuICAgIGlmICghL14oMHgpP1swLTlhLWZdezQwfSQvaS50ZXN0KGFkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gSWYgaXQncyBBTEwgbG93ZXJjYXNlIG9yIEFMTCB1cHBwZXJjYXNlXG4gICAgfVxuICAgIGVsc2UgaWYgKC9eKDB4fDBYKT9bMC05YS1mXXs0MH0kLy50ZXN0KGFkZHJlc3MpIHx8IC9eKDB4fDBYKT9bMC05QS1GXXs0MH0kLy50ZXN0KGFkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAvLyBPdGhlcndpc2UgY2hlY2sgZWFjaCBjYXNlXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gY2hlY2tBZGRyZXNzQ2hlY2tzdW0oYWRkcmVzcyk7XG4gICAgfVxufTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBzdHJpbmcgaXMgYSBjaGVja3N1bW1lZCBhZGRyZXNzXG4gKlxuICogQG1ldGhvZCBjaGVja0FkZHJlc3NDaGVja3N1bVxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgdGhlIGdpdmVuIEhFWCBhZGRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG52YXIgY2hlY2tBZGRyZXNzQ2hlY2tzdW0gPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIC8vIENoZWNrIGVhY2ggY2FzZVxuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnJlcGxhY2UoL14weC9pLCAnJyk7XG4gICAgdmFyIGFkZHJlc3NIYXNoID0gc2hhMyhhZGRyZXNzLnRvTG93ZXJDYXNlKCkpLnJlcGxhY2UoL14weC9pLCAnJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0MDsgaSsrKSB7XG4gICAgICAgIC8vIHRoZSBudGggbGV0dGVyIHNob3VsZCBiZSB1cHBlcmNhc2UgaWYgdGhlIG50aCBkaWdpdCBvZiBjYXNlbWFwIGlzIDFcbiAgICAgICAgaWYgKChwYXJzZUludChhZGRyZXNzSGFzaFtpXSwgMTYpID4gNyAmJiBhZGRyZXNzW2ldLnRvVXBwZXJDYXNlKCkgIT09IGFkZHJlc3NbaV0pIHx8IChwYXJzZUludChhZGRyZXNzSGFzaFtpXSwgMTYpIDw9IDcgJiYgYWRkcmVzc1tpXS50b0xvd2VyQ2FzZSgpICE9PSBhZGRyZXNzW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBwYWQgc3RyaW5nIHRvIGV4cGVjdGVkIGxlbmd0aFxuICpcbiAqIEBtZXRob2QgbGVmdFBhZFxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyB0byBiZSBwYWRkZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBjaGFycyB0aGF0IHJlc3VsdCBzdHJpbmcgc2hvdWxkIGhhdmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaWduLCBieSBkZWZhdWx0IDBcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHJpZ2h0IGFsaWduZWQgc3RyaW5nXG4gKi9cbnZhciBsZWZ0UGFkID0gZnVuY3Rpb24gKHN0cmluZywgY2hhcnMsIHNpZ24pIHtcbiAgICB2YXIgaGFzUHJlZml4ID0gL14weC9pLnRlc3Qoc3RyaW5nKSB8fCB0eXBlb2Ygc3RyaW5nID09PSAnbnVtYmVyJztcbiAgICBzdHJpbmcgPSBzdHJpbmcudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14weC9pLCAnJyk7XG4gICAgdmFyIHBhZGRpbmcgPSAoY2hhcnMgLSBzdHJpbmcubGVuZ3RoICsgMSA+PSAwKSA/IGNoYXJzIC0gc3RyaW5nLmxlbmd0aCArIDEgOiAwO1xuICAgIHJldHVybiAoaGFzUHJlZml4ID8gJzB4JyA6ICcnKSArIG5ldyBBcnJheShwYWRkaW5nKS5qb2luKHNpZ24gPyBzaWduIDogXCIwXCIpICsgc3RyaW5nO1xufTtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBwYWQgc3RyaW5nIHRvIGV4cGVjdGVkIGxlbmd0aFxuICpcbiAqIEBtZXRob2QgcmlnaHRQYWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgdG8gYmUgcGFkZGVkXG4gKiBAcGFyYW0ge051bWJlcn0gY2hhcnMgdGhhdCByZXN1bHQgc3RyaW5nIHNob3VsZCBoYXZlXG4gKiBAcGFyYW0ge1N0cmluZ30gc2lnbiwgYnkgZGVmYXVsdCAwXG4gKiBAcmV0dXJucyB7U3RyaW5nfSByaWdodCBhbGlnbmVkIHN0cmluZ1xuICovXG52YXIgcmlnaHRQYWQgPSBmdW5jdGlvbiAoc3RyaW5nLCBjaGFycywgc2lnbikge1xuICAgIHZhciBoYXNQcmVmaXggPSAvXjB4L2kudGVzdChzdHJpbmcpIHx8IHR5cGVvZiBzdHJpbmcgPT09ICdudW1iZXInO1xuICAgIHN0cmluZyA9IHN0cmluZy50b1N0cmluZygxNikucmVwbGFjZSgvXjB4L2ksICcnKTtcbiAgICB2YXIgcGFkZGluZyA9IChjaGFycyAtIHN0cmluZy5sZW5ndGggKyAxID49IDApID8gY2hhcnMgLSBzdHJpbmcubGVuZ3RoICsgMSA6IDA7XG4gICAgcmV0dXJuIChoYXNQcmVmaXggPyAnMHgnIDogJycpICsgc3RyaW5nICsgKG5ldyBBcnJheShwYWRkaW5nKS5qb2luKHNpZ24gPyBzaWduIDogXCIwXCIpKTtcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGhleCByZXByZXNlbnRhdGlvbiAocHJlZml4ZWQgYnkgMHgpIG9mIHV0Zjggc3RyaW5nXG4gKlxuICogQG1ldGhvZCB1dGY4VG9IZXhcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGhleCByZXByZXNlbnRhdGlvbiBvZiBpbnB1dCBzdHJpbmdcbiAqL1xudmFyIHV0ZjhUb0hleCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBzdHIgPSB1dGY4LmVuY29kZShzdHIpO1xuICAgIHZhciBoZXggPSBcIlwiO1xuICAgIC8vIHJlbW92ZSBcXHUwMDAwIHBhZGRpbmcgZnJvbSBlaXRoZXIgc2lkZVxuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9eKD86XFx1MDAwMCkqLywgJycpO1xuICAgIHN0ciA9IHN0ci5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXig/OlxcdTAwMDApKi8sICcnKTtcbiAgICBzdHIgPSBzdHIuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gaWYgKGNvZGUgIT09IDApIHtcbiAgICAgICAgdmFyIG4gPSBjb2RlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaGV4ICs9IG4ubGVuZ3RoIDwgMiA/ICcwJyArIG4gOiBuO1xuICAgICAgICAvLyB9XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyBoZXg7XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCB1dGY4IGZyb20gaXQncyBoZXggcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAbWV0aG9kIGhleFRvVXRmOFxuICogQHBhcmFtIHtTdHJpbmd9IGhleFxuICogQHJldHVybnMge1N0cmluZ30gYXNjaWkgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGhleCB2YWx1ZVxuICovXG52YXIgaGV4VG9VdGY4ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIGlmICghaXNIZXhTdHJpY3QoaGV4KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcGFyYW1ldGVyIFwiJyArIGhleCArICdcIiBtdXN0IGJlIGEgdmFsaWQgSEVYIHN0cmluZy4nKTtcbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICB2YXIgY29kZSA9IDA7XG4gICAgaGV4ID0gaGV4LnJlcGxhY2UoL14weC9pLCAnJyk7XG4gICAgLy8gcmVtb3ZlIDAwIHBhZGRpbmcgZnJvbSBlaXRoZXIgc2lkZVxuICAgIGhleCA9IGhleC5yZXBsYWNlKC9eKD86MDApKi8sICcnKTtcbiAgICBoZXggPSBoZXguc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgaGV4ID0gaGV4LnJlcGxhY2UoL14oPzowMCkqLywgJycpO1xuICAgIGhleCA9IGhleC5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTtcbiAgICB2YXIgbCA9IGhleC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgICAgY29kZSA9IHBhcnNlSW50KGhleC5zbGljZShpLCBpICsgMiksIDE2KTtcbiAgICAgICAgLy8gaWYgKGNvZGUgIT09IDApIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgIC8vIH1cbiAgICB9XG4gICAgcmV0dXJuIHV0ZjguZGVjb2RlKHN0cik7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyB2YWx1ZSB0byBpdCdzIG51bWJlciByZXByZXNlbnRhdGlvbi5cbiAqIEhvd2V2ZXIsIGlmIHRoZSB2YWx1ZSBpcyBsYXJnZXIgdGhhbiB0aGUgbWF4aW11bSBzYWZlIGludGVnZXIsIHJldHVybnMgdGhlIHZhbHVlIGFzIGEgc3RyaW5nLlxuICpcbiAqIEBtZXRob2QgaGV4VG9OdW1iZXJcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxCTn0gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYmlnSW50T25PdmVyZmxvdyAtIGlmIHRydWUsIHJldHVybiB0aGUgaGV4IHZhbHVlIGluIGNhc2Ugb2Ygb3ZlcmZsb3dcbiAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9XG4gKi9cbnZhciBoZXhUb051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSwgYmlnSW50T25PdmVyZmxvdyA9IGZhbHNlKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICFpc0hleFN0cmljdCh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiB2YWx1ZSBcIicgKyB2YWx1ZSArICdcIiBpcyBub3QgYSB2YWxpZCBoZXggc3RyaW5nLicpO1xuICAgIH1cbiAgICBjb25zdCBuID0gdG9CTih2YWx1ZSk7XG4gICAgaWYgKGJpZ0ludE9uT3ZlcmZsb3cgJiYgKG4gPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCBuIDwgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQobik7XG4gICAgfVxuICAgIHJldHVybiBuLnRvTnVtYmVyKCk7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyB2YWx1ZSB0byBpdCdzIGRlY2ltYWwgcmVwcmVzZW50YXRpb24gaW4gc3RyaW5nXG4gKlxuICogQG1ldGhvZCBoZXhUb051bWJlclN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJOfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG52YXIgaGV4VG9OdW1iZXJTdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIWlzSGV4U3RyaWN0KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dpdmVuIHZhbHVlIFwiJyArIHZhbHVlICsgJ1wiIGlzIG5vdCBhIHZhbGlkIGhleCBzdHJpbmcuJyk7XG4gICAgfVxuICAgIHJldHVybiB0b0JOKHZhbHVlKS50b1N0cmluZygxMCk7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyB2YWx1ZSB0byBpdCdzIGhleCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBtZXRob2QgbnVtYmVyVG9IZXhcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxCTn0gdmFsdWVcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xudmFyIG51bWJlclRvSGV4ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKCh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICghaXNGaW5pdGUodmFsdWUpICYmICFpc0hleFN0cmljdCh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiBpbnB1dCBcIicgKyB2YWx1ZSArICdcIiBpcyBub3QgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIHZhciBudW1iZXIgPSB0b0JOKHZhbHVlKTtcbiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gbnVtYmVyLmx0KG5ldyBCTigwKSkgPyAnLTB4JyArIHJlc3VsdC5zbGljZSgxKSA6ICcweCcgKyByZXN1bHQ7XG59O1xuLyoqXG4gKiBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIGhleCBzdHJpbmdcbiAqXG4gKiBOb3RlOiBJbXBsZW1lbnRhdGlvbiBmcm9tIGNyeXB0by1qc1xuICpcbiAqIEBtZXRob2QgYnl0ZXNUb0hleFxuICogQHBhcmFtIHtBcnJheX0gYnl0ZXNcbiAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGhleCBzdHJpbmdcbiAqL1xudmFyIGJ5dGVzVG9IZXggPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICBmb3IgKHZhciBoZXggPSBbXSwgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG4gICAgICAgIGhleC5wdXNoKChieXRlc1tpXSA+Pj4gNCkudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgaGV4LnB1c2goKGJ5dGVzW2ldICYgMHhGKS50b1N0cmluZygxNikpO1xuICAgICAgICAvKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xuICAgIH1cbiAgICByZXR1cm4gJzB4JyArIGhleC5qb2luKFwiXCIpO1xufTtcbi8qKlxuICogQ29udmVydCBhIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gKlxuICogTm90ZTogSW1wbGVtZW50YXRpb24gZnJvbSBjcnlwdG8tanNcbiAqXG4gKiBAbWV0aG9kIGhleFRvQnl0ZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBoZXhcbiAqIEByZXR1cm4ge0FycmF5fSB0aGUgYnl0ZSBhcnJheVxuICovXG52YXIgaGV4VG9CeXRlcyA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICBoZXggPSBoZXgudG9TdHJpbmcoMTYpO1xuICAgIGlmICghaXNIZXhTdHJpY3QoaGV4KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dpdmVuIHZhbHVlIFwiJyArIGhleCArICdcIiBpcyBub3QgYSB2YWxpZCBoZXggc3RyaW5nLicpO1xuICAgIH1cbiAgICBoZXggPSBoZXgucmVwbGFjZSgvXjB4L2ksICcnKTtcbiAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBjID0gMDsgYyA8IGhleC5sZW5ndGg7IGMgKz0gMilcbiAgICAgICAgYnl0ZXMucHVzaChwYXJzZUludChoZXguc2xpY2UoYywgYyArIDIpLCAxNikpO1xuICAgIHJldHVybiBieXRlcztcbn07XG4vKipcbiAqIEF1dG8gY29udmVydHMgYW55IGdpdmVuIHZhbHVlIGludG8gaXQncyBoZXggcmVwcmVzZW50YXRpb24uXG4gKlxuICogQW5kIGV2ZW4gc3RyaW5naWZ5cyBvYmplY3RzIGJlZm9yZS5cbiAqXG4gKiBAbWV0aG9kIHRvSGV4XG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8Qk58T2JqZWN0fEJ1ZmZlcn0gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmV0dXJuVHlwZVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG52YXIgdG9IZXggPSBmdW5jdGlvbiAodmFsdWUsIHJldHVyblR5cGUpIHtcbiAgICAvKmpzaGludCBtYXhjb21wbGV4aXR5OiBmYWxzZSAqL1xuICAgIGlmIChpc0FkZHJlc3ModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5UeXBlID8gJ2FkZHJlc3MnIDogJzB4JyArIHZhbHVlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXjB4L2ksICcnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5UeXBlID8gJ2Jvb2wnIDogdmFsdWUgPyAnMHgwMScgOiAnMHgwMCc7XG4gICAgfVxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnMHgnICsgdmFsdWUudG9TdHJpbmcoJ2hleCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhIXZhbHVlICYmICFpc0JpZ051bWJlcih2YWx1ZSkgJiYgIWlzQk4odmFsdWUpKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5UeXBlID8gJ3N0cmluZycgOiB1dGY4VG9IZXgoSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICB9XG4gICAgLy8gaWYgaXRzIGEgbmVnYXRpdmUgbnVtYmVyLCBwYXNzIGl0IHRocm91Z2ggbnVtYmVyVG9IZXhcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodmFsdWUuaW5kZXhPZignLTB4JykgPT09IDAgfHwgdmFsdWUuaW5kZXhPZignLTBYJykgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5UeXBlID8gJ2ludDI1NicgOiBudW1iZXJUb0hleCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUuaW5kZXhPZignMHgnKSA9PT0gMCB8fCB2YWx1ZS5pbmRleE9mKCcwWCcpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVHlwZSA/ICdieXRlcycgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVHlwZSA/ICdzdHJpbmcnIDogdXRmOFRvSGV4KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVHlwZSA/ICh2YWx1ZSA8IDAgPyAnaW50MjU2JyA6ICd1aW50MjU2JykgOiBudW1iZXJUb0hleCh2YWx1ZSk7XG59O1xuLyoqXG4gKiBDaGVjayBpZiBzdHJpbmcgaXMgSEVYLCByZXF1aXJlcyBhIDB4IGluIGZyb250XG4gKlxuICogQG1ldGhvZCBpc0hleFN0cmljdFxuICogQHBhcmFtIHtTdHJpbmd9IGhleCB0byBiZSBjaGVja2VkXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzSGV4U3RyaWN0ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIHJldHVybiAoKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBoZXggPT09ICdudW1iZXInKSAmJiAvXigtKT8weFswLTlhLWZdKiQvaS50ZXN0KGhleCkpO1xufTtcbi8qKlxuICogQ2hlY2sgaWYgc3RyaW5nIGlzIEhFWFxuICpcbiAqIEBtZXRob2QgaXNIZXhcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZXggdG8gYmUgY2hlY2tlZFxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbnZhciBpc0hleCA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICByZXR1cm4gKCh0eXBlb2YgaGV4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaGV4ID09PSAnbnVtYmVyJykgJiYgL14oLTB4fDB4KT9bMC05YS1mXSokL2kudGVzdChoZXgpKTtcbn07XG4vKipcbiAqIFJlbW92ZSAweCBwcmVmaXggZnJvbSBzdHJpbmdcbiAqXG4gKiBAbWV0aG9kIHN0cmlwSGV4UHJlZml4XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRvIGJlIGNoZWNrZWRcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbnZhciBzdHJpcEhleFByZWZpeCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAoc3RyICE9PSAwICYmIGlzSGV4KHN0cikpXG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXigtKT8weC9pLCAnJDEnKTtcbiAgICByZXR1cm4gc3RyO1xufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGdpdmVuIHN0cmluZyBpcyBhIHZhbGlkIEV0aGVyZXVtIGJsb2NrIGhlYWRlciBibG9vbS5cbiAqXG4gKiBAbWV0aG9kIGlzQmxvb21cbiAqIEBwYXJhbSB7U3RyaW5nfSBibG9vbSBlbmNvZGVkIGJsb29tIGZpbHRlclxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzQmxvb20gPSBmdW5jdGlvbiAoYmxvb20pIHtcbiAgICByZXR1cm4gZXRoZXJldW1CbG9vbUZpbHRlcnMuaXNCbG9vbShibG9vbSk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGV0aGVyZXVtIHVzZXJzIGFkZHJlc3MgaXMgcGFydCBvZiB0aGUgZ2l2ZW4gYmxvb21cbiAqIG5vdGU6IGZhbHNlIHBvc2l0aXZlcyBhcmUgcG9zc2libGUuXG4gKlxuICogQG1ldGhvZCBpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tXG4gKiBAcGFyYW0ge1N0cmluZ30gZXRoZXJldW1BZGRyZXNzIGVuY29kZWQgYmxvb20gZmlsdGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gYmxvb20gZXRoZXJldW0gYWRkcmVzc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tID0gZnVuY3Rpb24gKGJsb29tLCBldGhlcmV1bUFkZHJlc3MpIHtcbiAgICByZXR1cm4gZXRoZXJldW1CbG9vbUZpbHRlcnMuaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbShibG9vbSwgZXRoZXJldW1BZGRyZXNzKTtcbn07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29udHJhY3QgYWRkcmVzcyBpcyBwYXJ0IG9mIHRoZSBnaXZlbiBibG9vbVxuICogbm90ZTogZmFsc2UgcG9zaXRpdmVzIGFyZSBwb3NzaWJsZS5cbiAqXG4gKiBAbWV0aG9kIGlzVXNlckV0aGVyZXVtQWRkcmVzc0luQmxvb21cbiAqIEBwYXJhbSB7U3RyaW5nfSBibG9vbSBlbmNvZGVkIGJsb29tIGZpbHRlclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbnRyYWN0QWRkcmVzcyBjb250cmFjdCBhZGRyZXNzc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbSA9IGZ1bmN0aW9uIChibG9vbSwgY29udHJhY3RBZGRyZXNzKSB7XG4gICAgcmV0dXJuIGV0aGVyZXVtQmxvb21GaWx0ZXJzLmlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbShibG9vbSwgY29udHJhY3RBZGRyZXNzKTtcbn07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBnaXZlbiBzdHJpbmcgaXMgYSB2YWxpZCBsb2cgdG9waWMuXG4gKlxuICogQG1ldGhvZCBpc1RvcGljXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9waWMgZW5jb2RlZCB0b3BpY1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzVG9waWMgPSBmdW5jdGlvbiAodG9waWMpIHtcbiAgICByZXR1cm4gZXRoZXJldW1CbG9vbUZpbHRlcnMuaXNUb3BpYyh0b3BpYyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHRvcGljIGlzIHBhcnQgb2YgdGhlIGdpdmVuIGJsb29tXG4gKiBub3RlOiBmYWxzZSBwb3NpdGl2ZXMgYXJlIHBvc3NpYmxlLlxuICpcbiAqIEBtZXRob2QgaXNUb3BpY0luQmxvb21cbiAqIEBwYXJhbSB7U3RyaW5nfSBibG9vbSBlbmNvZGVkIGJsb29tIGZpbHRlclxuICogQHBhcmFtIHtTdHJpbmd9IHRvcGljIGVuY29kZWQgdG9waWNcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbnZhciBpc1RvcGljSW5CbG9vbSA9IGZ1bmN0aW9uIChibG9vbSwgdG9waWMpIHtcbiAgICByZXR1cm4gZXRoZXJldW1CbG9vbUZpbHRlcnMuaXNUb3BpY0luQmxvb20oYmxvb20sIHRvcGljKTtcbn07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdmFsdWUgaXMgcGFydCBvZiB0aGUgZ2l2ZW4gYmxvb21cbiAqIG5vdGU6IGZhbHNlIHBvc2l0aXZlcyBhcmUgcG9zc2libGUuXG4gKlxuICogQG1ldGhvZCBpc0luQmxvb21cbiAqIEBwYXJhbSB7U3RyaW5nfSBibG9vbSBlbmNvZGVkIGJsb29tIGZpbHRlclxuICogQHBhcmFtIHtTdHJpbmcgfCBVaW50OEFycmF5fSB0b3BpYyBlbmNvZGVkIHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG52YXIgaXNJbkJsb29tID0gZnVuY3Rpb24gKGJsb29tLCB0b3BpYykge1xuICAgIHJldHVybiBldGhlcmV1bUJsb29tRmlsdGVycy5pc0luQmxvb20oYmxvb20sIHRvcGljKTtcbn07XG4vKipcbiAqIEhhc2hlcyB2YWx1ZXMgdG8gYSBzaGEzIGhhc2ggdXNpbmcga2VjY2FrIDI1NlxuICpcbiAqIFRvIGhhc2ggYSBIRVggc3RyaW5nIHRoZSBoZXggbXVzdCBoYXZlIDB4IGluIGZyb250LlxuICpcbiAqIEBtZXRob2Qgc2hhM1xuICogQHJldHVybiB7U3RyaW5nfSB0aGUgc2hhMyBzdHJpbmdcbiAqL1xudmFyIFNIQTNfTlVMTF9TID0gJzB4YzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG52YXIgc2hhMyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChpc0JOKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmIChpc0hleFN0cmljdCh2YWx1ZSkgJiYgL14weC9pLnRlc3QoKHZhbHVlKS50b1N0cmluZygpKSkge1xuICAgICAgICB2YWx1ZSA9IGV0aGVyZXVtanNVdGlsLnRvQnVmZmVyKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBBc3N1bWUgdmFsdWUgaXMgYW4gYXJiaXRyYXJ5IHN0cmluZ1xuICAgICAgICB2YWx1ZSA9IEJ1ZmZlci5mcm9tKHZhbHVlLCAndXRmLTgnKTtcbiAgICB9XG4gICAgdmFyIHJldHVyblZhbHVlID0gZXRoZXJldW1qc1V0aWwuYnVmZmVyVG9IZXgoa2VjY2FrMjU2KHZhbHVlKSk7XG4gICAgaWYgKHJldHVyblZhbHVlID09PSBTSEEzX05VTExfUykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9XG59O1xuLy8gZXhwb3NlIHRoZSB1bmRlciB0aGUgaG9vZCBrZWNjYWsyNTZcbnNoYTMuX0hhc2ggPSBrZWNjYWsyNTY7XG4vKipcbiAqIEBtZXRob2Qgc2hhM1Jhd1xuICpcbiAqIEBwYXJhbSB2YWx1ZVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciBzaGEzUmF3ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFsdWUgPSBzaGEzKHZhbHVlKTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFNIQTNfTlVMTF9TO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuLyoqXG4gKiBBdXRvIGNvbnZlcnRzIGFueSBnaXZlbiB2YWx1ZSBpbnRvIGl0J3MgaGV4IHJlcHJlc2VudGF0aW9uLFxuICogdGhlbiBjb252ZXJ0cyBoZXggdG8gbnVtYmVyLlxuICpcbiAqIEBtZXRob2QgdG9OdW1iZXJcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxCTn0gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYmlnSW50T25PdmVyZmxvdyAtIGlmIHRydWUsIHJldHVybiB0aGUgaGV4IHZhbHVlIGluIGNhc2Ugb2Ygb3ZlcmZsb3dcbiAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9XG4gKi9cbnZhciB0b051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSwgYmlnSW50T25PdmVyZmxvdyA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyB2YWx1ZSA6IGhleFRvTnVtYmVyKHRvSGV4KHZhbHVlKSwgYmlnSW50T25PdmVyZmxvdyk7XG59O1xuLy8gMS54IGN1cnJlbnRseSBhY2NlcHRzIDB4Li4uIHN0cmluZ3MsIGJuLmpzIGFmdGVyIHVwZGF0ZSBkb2Vzbid0LiBpdCB3b3VsZCBiZSBhIGJyZWFraW5nIGNoYW5nZVxudmFyIEJOd3JhcHBlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIGNoZWNrIG5lZ2F0aXZlXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiICYmIHZhbHVlLmluY2x1ZGVzKFwiMHhcIikpIHtcbiAgICAgICAgY29uc3QgW25lZ2F0aXZlLCBoZXhWYWx1ZV0gPSB2YWx1ZS50b0xvY2FsZUxvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJy0nKSA/IFtcIi1cIiwgdmFsdWUuc2xpY2UoMyldIDogW1wiXCIsIHZhbHVlLnNsaWNlKDIpXTtcbiAgICAgICAgcmV0dXJuIG5ldyBCTihuZWdhdGl2ZSArIGhleFZhbHVlLCAxNik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEJOKHZhbHVlKTtcbiAgICB9XG59O1xuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJOd3JhcHBlZCwgQk4pO1xuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJOd3JhcHBlZC5wcm90b3R5cGUsIEJOLnByb3RvdHlwZSk7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBCTjogQk53cmFwcGVkLFxuICAgIGlzQk46IGlzQk4sXG4gICAgaXNCaWdOdW1iZXI6IGlzQmlnTnVtYmVyLFxuICAgIHRvQk46IHRvQk4sXG4gICAgaXNBZGRyZXNzOiBpc0FkZHJlc3MsXG4gICAgaXNCbG9vbTogaXNCbG9vbSxcbiAgICBpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tOiBpc1VzZXJFdGhlcmV1bUFkZHJlc3NJbkJsb29tLFxuICAgIGlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbTogaXNDb250cmFjdEFkZHJlc3NJbkJsb29tLFxuICAgIGlzVG9waWM6IGlzVG9waWMsXG4gICAgaXNUb3BpY0luQmxvb206IGlzVG9waWNJbkJsb29tLFxuICAgIGlzSW5CbG9vbTogaXNJbkJsb29tLFxuICAgIGNoZWNrQWRkcmVzc0NoZWNrc3VtOiBjaGVja0FkZHJlc3NDaGVja3N1bSxcbiAgICB1dGY4VG9IZXg6IHV0ZjhUb0hleCxcbiAgICBoZXhUb1V0Zjg6IGhleFRvVXRmOCxcbiAgICBoZXhUb051bWJlcjogaGV4VG9OdW1iZXIsXG4gICAgaGV4VG9OdW1iZXJTdHJpbmc6IGhleFRvTnVtYmVyU3RyaW5nLFxuICAgIG51bWJlclRvSGV4OiBudW1iZXJUb0hleCxcbiAgICB0b0hleDogdG9IZXgsXG4gICAgaGV4VG9CeXRlczogaGV4VG9CeXRlcyxcbiAgICBieXRlc1RvSGV4OiBieXRlc1RvSGV4LFxuICAgIGlzSGV4OiBpc0hleCxcbiAgICBpc0hleFN0cmljdDogaXNIZXhTdHJpY3QsXG4gICAgc3RyaXBIZXhQcmVmaXg6IHN0cmlwSGV4UHJlZml4LFxuICAgIGxlZnRQYWQ6IGxlZnRQYWQsXG4gICAgcmlnaHRQYWQ6IHJpZ2h0UGFkLFxuICAgIHRvVHdvc0NvbXBsZW1lbnQ6IHRvVHdvc0NvbXBsZW1lbnQsXG4gICAgc2hhMzogc2hhMyxcbiAgICBzaGEzUmF3OiBzaGEzUmF3LFxuICAgIHRvTnVtYmVyOiB0b051bWJlclxufTtcbiJdLCJuYW1lcyI6WyJCTiIsInJlcXVpcmUiLCJudW1iZXJUb0JOIiwidXRmOCIsImV0aGVyZXVtanNVdGlsIiwiZXRoZXJldW1CbG9vbUZpbHRlcnMiLCJrZWNjYWsyNTYiLCJpc0JOIiwib2JqZWN0IiwiaXNCaWdOdW1iZXIiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0b0JOIiwibnVtYmVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJlIiwiRXJyb3IiLCJ0b1R3b3NDb21wbGVtZW50IiwidG9Ud29zIiwidG9TdHJpbmciLCJpc0FkZHJlc3MiLCJhZGRyZXNzIiwidGVzdCIsImNoZWNrQWRkcmVzc0NoZWNrc3VtIiwicmVwbGFjZSIsImFkZHJlc3NIYXNoIiwic2hhMyIsInRvTG93ZXJDYXNlIiwiaSIsInBhcnNlSW50IiwidG9VcHBlckNhc2UiLCJsZWZ0UGFkIiwic3RyaW5nIiwiY2hhcnMiLCJzaWduIiwiaGFzUHJlZml4IiwicGFkZGluZyIsImxlbmd0aCIsIkFycmF5Iiwiam9pbiIsInJpZ2h0UGFkIiwidXRmOFRvSGV4Iiwic3RyIiwiZW5jb2RlIiwiaGV4Iiwic3BsaXQiLCJyZXZlcnNlIiwiY29kZSIsImNoYXJDb2RlQXQiLCJuIiwiaGV4VG9VdGY4IiwiaXNIZXhTdHJpY3QiLCJsIiwic2xpY2UiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJkZWNvZGUiLCJoZXhUb051bWJlciIsInZhbHVlIiwiYmlnSW50T25PdmVyZmxvdyIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiQmlnSW50IiwidG9OdW1iZXIiLCJoZXhUb051bWJlclN0cmluZyIsIm51bWJlclRvSGV4IiwidW5kZWZpbmVkIiwiaXNGaW5pdGUiLCJyZXN1bHQiLCJsdCIsImJ5dGVzVG9IZXgiLCJieXRlcyIsInB1c2giLCJoZXhUb0J5dGVzIiwiYyIsInRvSGV4IiwicmV0dXJuVHlwZSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsImluZGV4T2YiLCJpc0hleCIsInN0cmlwSGV4UHJlZml4IiwiaXNCbG9vbSIsImJsb29tIiwiaXNVc2VyRXRoZXJldW1BZGRyZXNzSW5CbG9vbSIsImV0aGVyZXVtQWRkcmVzcyIsImlzQ29udHJhY3RBZGRyZXNzSW5CbG9vbSIsImNvbnRyYWN0QWRkcmVzcyIsImlzVG9waWMiLCJ0b3BpYyIsImlzVG9waWNJbkJsb29tIiwiaXNJbkJsb29tIiwiU0hBM19OVUxMX1MiLCJ0b0J1ZmZlciIsImZyb20iLCJyZXR1cm5WYWx1ZSIsImJ1ZmZlclRvSGV4IiwiX0hhc2giLCJzaGEzUmF3IiwiQk53cmFwcGVkIiwiaW5jbHVkZXMiLCJuZWdhdGl2ZSIsImhleFZhbHVlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJzdGFydHNXaXRoIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/_assert.js":
/*!***********************************************************************!*\
  !*** ./node_modules/web3-utils/node_modules/@noble/hashes/_assert.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== \"boolean\") throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array)) throw new Error(\"Expected Uint8Array\");\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== \"function\" || typeof hash.create !== \"function\") throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (checkFinished && instance.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output\n};\nexports[\"default\"] = assert; //# sourceMappingURL=_assert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy11dGlscy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9fYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdBLGNBQWMsR0FBR0EsWUFBWSxHQUFHQSxhQUFhLEdBQUdBLFlBQVksR0FBR0EsY0FBYyxHQUFHLEtBQUs7QUFDdEcsU0FBU08sT0FBT0MsQ0FBQztJQUNiLElBQUksQ0FBQ0MsT0FBT0MsYUFBYSxDQUFDRixNQUFNQSxJQUFJLEdBQ2hDLE1BQU0sSUFBSUcsTUFBTSxDQUFDLHdCQUF3QixFQUFFSCxFQUFFLENBQUM7QUFDdEQ7QUFDQVIsY0FBYyxHQUFHTztBQUNqQixTQUFTRCxLQUFLTSxDQUFDO0lBQ1gsSUFBSSxPQUFPQSxNQUFNLFdBQ2IsTUFBTSxJQUFJRCxNQUFNLENBQUMsc0JBQXNCLEVBQUVDLEVBQUUsQ0FBQztBQUNwRDtBQUNBWixZQUFZLEdBQUdNO0FBQ2YsU0FBU0QsTUFBTU8sQ0FBQyxFQUFFLEdBQUdDLE9BQU87SUFDeEIsSUFBSSxDQUFFRCxDQUFBQSxhQUFhRSxVQUFTLEdBQ3hCLE1BQU0sSUFBSUgsTUFBTTtJQUNwQixJQUFJRSxRQUFRRSxNQUFNLEdBQUcsS0FBSyxDQUFDRixRQUFRRyxRQUFRLENBQUNKLEVBQUVHLE1BQU0sR0FDaEQsTUFBTSxJQUFJSixNQUFNLENBQUMsOEJBQThCLEVBQUVFLFFBQVEsZ0JBQWdCLEVBQUVELEVBQUVHLE1BQU0sQ0FBQyxDQUFDO0FBQzdGO0FBQ0FmLGFBQWEsR0FBR0s7QUFDaEIsU0FBU0QsS0FBS0EsSUFBSTtJQUNkLElBQUksT0FBT0EsU0FBUyxjQUFjLE9BQU9BLEtBQUthLE1BQU0sS0FBSyxZQUNyRCxNQUFNLElBQUlOLE1BQU07SUFDcEJKLE9BQU9ILEtBQUtjLFNBQVM7SUFDckJYLE9BQU9ILEtBQUtlLFFBQVE7QUFDeEI7QUFDQW5CLFlBQVksR0FBR0k7QUFDZixTQUFTRCxPQUFPaUIsUUFBUSxFQUFFQyxnQkFBZ0IsSUFBSTtJQUMxQyxJQUFJRCxTQUFTRSxTQUFTLEVBQ2xCLE1BQU0sSUFBSVgsTUFBTTtJQUNwQixJQUFJVSxpQkFBaUJELFNBQVNHLFFBQVEsRUFDbEMsTUFBTSxJQUFJWixNQUFNO0FBQ3hCO0FBQ0FYLGNBQWMsR0FBR0c7QUFDakIsU0FBU0QsT0FBT3NCLEdBQUcsRUFBRUosUUFBUTtJQUN6QmYsTUFBTW1CO0lBQ04sTUFBTUMsTUFBTUwsU0FBU0YsU0FBUztJQUM5QixJQUFJTSxJQUFJVCxNQUFNLEdBQUdVLEtBQUs7UUFDbEIsTUFBTSxJQUFJZCxNQUFNLENBQUMsc0RBQXNELEVBQUVjLElBQUksQ0FBQztJQUNsRjtBQUNKO0FBQ0F6QixjQUFjLEdBQUdFO0FBQ2pCLE1BQU13QixTQUFTO0lBQ1huQjtJQUNBRDtJQUNBRDtJQUNBRDtJQUNBRDtJQUNBRDtBQUNKO0FBQ0FGLGtCQUFlLEdBQUcwQixRQUNsQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy93ZWIzLXV0aWxzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL19hc3NlcnQuanM/MTZkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3V0cHV0ID0gZXhwb3J0cy5leGlzdHMgPSBleHBvcnRzLmhhc2ggPSBleHBvcnRzLmJ5dGVzID0gZXhwb3J0cy5ib29sID0gZXhwb3J0cy5udW1iZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBudW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgcG9zaXRpdmUgaW50ZWdlcjogJHtufWApO1xufVxuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuLCBub3QgJHtifWApO1xufVxuZXhwb3J0cy5ib29sID0gYm9vbDtcbmZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIShiIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFVpbnQ4QXJyYXkgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmV4cG9ydHMuYnl0ZXMgPSBieXRlcztcbmZ1bmN0aW9uIGhhc2goaGFzaCkge1xuICAgIGlmICh0eXBlb2YgaGFzaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaGFzaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaGFzaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoYXNoLmJsb2NrTGVuKTtcbn1cbmV4cG9ydHMuaGFzaCA9IGhhc2g7XG5mdW5jdGlvbiBleGlzdHMoaW5zdGFuY2UsIGNoZWNrRmluaXNoZWQgPSB0cnVlKSB7XG4gICAgaWYgKGluc3RhbmNlLmRlc3Ryb3llZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZCcpO1xuICAgIGlmIChjaGVja0ZpbmlzaGVkICYmIGluc3RhbmNlLmZpbmlzaGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2gjZGlnZXN0KCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQnKTtcbn1cbmV4cG9ydHMuZXhpc3RzID0gZXhpc3RzO1xuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cbmV4cG9ydHMub3V0cHV0ID0gb3V0cHV0O1xuY29uc3QgYXNzZXJ0ID0ge1xuICAgIG51bWJlcixcbiAgICBib29sLFxuICAgIGJ5dGVzLFxuICAgIGhhc2gsXG4gICAgZXhpc3RzLFxuICAgIG91dHB1dCxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm91dHB1dCIsImV4aXN0cyIsImhhc2giLCJieXRlcyIsImJvb2wiLCJudW1iZXIiLCJuIiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsIkVycm9yIiwiYiIsImxlbmd0aHMiLCJVaW50OEFycmF5IiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJjcmVhdGUiLCJvdXRwdXRMZW4iLCJibG9ja0xlbiIsImluc3RhbmNlIiwiY2hlY2tGaW5pc2hlZCIsImRlc3Ryb3llZCIsImZpbmlzaGVkIiwib3V0IiwibWluIiwiYXNzZXJ0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/_u64.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-utils/node_modules/@noble/hashes/_u64.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le) return {\n        h: Number(n & U32_MASK64),\n        l: Number(n >> _32n & U32_MASK64)\n    };\n    return {\n        h: Number(n >> _32n & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0\n    };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for(let i = 0; i < lst.length; i++){\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [\n            h,\n            l\n        ];\n    }\n    return [\n        Ah,\n        Al\n    ];\n}\nexports.split = split;\nconst toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s)=>h >>> s;\nconst shrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s)=>h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l)=>l;\nconst rotr32L = (h, l)=>h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s)=>h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s)=>l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return {\n        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n        l: l | 0\n    };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig,\n    split,\n    toBig: exports.toBig,\n    shrSH,\n    shrSL,\n    rotrSH,\n    rotrSL,\n    rotrBH,\n    rotrBL,\n    rotr32H,\n    rotr32L,\n    rotlSH,\n    rotlSL,\n    rotlBH,\n    rotlBL,\n    add,\n    add3L,\n    add3H,\n    add4L,\n    add4H,\n    add5H,\n    add5L\n};\nexports[\"default\"] = u64; //# sourceMappingURL=_u64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/_u64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/cryptoNode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/web3-utils/node_modules/@noble/hashes/cryptoNode.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.crypto = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\nconst nc = __webpack_require__(/*! node:crypto */ \"node:crypto\");\nexports.crypto = nc && typeof nc === \"object\" && \"webcrypto\" in nc ? nc.webcrypto : undefined; //# sourceMappingURL=cryptoNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy11dGlscy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9jcnlwdG9Ob2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixvRkFBb0Y7QUFDcEYsNEJBQTRCO0FBQzVCLGlEQUFpRDtBQUNqRCxhQUFhO0FBQ2IsTUFBTUcsS0FBS0MsbUJBQU9BLENBQUMsZ0NBQWE7QUFDaENKLGNBQWMsR0FBR0csTUFBTSxPQUFPQSxPQUFPLFlBQVksZUFBZUEsS0FBS0EsR0FBR0UsU0FBUyxHQUFHQyxXQUNwRixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy93ZWIzLXV0aWxzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2NyeXB0b05vZGUuanM/MGZiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3J5cHRvID0gdm9pZCAwO1xuLy8gV2UgdXNlIFdlYkNyeXB0byBha2EgZ2xvYmFsVGhpcy5jcnlwdG8sIHdoaWNoIGV4aXN0cyBpbiBicm93c2VycyBhbmQgbm9kZS5qcyAxNisuXG4vLyBTZWUgdXRpbHMudHMgZm9yIGRldGFpbHMuXG4vLyBUaGUgZmlsZSB3aWxsIHRocm93IG9uIG5vZGUuanMgMTQgYW5kIGVhcmxpZXIuXG4vLyBAdHMtaWdub3JlXG5jb25zdCBuYyA9IHJlcXVpcmUoXCJub2RlOmNyeXB0b1wiKTtcbmV4cG9ydHMuY3J5cHRvID0gbmMgJiYgdHlwZW9mIG5jID09PSAnb2JqZWN0JyAmJiAnd2ViY3J5cHRvJyBpbiBuYyA/IG5jLndlYmNyeXB0byA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b05vZGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3J5cHRvIiwibmMiLCJyZXF1aXJlIiwid2ViY3J5cHRvIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/sha3.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-utils/node_modules/@noble/hashes/sha3.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/_assert.js\");\nconst _u64_js_1 = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/_u64.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [\n    [],\n    [],\n    []\n];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){\n    // Pi\n    [x, y] = [\n        y,\n        (2 * x + 3 * y) % 5\n    ];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n    // Iota\n    let t = _0n;\n    for(let j = 0; j < 7; j++){\n        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n        if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s)=>s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s)=>s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for(let round = 24 - rounds; round < 24; round++){\n        // Theta θ\n        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for(let x = 0; x < 10; x += 2){\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for(let y = 0; y < 50; y += 10){\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for(let t = 0; t < 24; t++){\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for(let y = 0; y < 50; y += 10){\n            for(let x = 0; x < 10; x++)B[x] = s[y + x];\n            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error(\"Sha3 supports only keccak-f1600 function\");\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen) this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for(let pos = 0, len = out.length; pos < len;){\n            if (this.posOut >= blockLen) this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF) throw new Error(\"XOF is not possible for this instance\");\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished) throw new Error(\"digest() was already called\");\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapConstructor)(()=>new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */ exports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */ exports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {})=>new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8); //# sourceMappingURL=sha3.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/web3-utils/node_modules/@noble/hashes/utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nconst crypto_1 = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/cryptoNode.js\");\nconst u8a = (a)=>a instanceof Uint8Array;\n// Cast array to different type\nconst u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift)=>word << 32 - shift | word >>> shift;\nexports.rotr = rotr;\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexports.isLE = new Uint8Array(new Uint32Array([\n    0x11223344\n]).buffer)[0] === 0x44;\nif (!exports.isLE) throw new Error(\"Non little-endian hardware is not supported\");\nconst hexes = Array.from({\n    length: 256\n}, (v, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    if (!u8a(bytes)) throw new Error(\"Uint8Array expected\");\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    const len = hex.length;\n    if (len % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + len);\n    const array = new Uint8Array(len / 2);\n    for(let i = 0; i < array.length; i++){\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0) throw new Error(\"Invalid byte sequence\");\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async ()=>{};\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for(let i = 0; i < iters; i++){\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick) continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */ function toBytes(data) {\n    if (typeof data === \"string\") data = utf8ToBytes(data);\n    if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Copies several Uint8Arrays into one.\n */ function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a)=>sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a)=>{\n        if (!u8a(a)) throw new Error(\"Uint8Array expected\");\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj)=>Object.prototype.toString.call(obj) === \"[object Object]\" && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== \"object\" || !isPlainObject(opts))) throw new Error(\"Options should be object or undefined\");\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = ()=>hashCons();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */ function randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === \"function\") {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error(\"crypto.getRandomValues must be defined\");\n}\nexports.randomBytes = randomBytes; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/node_modules/ethereum-cryptography/keccak.js":
/*!******************************************************************************!*\
  !*** ./node_modules/web3-utils/node_modules/ethereum-cryptography/keccak.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.keccak512 = exports.keccak384 = exports.keccak256 = exports.keccak224 = void 0;\nconst sha3_1 = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/sha3.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-utils/node_modules/ethereum-cryptography/utils.js\");\nexports.keccak224 = (0, utils_js_1.wrapHash)(sha3_1.keccak_224);\nexports.keccak256 = (()=>{\n    const k = (0, utils_js_1.wrapHash)(sha3_1.keccak_256);\n    k.create = sha3_1.keccak_256.create;\n    return k;\n})();\nexports.keccak384 = (0, utils_js_1.wrapHash)(sha3_1.keccak_384);\nexports.keccak512 = (0, utils_js_1.wrapHash)(sha3_1.keccak_512);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy11dGlscy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2Nhay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLGlCQUFpQixHQUFHQSxpQkFBaUIsR0FBR0EsaUJBQWlCLEdBQUcsS0FBSztBQUNyRixNQUFNTSxTQUFTQyxtQkFBT0EsQ0FBQyw4RkFBb0I7QUFDM0MsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsK0ZBQVk7QUFDdkNQLGlCQUFpQixHQUFHLENBQUMsR0FBR1EsV0FBV0MsUUFBUSxFQUFFSCxPQUFPSSxVQUFVO0FBQzlEVixpQkFBaUIsR0FBRyxDQUFDO0lBQ2pCLE1BQU1XLElBQUksQ0FBQyxHQUFHSCxXQUFXQyxRQUFRLEVBQUVILE9BQU9NLFVBQVU7SUFDcERELEVBQUVFLE1BQU0sR0FBR1AsT0FBT00sVUFBVSxDQUFDQyxNQUFNO0lBQ25DLE9BQU9GO0FBQ1g7QUFDQVgsaUJBQWlCLEdBQUcsQ0FBQyxHQUFHUSxXQUFXQyxRQUFRLEVBQUVILE9BQU9RLFVBQVU7QUFDOURkLGlCQUFpQixHQUFHLENBQUMsR0FBR1EsV0FBV0MsUUFBUSxFQUFFSCxPQUFPUyxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvd2ViMy11dGlscy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2Nhay5qcz82NzA0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5rZWNjYWs1MTIgPSBleHBvcnRzLmtlY2NhazM4NCA9IGV4cG9ydHMua2VjY2FrMjU2ID0gZXhwb3J0cy5rZWNjYWsyMjQgPSB2b2lkIDA7XG5jb25zdCBzaGEzXzEgPSByZXF1aXJlKFwiQG5vYmxlL2hhc2hlcy9zaGEzXCIpO1xuY29uc3QgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuZXhwb3J0cy5rZWNjYWsyMjQgPSAoMCwgdXRpbHNfanNfMS53cmFwSGFzaCkoc2hhM18xLmtlY2Nha18yMjQpO1xuZXhwb3J0cy5rZWNjYWsyNTYgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGsgPSAoMCwgdXRpbHNfanNfMS53cmFwSGFzaCkoc2hhM18xLmtlY2Nha18yNTYpO1xuICAgIGsuY3JlYXRlID0gc2hhM18xLmtlY2Nha18yNTYuY3JlYXRlO1xuICAgIHJldHVybiBrO1xufSkoKTtcbmV4cG9ydHMua2VjY2FrMzg0ID0gKDAsIHV0aWxzX2pzXzEud3JhcEhhc2gpKHNoYTNfMS5rZWNjYWtfMzg0KTtcbmV4cG9ydHMua2VjY2FrNTEyID0gKDAsIHV0aWxzX2pzXzEud3JhcEhhc2gpKHNoYTNfMS5rZWNjYWtfNTEyKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImtlY2NhazUxMiIsImtlY2NhazM4NCIsImtlY2NhazI1NiIsImtlY2NhazIyNCIsInNoYTNfMSIsInJlcXVpcmUiLCJ1dGlsc19qc18xIiwid3JhcEhhc2giLCJrZWNjYWtfMjI0IiwiayIsImtlY2Nha18yNTYiLCJjcmVhdGUiLCJrZWNjYWtfMzg0Iiwia2VjY2FrXzUxMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/node_modules/ethereum-cryptography/keccak.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-utils/node_modules/ethereum-cryptography/utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/web3-utils/node_modules/ethereum-cryptography/utils.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.crypto = exports.wrapHash = exports.equalsBytes = exports.hexToBytes = exports.bytesToUtf8 = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;\nconst _assert_1 = __importDefault(__webpack_require__(/*! @noble/hashes/_assert */ \"(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/_assert.js\"));\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/utils.js\");\nconst assertBool = _assert_1.default.bool;\nexports.assertBool = assertBool;\nconst assertBytes = _assert_1.default.bytes;\nexports.assertBytes = assertBytes;\nvar utils_2 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/web3-utils/node_modules/@noble/hashes/utils.js\");\nObject.defineProperty(exports, \"bytesToHex\", ({\n    enumerable: true,\n    get: function() {\n        return utils_2.bytesToHex;\n    }\n}));\nObject.defineProperty(exports, \"toHex\", ({\n    enumerable: true,\n    get: function() {\n        return utils_2.bytesToHex;\n    }\n}));\nObject.defineProperty(exports, \"concatBytes\", ({\n    enumerable: true,\n    get: function() {\n        return utils_2.concatBytes;\n    }\n}));\nObject.defineProperty(exports, \"createView\", ({\n    enumerable: true,\n    get: function() {\n        return utils_2.createView;\n    }\n}));\nObject.defineProperty(exports, \"utf8ToBytes\", ({\n    enumerable: true,\n    get: function() {\n        return utils_2.utf8ToBytes;\n    }\n}));\n// buf.toString('utf8') -> bytesToUtf8(buf)\nfunction bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nexports.bytesToUtf8 = bytesToUtf8;\nfunction hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return (0, utils_1.hexToBytes)(sliced);\n}\nexports.hexToBytes = hexToBytes;\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nfunction equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for(let i = 0; i < a.length; i++){\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equalsBytes = equalsBytes;\n// Internal utils\nfunction wrapHash(hash) {\n    return (msg)=>{\n        _assert_1.default.bytes(msg);\n        return hash(msg);\n    };\n}\nexports.wrapHash = wrapHash;\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nexports.crypto = (()=>{\n    const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n    const nodeRequire =  true && typeof module.require === \"function\" && module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy11dGlscy9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHQSxnQkFBZ0IsR0FBR0EsbUJBQW1CLEdBQUdBLGtCQUFrQixHQUFHQSxtQkFBbUIsR0FBR0EsbUJBQW1CLEdBQUdBLGtCQUFrQixHQUFHQSxtQkFBbUIsR0FBR0EsYUFBYSxHQUFHQSxrQkFBa0IsR0FBR0EsbUJBQW1CLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDM1AsTUFBTWMsWUFBWW5CLGdCQUFnQm9CLG1CQUFPQSxDQUFDLG9HQUF1QjtBQUNqRSxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyxnR0FBcUI7QUFDN0MsTUFBTUYsYUFBYUMsVUFBVUcsT0FBTyxDQUFDQyxJQUFJO0FBQ3pDbEIsa0JBQWtCLEdBQUdhO0FBQ3JCLE1BQU1ELGNBQWNFLFVBQVVHLE9BQU8sQ0FBQ0UsS0FBSztBQUMzQ25CLG1CQUFtQixHQUFHWTtBQUN0QixJQUFJUSxVQUFVTCxtQkFBT0EsQ0FBQyxnR0FBcUI7QUFDM0NqQiw4Q0FBNkM7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLFFBQVFULFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNuSGIseUNBQXdDO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixRQUFRVCxVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUdiLCtDQUE4QztJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsUUFBUVgsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JIWCw4Q0FBNkM7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLFFBQVFaLFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNuSFYsK0NBQThDO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixRQUFRYixXQUFXO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDckgsMkNBQTJDO0FBQzNDLFNBQVNELFlBQVlpQixJQUFJO0lBQ3JCLElBQUksQ0FBRUEsQ0FBQUEsZ0JBQWdCQyxVQUFTLEdBQUk7UUFDL0IsTUFBTSxJQUFJQyxVQUFVLENBQUMscUNBQXFDLEVBQUUsT0FBT0YsS0FBSyxDQUFDO0lBQzdFO0lBQ0EsT0FBTyxJQUFJRyxjQUFjQyxNQUFNLENBQUNKO0FBQ3BDO0FBQ0F2QixtQkFBbUIsR0FBR007QUFDdEIsU0FBU0QsV0FBV2tCLElBQUk7SUFDcEIsTUFBTUssU0FBU0wsS0FBS00sVUFBVSxDQUFDLFFBQVFOLEtBQUtPLFNBQVMsQ0FBQyxLQUFLUDtJQUMzRCxPQUFPLENBQUMsR0FBR1AsUUFBUVgsVUFBVSxFQUFFdUI7QUFDbkM7QUFDQTVCLGtCQUFrQixHQUFHSztBQUNyQiw2Q0FBNkM7QUFDN0MsU0FBU0QsWUFBWTJCLENBQUMsRUFBRUMsQ0FBQztJQUNyQixJQUFJRCxFQUFFRSxNQUFNLEtBQUtELEVBQUVDLE1BQU0sRUFBRTtRQUN2QixPQUFPO0lBQ1g7SUFDQSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsRUFBRUUsTUFBTSxFQUFFQyxJQUFLO1FBQy9CLElBQUlILENBQUMsQ0FBQ0csRUFBRSxLQUFLRixDQUFDLENBQUNFLEVBQUUsRUFBRTtZQUNmLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ0FsQyxtQkFBbUIsR0FBR0k7QUFDdEIsaUJBQWlCO0FBQ2pCLFNBQVNELFNBQVNnQyxJQUFJO0lBQ2xCLE9BQU8sQ0FBQ0M7UUFDSnRCLFVBQVVHLE9BQU8sQ0FBQ0UsS0FBSyxDQUFDaUI7UUFDeEIsT0FBT0QsS0FBS0M7SUFDaEI7QUFDSjtBQUNBcEMsZ0JBQWdCLEdBQUdHO0FBQ25CLDRFQUE0RTtBQUM1RUgsY0FBYyxHQUFHLENBQUM7SUFDZCxNQUFNcUMsWUFBWSxPQUFPQyxlQUFlLFlBQVksWUFBWUEsYUFBYUEsV0FBV3BDLE1BQU0sR0FBR3FDO0lBQ2pHLE1BQU1DLGNBQWMsS0FBNkIsSUFDN0MsT0FBT0MsT0FBTzFCLE9BQU8sS0FBSyxjQUMxQjBCLE9BQU8xQixPQUFPLENBQUMyQixJQUFJLENBQUNEO0lBQ3hCLE9BQU87UUFDSEUsTUFBTUgsZUFBZSxDQUFDSCxZQUFZRyxZQUFZLFlBQVlEO1FBQzFESyxLQUFLUDtJQUNUO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy93ZWIzLXV0aWxzL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvdXRpbHMuanM/NGJjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3J5cHRvID0gZXhwb3J0cy53cmFwSGFzaCA9IGV4cG9ydHMuZXF1YWxzQnl0ZXMgPSBleHBvcnRzLmhleFRvQnl0ZXMgPSBleHBvcnRzLmJ5dGVzVG9VdGY4ID0gZXhwb3J0cy51dGY4VG9CeXRlcyA9IGV4cG9ydHMuY3JlYXRlVmlldyA9IGV4cG9ydHMuY29uY2F0Qnl0ZXMgPSBleHBvcnRzLnRvSGV4ID0gZXhwb3J0cy5ieXRlc1RvSGV4ID0gZXhwb3J0cy5hc3NlcnRCeXRlcyA9IGV4cG9ydHMuYXNzZXJ0Qm9vbCA9IHZvaWQgMDtcbmNvbnN0IF9hc3NlcnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiQG5vYmxlL2hhc2hlcy9fYXNzZXJ0XCIpKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG5vYmxlL2hhc2hlcy91dGlsc1wiKTtcbmNvbnN0IGFzc2VydEJvb2wgPSBfYXNzZXJ0XzEuZGVmYXVsdC5ib29sO1xuZXhwb3J0cy5hc3NlcnRCb29sID0gYXNzZXJ0Qm9vbDtcbmNvbnN0IGFzc2VydEJ5dGVzID0gX2Fzc2VydF8xLmRlZmF1bHQuYnl0ZXM7XG5leHBvcnRzLmFzc2VydEJ5dGVzID0gYXNzZXJ0Qnl0ZXM7XG52YXIgdXRpbHNfMiA9IHJlcXVpcmUoXCJAbm9ibGUvaGFzaGVzL3V0aWxzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnl0ZXNUb0hleFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMi5ieXRlc1RvSGV4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9IZXhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzIuYnl0ZXNUb0hleDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbmNhdEJ5dGVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18yLmNvbmNhdEJ5dGVzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlVmlld1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMi5jcmVhdGVWaWV3OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXRmOFRvQnl0ZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzIudXRmOFRvQnl0ZXM7IH0gfSk7XG4vLyBidWYudG9TdHJpbmcoJ3V0ZjgnKSAtPiBieXRlc1RvVXRmOChidWYpXG5mdW5jdGlvbiBieXRlc1RvVXRmOChkYXRhKSB7XG4gICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGJ5dGVzVG9VdGY4IGV4cGVjdGVkIFVpbnQ4QXJyYXksIGdvdCAke3R5cGVvZiBkYXRhfWApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGRhdGEpO1xufVxuZXhwb3J0cy5ieXRlc1RvVXRmOCA9IGJ5dGVzVG9VdGY4O1xuZnVuY3Rpb24gaGV4VG9CeXRlcyhkYXRhKSB7XG4gICAgY29uc3Qgc2xpY2VkID0gZGF0YS5zdGFydHNXaXRoKFwiMHhcIikgPyBkYXRhLnN1YnN0cmluZygyKSA6IGRhdGE7XG4gICAgcmV0dXJuICgwLCB1dGlsc18xLmhleFRvQnl0ZXMpKHNsaWNlZCk7XG59XG5leHBvcnRzLmhleFRvQnl0ZXMgPSBoZXhUb0J5dGVzO1xuLy8gYnVmLmVxdWFscyhidWYyKSAtPiBlcXVhbHNCeXRlcyhidWYsIGJ1ZjIpXG5mdW5jdGlvbiBlcXVhbHNCeXRlcyhhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5lcXVhbHNCeXRlcyA9IGVxdWFsc0J5dGVzO1xuLy8gSW50ZXJuYWwgdXRpbHNcbmZ1bmN0aW9uIHdyYXBIYXNoKGhhc2gpIHtcbiAgICByZXR1cm4gKG1zZykgPT4ge1xuICAgICAgICBfYXNzZXJ0XzEuZGVmYXVsdC5ieXRlcyhtc2cpO1xuICAgICAgICByZXR1cm4gaGFzaChtc2cpO1xuICAgIH07XG59XG5leHBvcnRzLndyYXBIYXNoID0gd3JhcEhhc2g7XG4vLyBUT0RPKHYzKTogc3dpdGNoIGF3YXkgZnJvbSBub2RlIGNyeXB0bywgcmVtb3ZlIHRoaXMgdW5uZWNlc3NhcnkgdmFyaWFibGUuXG5leHBvcnRzLmNyeXB0byA9ICgoKSA9PiB7XG4gICAgY29uc3Qgd2ViQ3J5cHRvID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIgJiYgXCJjcnlwdG9cIiBpbiBnbG9iYWxUaGlzID8gZ2xvYmFsVGhpcy5jcnlwdG8gOiB1bmRlZmluZWQ7XG4gICAgY29uc3Qgbm9kZVJlcXVpcmUgPSB0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBtb2R1bGUucmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIG1vZHVsZS5yZXF1aXJlLmJpbmQobW9kdWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBub2RlOiBub2RlUmVxdWlyZSAmJiAhd2ViQ3J5cHRvID8gbm9kZVJlcXVpcmUoXCJjcnlwdG9cIikgOiB1bmRlZmluZWQsXG4gICAgICAgIHdlYjogd2ViQ3J5cHRvXG4gICAgfTtcbn0pKCk7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3J5cHRvIiwid3JhcEhhc2giLCJlcXVhbHNCeXRlcyIsImhleFRvQnl0ZXMiLCJieXRlc1RvVXRmOCIsInV0ZjhUb0J5dGVzIiwiY3JlYXRlVmlldyIsImNvbmNhdEJ5dGVzIiwidG9IZXgiLCJieXRlc1RvSGV4IiwiYXNzZXJ0Qnl0ZXMiLCJhc3NlcnRCb29sIiwiX2Fzc2VydF8xIiwicmVxdWlyZSIsInV0aWxzXzEiLCJkZWZhdWx0IiwiYm9vbCIsImJ5dGVzIiwidXRpbHNfMiIsImVudW1lcmFibGUiLCJnZXQiLCJkYXRhIiwiVWludDhBcnJheSIsIlR5cGVFcnJvciIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwic2xpY2VkIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImEiLCJiIiwibGVuZ3RoIiwiaSIsImhhc2giLCJtc2ciLCJ3ZWJDcnlwdG8iLCJnbG9iYWxUaGlzIiwidW5kZWZpbmVkIiwibm9kZVJlcXVpcmUiLCJtb2R1bGUiLCJiaW5kIiwibm9kZSIsIndlYiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-utils/node_modules/ethereum-cryptography/utils.js\n");

/***/ })

};
;
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cids";
exports.ids = ["vendor-chunks/cids"];
exports.modules = {

/***/ "(ssr)/./node_modules/cids/src/cid-util.js":
/*!*******************************************!*\
  !*** ./node_modules/cids/src/cid-util.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst mh = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\");\nconst CIDUtil = {\n    /**\n   * Test if the given input is a valid CID object.\n   * Returns an error message if it is not.\n   * Returns undefined if it is a valid CID.\n   *\n   * @param {any} other\n   * @returns {string|undefined}\n   */ checkCIDComponents: function(other) {\n        if (other == null) {\n            return \"null values are not valid CIDs\";\n        }\n        if (!(other.version === 0 || other.version === 1)) {\n            return \"Invalid version, must be a number equal to 1 or 0\";\n        }\n        if (typeof other.codec !== \"string\") {\n            return \"codec must be string\";\n        }\n        if (other.version === 0) {\n            if (other.codec !== \"dag-pb\") {\n                return \"codec must be 'dag-pb' for CIDv0\";\n            }\n            if (other.multibaseName !== \"base58btc\") {\n                return \"multibaseName must be 'base58btc' for CIDv0\";\n            }\n        }\n        if (!(other.multihash instanceof Uint8Array)) {\n            return \"multihash must be a Uint8Array\";\n        }\n        try {\n            mh.validate(other.multihash);\n        } catch (err) {\n            let errorMsg = err.message;\n            if (!errorMsg) {\n                errorMsg = \"Multihash validation failed\";\n            }\n            return errorMsg;\n        }\n    }\n};\nmodule.exports = CIDUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9zcmMvY2lkLXV0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUVuQixNQUFNQyxVQUFVO0lBQ2Q7Ozs7Ozs7R0FPQyxHQUNEQyxvQkFBb0IsU0FBVUMsS0FBSztRQUNqQyxJQUFJQSxTQUFTLE1BQU07WUFDakIsT0FBTztRQUNUO1FBRUEsSUFBSSxDQUFFQSxDQUFBQSxNQUFNQyxPQUFPLEtBQUssS0FBS0QsTUFBTUMsT0FBTyxLQUFLLElBQUk7WUFDakQsT0FBTztRQUNUO1FBRUEsSUFBSSxPQUFPRCxNQUFNRSxLQUFLLEtBQUssVUFBVTtZQUNuQyxPQUFPO1FBQ1Q7UUFFQSxJQUFJRixNQUFNQyxPQUFPLEtBQUssR0FBRztZQUN2QixJQUFJRCxNQUFNRSxLQUFLLEtBQUssVUFBVTtnQkFDNUIsT0FBTztZQUNUO1lBQ0EsSUFBSUYsTUFBTUcsYUFBYSxLQUFLLGFBQWE7Z0JBQ3ZDLE9BQU87WUFDVDtRQUNGO1FBRUEsSUFBSSxDQUFFSCxDQUFBQSxNQUFNSSxTQUFTLFlBQVlDLFVBQVMsR0FBSTtZQUM1QyxPQUFPO1FBQ1Q7UUFFQSxJQUFJO1lBQ0ZULEdBQUdVLFFBQVEsQ0FBQ04sTUFBTUksU0FBUztRQUM3QixFQUFFLE9BQU9HLEtBQUs7WUFDWixJQUFJQyxXQUFXRCxJQUFJRSxPQUFPO1lBQzFCLElBQUksQ0FBQ0QsVUFBVTtnQkFDYkEsV0FBVztZQUNiO1lBQ0EsT0FBT0E7UUFDVDtJQUNGO0FBQ0Y7QUFFQUUsT0FBT0MsT0FBTyxHQUFHYiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL2NpZHMvc3JjL2NpZC11dGlsLmpzP2U2YjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IG1oID0gcmVxdWlyZSgnbXVsdGloYXNoZXMnKVxuXG5jb25zdCBDSURVdGlsID0ge1xuICAvKipcbiAgICogVGVzdCBpZiB0aGUgZ2l2ZW4gaW5wdXQgaXMgYSB2YWxpZCBDSUQgb2JqZWN0LlxuICAgKiBSZXR1cm5zIGFuIGVycm9yIG1lc3NhZ2UgaWYgaXQgaXMgbm90LlxuICAgKiBSZXR1cm5zIHVuZGVmaW5lZCBpZiBpdCBpcyBhIHZhbGlkIENJRC5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IG90aGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgKi9cbiAgY2hlY2tDSURDb21wb25lbnRzOiBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICBpZiAob3RoZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdudWxsIHZhbHVlcyBhcmUgbm90IHZhbGlkIENJRHMnXG4gICAgfVxuXG4gICAgaWYgKCEob3RoZXIudmVyc2lvbiA9PT0gMCB8fCBvdGhlci52ZXJzaW9uID09PSAxKSkge1xuICAgICAgcmV0dXJuICdJbnZhbGlkIHZlcnNpb24sIG11c3QgYmUgYSBudW1iZXIgZXF1YWwgdG8gMSBvciAwJ1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3RoZXIuY29kZWMgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gJ2NvZGVjIG11c3QgYmUgc3RyaW5nJ1xuICAgIH1cblxuICAgIGlmIChvdGhlci52ZXJzaW9uID09PSAwKSB7XG4gICAgICBpZiAob3RoZXIuY29kZWMgIT09ICdkYWctcGInKSB7XG4gICAgICAgIHJldHVybiBcImNvZGVjIG11c3QgYmUgJ2RhZy1wYicgZm9yIENJRHYwXCJcbiAgICAgIH1cbiAgICAgIGlmIChvdGhlci5tdWx0aWJhc2VOYW1lICE9PSAnYmFzZTU4YnRjJykge1xuICAgICAgICByZXR1cm4gXCJtdWx0aWJhc2VOYW1lIG11c3QgYmUgJ2Jhc2U1OGJ0YycgZm9yIENJRHYwXCJcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIShvdGhlci5tdWx0aWhhc2ggaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgcmV0dXJuICdtdWx0aWhhc2ggbXVzdCBiZSBhIFVpbnQ4QXJyYXknXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIG1oLnZhbGlkYXRlKG90aGVyLm11bHRpaGFzaClcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxldCBlcnJvck1zZyA9IGVyci5tZXNzYWdlXG4gICAgICBpZiAoIWVycm9yTXNnKSB7IC8vIEp1c3QgaW4gY2FzZSBtaC52YWxpZGF0ZSgpIHRocm93cyBhbiBlcnJvciB3aXRoIGVtcHR5IGVycm9yIG1lc3NhZ2VcbiAgICAgICAgZXJyb3JNc2cgPSAnTXVsdGloYXNoIHZhbGlkYXRpb24gZmFpbGVkJ1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVycm9yTXNnXG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ0lEVXRpbFxuIl0sIm5hbWVzIjpbIm1oIiwicmVxdWlyZSIsIkNJRFV0aWwiLCJjaGVja0NJRENvbXBvbmVudHMiLCJvdGhlciIsInZlcnNpb24iLCJjb2RlYyIsIm11bHRpYmFzZU5hbWUiLCJtdWx0aWhhc2giLCJVaW50OEFycmF5IiwidmFsaWRhdGUiLCJlcnIiLCJlcnJvck1zZyIsIm1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/src/cid-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/src/index.js":
/*!****************************************!*\
  !*** ./node_modules/cids/src/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst mh = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\");\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\");\nconst multicodec = __webpack_require__(/*! multicodec */ \"(ssr)/./node_modules/multicodec/src/index.js\");\nconst CIDUtil = __webpack_require__(/*! ./cid-util */ \"(ssr)/./node_modules/cids/src/cid-util.js\");\nconst { concat: uint8ArrayConcat } = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/cjs/src/concat.js\");\nconst { toString: uint8ArrayToString } = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/cjs/src/to-string.js\");\nconst { equals: uint8ArrayEquals } = __webpack_require__(/*! uint8arrays/equals */ \"(ssr)/./node_modules/uint8arrays/cjs/src/equals.js\");\nconst codecs = multicodec.nameToCode;\nconst codecInts = /** @type {CodecName[]} */ Object.keys(codecs).reduce((p, name)=>{\n    p[codecs[name]] = name;\n    return p;\n}, /** @type {Record<CodecCode, CodecName>} */ {});\nconst symbol = Symbol.for(\"@ipld/js-cid/CID\");\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */ /**\n * @typedef {0|1} CIDVersion\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('multicodec').CodecCode} CodecCode\n */ /**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */ class CID {\n    /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */ constructor(version, codec, multihash, multibaseName){\n        // We have below three blank field accessors only because\n        // otherwise TS will not pick them up if done after assignemnts\n        /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */ // eslint-disable-next-line no-unused-expressions\n        this.version;\n        /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */ // eslint-disable-next-line no-unused-expressions\n        this.codec;\n        /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */ // eslint-disable-next-line no-unused-expressions\n        this.multihash;\n        Object.defineProperty(this, symbol, {\n            value: true\n        });\n        if (CID.isCID(version)) {\n            // version is an exising CID instance\n            const cid = /** @type {CID} */ version;\n            this.version = cid.version;\n            this.codec = cid.codec;\n            this.multihash = cid.multihash;\n            // Default guard for when a CID < 0.7 is passed with no multibaseName\n            // @ts-ignore\n            this.multibaseName = cid.multibaseName || (cid.version === 0 ? \"base58btc\" : \"base32\");\n            return;\n        }\n        if (typeof version === \"string\") {\n            // e.g. 'base32' or false\n            const baseName = multibase.isEncoded(version);\n            if (baseName) {\n                // version is a CID String encoded with multibase, so v1\n                const cid = multibase.decode(version);\n                this.version = /** @type {CIDVersion} */ parseInt(cid[0].toString(), 16);\n                this.codec = multicodec.getCodec(cid.slice(1));\n                this.multihash = multicodec.rmPrefix(cid.slice(1));\n                this.multibaseName = baseName;\n            } else {\n                // version is a base58btc string multihash, so v0\n                this.version = 0;\n                this.codec = \"dag-pb\";\n                this.multihash = mh.fromB58String(version);\n                this.multibaseName = \"base58btc\";\n            }\n            CID.validateCID(this);\n            Object.defineProperty(this, \"string\", {\n                value: version\n            });\n            return;\n        }\n        if (version instanceof Uint8Array) {\n            const v = parseInt(version[0].toString(), 16);\n            if (v === 1) {\n                // version is a CID Uint8Array\n                const cid = version;\n                this.version = v;\n                this.codec = multicodec.getCodec(cid.slice(1));\n                this.multihash = multicodec.rmPrefix(cid.slice(1));\n                this.multibaseName = \"base32\";\n            } else {\n                // version is a raw multihash Uint8Array, so v0\n                this.version = 0;\n                this.codec = \"dag-pb\";\n                this.multihash = version;\n                this.multibaseName = \"base58btc\";\n            }\n            CID.validateCID(this);\n            return;\n        }\n        // otherwise, assemble the CID from the parameters\n        this.version = version;\n        if (typeof codec === \"number\") {\n            // @ts-ignore\n            codec = codecInts[codec];\n        }\n        this.codec = /** @type {CodecName} */ codec;\n        this.multihash = /** @type {Uint8Array} */ multihash;\n        /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */ this.multibaseName = multibaseName || (version === 0 ? \"base58btc\" : \"base32\");\n        CID.validateCID(this);\n    }\n    /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */ get bytes() {\n        // @ts-ignore\n        let bytes = this._bytes;\n        if (!bytes) {\n            if (this.version === 0) {\n                bytes = this.multihash;\n            } else if (this.version === 1) {\n                const codec = multicodec.getCodeVarint(this.codec);\n                bytes = uint8ArrayConcat([\n                    [\n                        1\n                    ],\n                    codec,\n                    this.multihash\n                ], 1 + codec.byteLength + this.multihash.byteLength);\n            } else {\n                throw new Error(\"unsupported version\");\n            }\n            // Cache this Uint8Array so it doesn't have to be recreated\n            Object.defineProperty(this, \"_bytes\", {\n                value: bytes\n            });\n        }\n        return bytes;\n    }\n    /**\n   * The prefix of the CID.\n   *\n   * @returns {Uint8Array}\n   */ get prefix() {\n        const codec = multicodec.getCodeVarint(this.codec);\n        const multihash = mh.prefix(this.multihash);\n        const prefix = uint8ArrayConcat([\n            [\n                this.version\n            ],\n            codec,\n            multihash\n        ], 1 + codec.byteLength + multihash.byteLength);\n        return prefix;\n    }\n    /**\n   * The codec of the CID in its number form.\n   *\n   * @returns {CodecCode}\n   */ get code() {\n        return codecs[this.codec];\n    }\n    /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */ toV0() {\n        if (this.codec !== \"dag-pb\") {\n            throw new Error(\"Cannot convert a non dag-pb CID to CIDv0\");\n        }\n        const { name, length } = mh.decode(this.multihash);\n        if (name !== \"sha2-256\") {\n            throw new Error(\"Cannot convert non sha2-256 multihash CID to CIDv0\");\n        }\n        if (length !== 32) {\n            throw new Error(\"Cannot convert non 32 byte multihash CID to CIDv0\");\n        }\n        return new CID(0, this.codec, this.multihash);\n    }\n    /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */ toV1() {\n        return new CID(1, this.codec, this.multihash, this.multibaseName);\n    }\n    /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */ toBaseEncodedString(base = this.multibaseName) {\n        // @ts-ignore non enumerable cache property\n        if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n            // @ts-ignore non enumerable cache property\n            return this.string;\n        }\n        let str;\n        if (this.version === 0) {\n            if (base !== \"base58btc\") {\n                throw new Error(\"not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()\");\n            }\n            str = mh.toB58String(this.multihash);\n        } else if (this.version === 1) {\n            str = uint8ArrayToString(multibase.encode(base, this.bytes));\n        } else {\n            throw new Error(\"unsupported version\");\n        }\n        if (base === this.multibaseName) {\n            // cache the string value\n            Object.defineProperty(this, \"string\", {\n                value: str\n            });\n        }\n        return str;\n    }\n    /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {string}\n   */ [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return \"CID(\" + this.toString() + \")\";\n    }\n    /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */ toString(base) {\n        return this.toBaseEncodedString(base);\n    }\n    /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */ toJSON() {\n        return {\n            codec: this.codec,\n            version: this.version,\n            hash: this.multihash\n        };\n    }\n    /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {boolean}\n   */ equals(other) {\n        return this.codec === other.codec && this.version === other.version && uint8ArrayEquals(this.multihash, other.multihash);\n    }\n    /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other - The other CID.\n   * @returns {void}\n   */ static validateCID(other) {\n        const errorMsg = CIDUtil.checkCIDComponents(other);\n        if (errorMsg) {\n            throw new Error(errorMsg);\n        }\n    }\n    /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is CID}\n   */ static isCID(value) {\n        return value instanceof CID || Boolean(value && value[symbol]);\n    }\n}\nCID.codecs = codecs;\nmodule.exports = CID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/src/index.js\n");

/***/ })

};
;
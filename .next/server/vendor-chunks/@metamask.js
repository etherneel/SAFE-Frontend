"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@metamask";
exports.ids = ["vendor-chunks/@metamask"];
exports.modules = {

/***/ "(ssr)/./node_modules/@metamask/safe-event-emitter/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@metamask/safe-event-emitter/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    } catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(()=>{\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for(let i = 0; i < n; i += 1){\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === \"error\";\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        } else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === \"function\") {\n            safeApply(handler, this, args);\n        } else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for(let i = 0; i < len; i += 1){\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports[\"default\"] = SafeEventEmitter; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3NhZmUtZXZlbnQtZW1pdHRlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxTQUFTQyxVQUFVQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsSUFBSTtJQUNyQyxJQUFJO1FBQ0FDLFFBQVFDLEtBQUssQ0FBQ0osU0FBU0MsU0FBU0M7SUFDcEMsRUFDQSxPQUFPRyxLQUFLO1FBQ1IsNkRBQTZEO1FBQzdEQyxXQUFXO1lBQ1AsTUFBTUQ7UUFDVjtJQUNKO0FBQ0o7QUFDQSxTQUFTRSxXQUFXQyxHQUFHO0lBQ25CLE1BQU1DLElBQUlELElBQUlFLE1BQU07SUFDcEIsTUFBTUMsT0FBTyxJQUFJQyxNQUFNSDtJQUN2QixJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosR0FBR0ksS0FBSyxFQUFHO1FBQzNCRixJQUFJLENBQUNFLEVBQUUsR0FBR0wsR0FBRyxDQUFDSyxFQUFFO0lBQ3BCO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBLE1BQU1HLHlCQUF5QmpCLFNBQVNrQixZQUFZO0lBQ2hEQyxLQUFLQyxJQUFJLEVBQUUsR0FBR2YsSUFBSSxFQUFFO1FBQ2hCLElBQUlnQixVQUFVRCxTQUFTO1FBQ3ZCLE1BQU1FLFNBQVMsSUFBSSxDQUFDQyxPQUFPO1FBQzNCLElBQUlELFdBQVdFLFdBQVc7WUFDdEJILFVBQVVBLFdBQVdDLE9BQU9HLEtBQUssS0FBS0Q7UUFDMUMsT0FDSyxJQUFJLENBQUNILFNBQVM7WUFDZixPQUFPO1FBQ1g7UUFDQSxvREFBb0Q7UUFDcEQsSUFBSUEsU0FBUztZQUNULElBQUlLO1lBQ0osSUFBSXJCLEtBQUtRLE1BQU0sR0FBRyxHQUFHO2dCQUNqQixDQUFDYSxHQUFHLEdBQUdyQjtZQUNYO1lBQ0EsSUFBSXFCLGNBQWNDLE9BQU87Z0JBQ3JCLHFFQUFxRTtnQkFDckUsaUVBQWlFO2dCQUNqRSxNQUFNRCxJQUFJLDBCQUEwQjtZQUN4QztZQUNBLGlEQUFpRDtZQUNqRCxNQUFNbEIsTUFBTSxJQUFJbUIsTUFBTSxDQUFDLGdCQUFnQixFQUFFRCxLQUFLLENBQUMsRUFBRSxFQUFFQSxHQUFHRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ3ZFcEIsSUFBSUosT0FBTyxHQUFHc0I7WUFDZCxNQUFNbEIsS0FBSywwQkFBMEI7UUFDekM7UUFDQSxNQUFNTCxVQUFVbUIsTUFBTSxDQUFDRixLQUFLO1FBQzVCLElBQUlqQixZQUFZcUIsV0FBVztZQUN2QixPQUFPO1FBQ1g7UUFDQSxJQUFJLE9BQU9yQixZQUFZLFlBQVk7WUFDL0JELFVBQVVDLFNBQVMsSUFBSSxFQUFFRTtRQUM3QixPQUNLO1lBQ0QsTUFBTXdCLE1BQU0xQixRQUFRVSxNQUFNO1lBQzFCLE1BQU1pQixZQUFZcEIsV0FBV1A7WUFDN0IsSUFBSyxJQUFJYSxJQUFJLEdBQUdBLElBQUlhLEtBQUtiLEtBQUssRUFBRztnQkFDN0JkLFVBQVU0QixTQUFTLENBQUNkLEVBQUUsRUFBRSxJQUFJLEVBQUVYO1lBQ2xDO1FBQ0o7UUFDQSxPQUFPO0lBQ1g7QUFDSjtBQUNBUCxrQkFBZSxHQUFHbUIsa0JBQ2xCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9zYWZlLWV2ZW50LWVtaXR0ZXIvaW5kZXguanM/NjhlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmZ1bmN0aW9uIHNhZmVBcHBseShoYW5kbGVyLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgUmVmbGVjdC5hcHBseShoYW5kbGVyLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBUaHJvdyBlcnJvciBhZnRlciB0aW1lb3V0IHNvIGFzIG5vdCB0byBpbnRlcnJ1cHQgdGhlIHN0YWNrXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcnJheUNsb25lKGFycikge1xuICAgIGNvbnN0IG4gPSBhcnIubGVuZ3RoO1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpICs9IDEpIHtcbiAgICAgICAgY29weVtpXSA9IGFycltpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59XG5jbGFzcyBTYWZlRXZlbnRFbWl0dGVyIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBlbWl0KHR5cGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgbGV0IGRvRXJyb3IgPSB0eXBlID09PSAnZXJyb3InO1xuICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZG9FcnJvciA9IGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWRvRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gICAgICAgIGlmIChkb0Vycm9yKSB7XG4gICAgICAgICAgICBsZXQgZXI7XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgW2VyXSA9IGFyZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgICAgICAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICAgICAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYFVuaGFuZGxlZCBlcnJvci4ke2VyID8gYCAoJHtlci5tZXNzYWdlfSlgIDogJyd9YCk7XG4gICAgICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICAgICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNhZmVBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBzYWZlQXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTYWZlRXZlbnRFbWl0dGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwic2FmZUFwcGx5IiwiaGFuZGxlciIsImNvbnRleHQiLCJhcmdzIiwiUmVmbGVjdCIsImFwcGx5IiwiZXJyIiwic2V0VGltZW91dCIsImFycmF5Q2xvbmUiLCJhcnIiLCJuIiwibGVuZ3RoIiwiY29weSIsIkFycmF5IiwiaSIsIlNhZmVFdmVudEVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJlbWl0IiwidHlwZSIsImRvRXJyb3IiLCJldmVudHMiLCJfZXZlbnRzIiwidW5kZWZpbmVkIiwiZXJyb3IiLCJlciIsIkVycm9yIiwibWVzc2FnZSIsImxlbiIsImxpc3RlbmVycyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/safe-event-emitter/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/assert.js":
/*!*****************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/assert.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs\");\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns True or false, depending on the result.\n */ function isErrorWithMessage(error) {\n    return typeof error === \"object\" && error !== null && \"message\" in error;\n}\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */ function isConstructable(fn) {\n    var _a, _b;\n    /* istanbul ignore next */ return Boolean(typeof ((_b = (_a = fn === null || fn === void 0 ? void 0 : fn.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) === \"string\");\n}\n/**\n * Get the error message from an unknown error object. If the error object has\n * a `message` property, that property is returned. Otherwise, the stringified\n * error object is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The error message.\n */ function getErrorMessage(error) {\n    const message = isErrorWithMessage(error) ? error.message : String(error);\n    // If the error ends with a period, remove it, as we'll add our own period.\n    if (message.endsWith(\".\")) {\n        return message.slice(0, -1);\n    }\n    return message;\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message\n        });\n    }\n    return ErrorWrapper({\n        message\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */ class AssertionError extends Error {\n    constructor(options){\n        super(options.message);\n        this.code = \"ERR_ASSERTION\";\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */ function assert(value, message = \"Assertion failed.\", // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */ function assertStruct(value, struct, errorPrefix = \"Assertion failed\", // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    } catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessage(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */ function assertExhaustive(_object) {\n    throw new Error(\"Invalid branch reached. Should be detected during compilation.\");\n}\nexports.assertExhaustive = assertExhaustive; //# sourceMappingURL=assert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/base64.js":
/*!*****************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/base64.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.base64 = void 0;\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs\");\nconst assert_1 = __webpack_require__(/*! ./assert */ \"(ssr)/./node_modules/@metamask/utils/dist/assert.js\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */ const base64 = (struct, options = {})=>{\n    var _a, _b;\n    const paddingRequired = (_a = options.paddingRequired) !== null && _a !== void 0 ? _a : false;\n    const characterSet = (_b = options.characterSet) !== null && _b !== void 0 ? _b : \"base64\";\n    let letters;\n    if (characterSet === \"base64\") {\n        letters = String.raw`[A-Za-z0-9+\\/]`;\n    } else {\n        (0, assert_1.assert)(characterSet === \"base64url\");\n        letters = String.raw`[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, \"u\");\n    } else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, \"u\");\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64; //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvYmFzZTY0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixNQUFNRyxnQkFBZ0JDLG1CQUFPQSxDQUFDLGlHQUFhO0FBQzNDLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLHFFQUFVO0FBQ25DOzs7Ozs7Q0FNQyxHQUNELE1BQU1GLFNBQVMsQ0FBQ0ksUUFBUUMsVUFBVSxDQUFDLENBQUM7SUFDaEMsSUFBSUMsSUFBSUM7SUFDUixNQUFNQyxrQkFBa0IsQ0FBQ0YsS0FBS0QsUUFBUUcsZUFBZSxNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJQSxLQUFLO0lBQ3hGLE1BQU1HLGVBQWUsQ0FBQ0YsS0FBS0YsUUFBUUksWUFBWSxNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJQSxLQUFLO0lBQ2xGLElBQUlHO0lBQ0osSUFBSUQsaUJBQWlCLFVBQVU7UUFDM0JDLFVBQVVDLE9BQU9DLEdBQUcsQ0FBRSxjQUFjLENBQUM7SUFDekMsT0FDSztRQUNBLElBQUdULFNBQVNVLE1BQU0sRUFBRUosaUJBQWlCO1FBQ3RDQyxVQUFVQyxPQUFPQyxHQUFHLENBQUUsYUFBYSxDQUFDO0lBQ3hDO0lBQ0EsSUFBSUU7SUFDSixJQUFJTixpQkFBaUI7UUFDakJNLEtBQUssSUFBSUMsT0FBTyxDQUFDLElBQUksRUFBRUwsUUFBUSxRQUFRLEVBQUVBLFFBQVEsS0FBSyxFQUFFQSxRQUFRLFFBQVEsQ0FBQyxFQUFFO0lBQy9FLE9BQ0s7UUFDREksS0FBSyxJQUFJQyxPQUFPLENBQUMsSUFBSSxFQUFFTCxRQUFRLFFBQVEsRUFBRUEsUUFBUSxNQUFNLEVBQUVBLFFBQVEsS0FBSyxFQUFFQSxRQUFRLFFBQVEsQ0FBQyxFQUFFO0lBQy9GO0lBQ0EsT0FBTyxDQUFDLEdBQUdULGNBQWNlLE9BQU8sRUFBRVosUUFBUVU7QUFDOUM7QUFDQWhCLGNBQWMsR0FBR0UsUUFDakIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvYmFzZTY0LmpzP2MyOGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJhc2U2NCA9IHZvaWQgMDtcbmNvbnN0IHN1cGVyc3RydWN0XzEgPSByZXF1aXJlKFwic3VwZXJzdHJ1Y3RcIik7XG5jb25zdCBhc3NlcnRfMSA9IHJlcXVpcmUoXCIuL2Fzc2VydFwiKTtcbi8qKlxuICogRW5zdXJlIHRoYXQgYSBwcm92aWRlZCBzdHJpbmctYmFzZWQgc3RydWN0IGlzIHZhbGlkIGJhc2U2NC5cbiAqXG4gKiBAcGFyYW0gc3RydWN0IC0gVGhlIHN0cmluZyBiYXNlZCBzdHJ1Y3QuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gc3BlY2lhbGl6ZSBiYXNlNjQgdmFsaWRhdGlvbi4gU2VlIHtAbGluayBCYXNlNjRPcHRpb25zfSBkb2N1bWVudGF0aW9uLlxuICogQHJldHVybnMgQSBzdXBlcnN0cnVjdCB2YWxpZGF0aW5nIGJhc2U2NC5cbiAqL1xuY29uc3QgYmFzZTY0ID0gKHN0cnVjdCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBwYWRkaW5nUmVxdWlyZWQgPSAoX2EgPSBvcHRpb25zLnBhZGRpbmdSZXF1aXJlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgY29uc3QgY2hhcmFjdGVyU2V0ID0gKF9iID0gb3B0aW9ucy5jaGFyYWN0ZXJTZXQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdiYXNlNjQnO1xuICAgIGxldCBsZXR0ZXJzO1xuICAgIGlmIChjaGFyYWN0ZXJTZXQgPT09ICdiYXNlNjQnKSB7XG4gICAgICAgIGxldHRlcnMgPSBTdHJpbmcucmF3IGBbQS1aYS16MC05K1xcL11gO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkoY2hhcmFjdGVyU2V0ID09PSAnYmFzZTY0dXJsJyk7XG4gICAgICAgIGxldHRlcnMgPSBTdHJpbmcucmF3IGBbLV9BLVphLXowLTldYDtcbiAgICB9XG4gICAgbGV0IHJlO1xuICAgIGlmIChwYWRkaW5nUmVxdWlyZWQpIHtcbiAgICAgICAgcmUgPSBuZXcgUmVnRXhwKGBeKD86JHtsZXR0ZXJzfXs0fSkqKD86JHtsZXR0ZXJzfXszfT18JHtsZXR0ZXJzfXsyfT09KT8kYCwgJ3UnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlID0gbmV3IFJlZ0V4cChgXig/OiR7bGV0dGVyc317NH0pKig/OiR7bGV0dGVyc317MiwzfXwke2xldHRlcnN9ezN9PXwke2xldHRlcnN9ezJ9PT0pPyRgLCAndScpO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHN1cGVyc3RydWN0XzEucGF0dGVybikoc3RydWN0LCByZSk7XG59O1xuZXhwb3J0cy5iYXNlNjQgPSBiYXNlNjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYmFzZTY0Iiwic3VwZXJzdHJ1Y3RfMSIsInJlcXVpcmUiLCJhc3NlcnRfMSIsInN0cnVjdCIsIm9wdGlvbnMiLCJfYSIsIl9iIiwicGFkZGluZ1JlcXVpcmVkIiwiY2hhcmFjdGVyU2V0IiwibGV0dGVycyIsIlN0cmluZyIsInJhdyIsImFzc2VydCIsInJlIiwiUmVnRXhwIiwicGF0dGVybiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/base64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/bytes.js":
/*!****************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/bytes.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst assert_1 = __webpack_require__(/*! ./assert */ \"(ssr)/./node_modules/@metamask/utils/dist/assert.js\");\nconst hex_1 = __webpack_require__(/*! ./hex */ \"(ssr)/./node_modules/@metamask/utils/dist/hex.js\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */ function getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return ()=>{\n        if (lookupTable.length === 0) {\n            for(let i = 0; i < 256; i++){\n                lookupTable.push(i.toString(16).padStart(2, \"0\"));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */ const getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */ function isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */ function assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), \"Value must be a Uint8Array.\");\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */ function bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return \"0x\";\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for(let i = 0; i < bytes.length; i++){\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(\"\"));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */ function bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */ function bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes){\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */ function bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), \"Number is not a safe integer. Use `bytesToBigInt` instead.\");\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */ function bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */ function hexToBytes(value) {\n    var _a;\n    // \"0x\" is often used as empty byte array.\n    if (((_a = value === null || value === void 0 ? void 0 : value.toLowerCase) === null || _a === void 0 ? void 0 : _a.call(value)) === \"0x\") {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for(let i = 0; i < bytes.length; i++){\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 - (c1 < HEX_MAXIMUM_NUMBER_CHARACTER ? HEX_MINIMUM_NUMBER_CHARACTER : HEX_CHARACTER_OFFSET);\n        const n2 = c2 - (c2 < HEX_MAXIMUM_NUMBER_CHARACTER ? HEX_MINIMUM_NUMBER_CHARACTER : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */ function bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === \"bigint\", \"Value must be a bigint.\");\n    (0, assert_1.assert)(value >= BigInt(0), \"Value must be a non-negative bigint.\");\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */ function bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */ const mask = value >> BigInt(31);\n    return !((~value & mask) + (value & ~mask) >> BigInt(bytes * 8 + ~0));\n/* eslint-enable no-bitwise */ }\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */ function signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === \"bigint\", \"Value must be a bigint.\");\n    (0, assert_1.assert)(typeof byteLength === \"number\", \"Byte length must be a number.\");\n    (0, assert_1.assert)(byteLength > 0, \"Byte length must be greater than 0.\");\n    (0, assert_1.assert)(bigIntFits(value, byteLength), \"Byte length is too small to represent the given value.\");\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for(let i = 0; i < bytes.length; i++){\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */ function numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === \"number\", \"Value must be a number.\");\n    (0, assert_1.assert)(value >= 0, \"Value must be a non-negative number.\");\n    (0, assert_1.assert)(Number.isSafeInteger(value), \"Value is not a safe integer. Use `bigIntToBytes` instead.\");\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */ function stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === \"string\", \"Value must be a string.\");\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */ function valueToBytes(value) {\n    if (typeof value === \"bigint\") {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === \"number\") {\n        return numberToBytes(value);\n    }\n    if (typeof value === \"string\") {\n        if (value.startsWith(\"0x\")) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */ function concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for(let i = 0; i < values.length; i++){\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for(let i = 0, offset = 0; i < normalizedValues.length; i++){\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */ function createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== \"undefined\" && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView; //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/checksum.js":
/*!*******************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/checksum.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs\");\nconst base64_1 = __webpack_require__(/*! ./base64 */ \"(ssr)/./node_modules/@metamask/utils/dist/base64.js\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), {\n    paddingRequired: true\n}), 44, 44); //# sourceMappingURL=checksum.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvY2hlY2tzdW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxpR0FBYTtBQUMzQyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxxRUFBVTtBQUNuQ0osc0JBQXNCLEdBQUcsQ0FBQyxHQUFHRyxjQUFjRyxJQUFJLEVBQUUsQ0FBQyxHQUFHRCxTQUFTRSxNQUFNLEVBQUUsQ0FBQyxHQUFHSixjQUFjSyxNQUFNLEtBQUs7SUFBRUMsaUJBQWlCO0FBQUssSUFBSSxJQUFJLEtBQ25JLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9kaXN0L2NoZWNrc3VtLmpzPzVmYWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoZWNrc3VtU3RydWN0ID0gdm9pZCAwO1xuY29uc3Qgc3VwZXJzdHJ1Y3RfMSA9IHJlcXVpcmUoXCJzdXBlcnN0cnVjdFwiKTtcbmNvbnN0IGJhc2U2NF8xID0gcmVxdWlyZShcIi4vYmFzZTY0XCIpO1xuZXhwb3J0cy5DaGVja3N1bVN0cnVjdCA9ICgwLCBzdXBlcnN0cnVjdF8xLnNpemUpKCgwLCBiYXNlNjRfMS5iYXNlNjQpKCgwLCBzdXBlcnN0cnVjdF8xLnN0cmluZykoKSwgeyBwYWRkaW5nUmVxdWlyZWQ6IHRydWUgfSksIDQ0LCA0NCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja3N1bS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDaGVja3N1bVN0cnVjdCIsInN1cGVyc3RydWN0XzEiLCJyZXF1aXJlIiwiYmFzZTY0XzEiLCJzaXplIiwiYmFzZTY0Iiwic3RyaW5nIiwicGFkZGluZ1JlcXVpcmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/checksum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/coercers.js":
/*!*******************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/coercers.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs\");\nconst assert_1 = __webpack_require__(/*! ./assert */ \"(ssr)/./node_modules/@metamask/utils/dist/assert.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@metamask/utils/dist/bytes.js\");\nconst hex_1 = __webpack_require__(/*! ./hex */ \"(ssr)/./node_modules/@metamask/utils/dist/hex.js\");\nconst NumberLikeStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.number)(),\n    (0, superstruct_1.bigint)(),\n    (0, superstruct_1.string)(),\n    hex_1.StrictHexStruct\n]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([\n    hex_1.StrictHexStruct,\n    (0, superstruct_1.instance)(Uint8Array)\n]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([\n    hex_1.StrictHexStruct\n]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */ function createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    } catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */ throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */ function createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    } catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */ throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */ function createBytes(value) {\n    if (typeof value === \"string\" && value.toLowerCase() === \"0x\") {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    } catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */ throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */ function createHex(value) {\n    if (value instanceof Uint8Array && value.length === 0 || typeof value === \"string\" && value.toLowerCase() === \"0x\") {\n        return \"0x\";\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    } catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */ throw error;\n    }\n}\nexports.createHex = createHex; //# sourceMappingURL=coercers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/coercers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/collections.js":
/*!**********************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/collections.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */ class FrozenMap {\n    constructor(entries){\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map)=>callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0 ? ` ${[\n            ...this.entries()\n        ].map(([key, value])=>`${String(key)} => ${String(value)}`).join(\", \")} ` : \"\"}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */ class FrozenSet {\n    constructor(values){\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set)=>callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0 ? ` ${[\n            ...this.values()\n        ].map((member)=>String(member)).join(\", \")} ` : \"\"}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype); //# sourceMappingURL=collections.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/hex.js":
/*!**************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/hex.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.remove0x = exports.add0x = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs\");\nconst assert_1 = __webpack_require__(/*! ./assert */ \"(ssr)/./node_modules/@metamask/utils/dist/assert.js\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */ function isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */ function isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */ function assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), \"Value must be a hexadecimal string.\");\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */ function assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */ function add0x(hexadecimal) {\n    if (hexadecimal.startsWith(\"0x\")) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith(\"0X\")) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */ function remove0x(hexadecimal) {\n    if (hexadecimal.startsWith(\"0x\") || hexadecimal.startsWith(\"0X\")) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x; //# sourceMappingURL=hex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvaGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBR0EsYUFBYSxHQUFHQSwrQkFBK0IsR0FBR0EseUJBQXlCLEdBQUdBLHlCQUF5QixHQUFHQSxtQkFBbUIsR0FBR0EsdUJBQXVCLEdBQUdBLGlCQUFpQixHQUFHLEtBQUs7QUFDdE0sTUFBTVUsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxpR0FBYTtBQUMzQyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxxRUFBVTtBQUNuQ1gsaUJBQWlCLEdBQUcsQ0FBQyxHQUFHVSxjQUFjRyxPQUFPLEVBQUUsQ0FBQyxHQUFHSCxjQUFjSSxNQUFNLEtBQUs7QUFDNUVkLHVCQUF1QixHQUFHLENBQUMsR0FBR1UsY0FBY0csT0FBTyxFQUFFLENBQUMsR0FBR0gsY0FBY0ksTUFBTSxLQUFLO0FBQ2xGOzs7OztDQUtDLEdBQ0QsU0FBU1AsWUFBWU4sS0FBSztJQUN0QixPQUFPLENBQUMsR0FBR1MsY0FBY0ssRUFBRSxFQUFFZCxPQUFPRCxRQUFRUyxTQUFTO0FBQ3pEO0FBQ0FULG1CQUFtQixHQUFHTztBQUN0Qjs7Ozs7O0NBTUMsR0FDRCxTQUFTRCxrQkFBa0JMLEtBQUs7SUFDNUIsT0FBTyxDQUFDLEdBQUdTLGNBQWNLLEVBQUUsRUFBRWQsT0FBT0QsUUFBUVEsZUFBZTtBQUMvRDtBQUNBUix5QkFBeUIsR0FBR007QUFDNUI7Ozs7O0NBS0MsR0FDRCxTQUFTRCxrQkFBa0JKLEtBQUs7SUFDM0IsSUFBR1csU0FBU0ksTUFBTSxFQUFFVCxZQUFZTixRQUFRO0FBQzdDO0FBQ0FELHlCQUF5QixHQUFHSztBQUM1Qjs7Ozs7O0NBTUMsR0FDRCxTQUFTRCx3QkFBd0JILEtBQUs7SUFDakMsSUFBR1csU0FBU0ksTUFBTSxFQUFFVixrQkFBa0JMLFFBQVE7QUFDbkQ7QUFDQUQsK0JBQStCLEdBQUdJO0FBQ2xDOzs7Ozs7Q0FNQyxHQUNELFNBQVNELE1BQU1jLFdBQVc7SUFDdEIsSUFBSUEsWUFBWUMsVUFBVSxDQUFDLE9BQU87UUFDOUIsT0FBT0Q7SUFDWDtJQUNBLElBQUlBLFlBQVlDLFVBQVUsQ0FBQyxPQUFPO1FBQzlCLE9BQU8sQ0FBQyxFQUFFLEVBQUVELFlBQVlFLFNBQVMsQ0FBQyxHQUFHLENBQUM7SUFDMUM7SUFDQSxPQUFPLENBQUMsRUFBRSxFQUFFRixZQUFZLENBQUM7QUFDN0I7QUFDQWpCLGFBQWEsR0FBR0c7QUFDaEI7Ozs7OztDQU1DLEdBQ0QsU0FBU0QsU0FBU2UsV0FBVztJQUN6QixJQUFJQSxZQUFZQyxVQUFVLENBQUMsU0FBU0QsWUFBWUMsVUFBVSxDQUFDLE9BQU87UUFDOUQsT0FBT0QsWUFBWUUsU0FBUyxDQUFDO0lBQ2pDO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBakIsZ0JBQWdCLEdBQUdFLFVBQ25CLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9kaXN0L2hleC5qcz9lMTFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW1vdmUweCA9IGV4cG9ydHMuYWRkMHggPSBleHBvcnRzLmFzc2VydElzU3RyaWN0SGV4U3RyaW5nID0gZXhwb3J0cy5hc3NlcnRJc0hleFN0cmluZyA9IGV4cG9ydHMuaXNTdHJpY3RIZXhTdHJpbmcgPSBleHBvcnRzLmlzSGV4U3RyaW5nID0gZXhwb3J0cy5TdHJpY3RIZXhTdHJ1Y3QgPSBleHBvcnRzLkhleFN0cnVjdCA9IHZvaWQgMDtcbmNvbnN0IHN1cGVyc3RydWN0XzEgPSByZXF1aXJlKFwic3VwZXJzdHJ1Y3RcIik7XG5jb25zdCBhc3NlcnRfMSA9IHJlcXVpcmUoXCIuL2Fzc2VydFwiKTtcbmV4cG9ydHMuSGV4U3RydWN0ID0gKDAsIHN1cGVyc3RydWN0XzEucGF0dGVybikoKDAsIHN1cGVyc3RydWN0XzEuc3RyaW5nKSgpLCAvXig/OjB4KT9bMC05YS1mXSskL2l1KTtcbmV4cG9ydHMuU3RyaWN0SGV4U3RydWN0ID0gKDAsIHN1cGVyc3RydWN0XzEucGF0dGVybikoKDAsIHN1cGVyc3RydWN0XzEuc3RyaW5nKSgpLCAvXjB4WzAtOWEtZl0rJC9pdSk7XG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIGlzIGEgdmFsaWQgaGV4IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB2YWx1ZSBpcyBhIHZhbGlkIGhleCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGlzSGV4U3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuICgwLCBzdXBlcnN0cnVjdF8xLmlzKSh2YWx1ZSwgZXhwb3J0cy5IZXhTdHJ1Y3QpO1xufVxuZXhwb3J0cy5pc0hleFN0cmluZyA9IGlzSGV4U3RyaW5nO1xuLyoqXG4gKiBTdHJpY3RseSBjaGVjayBpZiBhIHN0cmluZyBpcyBhIHZhbGlkIGhleCBzdHJpbmcuIEEgdmFsaWQgaGV4IHN0cmluZyBtdXN0XG4gKiBzdGFydCB3aXRoIHRoZSBcIjB4XCItcHJlZml4LlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIHZhbHVlIGlzIGEgdmFsaWQgaGV4IHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RIZXhTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gKDAsIHN1cGVyc3RydWN0XzEuaXMpKHZhbHVlLCBleHBvcnRzLlN0cmljdEhleFN0cnVjdCk7XG59XG5leHBvcnRzLmlzU3RyaWN0SGV4U3RyaW5nID0gaXNTdHJpY3RIZXhTdHJpbmc7XG4vKipcbiAqIEFzc2VydCB0aGF0IGEgdmFsdWUgaXMgYSB2YWxpZCBoZXggc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEB0aHJvd3MgSWYgdGhlIHZhbHVlIGlzIG5vdCBhIHZhbGlkIGhleCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydElzSGV4U3RyaW5nKHZhbHVlKSB7XG4gICAgKDAsIGFzc2VydF8xLmFzc2VydCkoaXNIZXhTdHJpbmcodmFsdWUpLCAnVmFsdWUgbXVzdCBiZSBhIGhleGFkZWNpbWFsIHN0cmluZy4nKTtcbn1cbmV4cG9ydHMuYXNzZXJ0SXNIZXhTdHJpbmcgPSBhc3NlcnRJc0hleFN0cmluZztcbi8qKlxuICogQXNzZXJ0IHRoYXQgYSB2YWx1ZSBpcyBhIHZhbGlkIGhleCBzdHJpbmcuIEEgdmFsaWQgaGV4IHN0cmluZyBtdXN0IHN0YXJ0IHdpdGhcbiAqIHRoZSBcIjB4XCItcHJlZml4LlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEB0aHJvd3MgSWYgdGhlIHZhbHVlIGlzIG5vdCBhIHZhbGlkIGhleCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydElzU3RyaWN0SGV4U3RyaW5nKHZhbHVlKSB7XG4gICAgKDAsIGFzc2VydF8xLmFzc2VydCkoaXNTdHJpY3RIZXhTdHJpbmcodmFsdWUpLCAnVmFsdWUgbXVzdCBiZSBhIGhleGFkZWNpbWFsIHN0cmluZywgc3RhcnRpbmcgd2l0aCBcIjB4XCIuJyk7XG59XG5leHBvcnRzLmFzc2VydElzU3RyaWN0SGV4U3RyaW5nID0gYXNzZXJ0SXNTdHJpY3RIZXhTdHJpbmc7XG4vKipcbiAqIEFkZCB0aGUgYDB4YC1wcmVmaXggdG8gYSBoZXhhZGVjaW1hbCBzdHJpbmcuIElmIHRoZSBzdHJpbmcgYWxyZWFkeSBoYXMgdGhlXG4gKiBwcmVmaXgsIGl0IGlzIHJldHVybmVkIGFzLWlzLlxuICpcbiAqIEBwYXJhbSBoZXhhZGVjaW1hbCAtIFRoZSBoZXhhZGVjaW1hbCBzdHJpbmcgdG8gYWRkIHRoZSBwcmVmaXggdG8uXG4gKiBAcmV0dXJucyBUaGUgcHJlZml4ZWQgaGV4YWRlY2ltYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBhZGQweChoZXhhZGVjaW1hbCkge1xuICAgIGlmIChoZXhhZGVjaW1hbC5zdGFydHNXaXRoKCcweCcpKSB7XG4gICAgICAgIHJldHVybiBoZXhhZGVjaW1hbDtcbiAgICB9XG4gICAgaWYgKGhleGFkZWNpbWFsLnN0YXJ0c1dpdGgoJzBYJykpIHtcbiAgICAgICAgcmV0dXJuIGAweCR7aGV4YWRlY2ltYWwuc3Vic3RyaW5nKDIpfWA7XG4gICAgfVxuICAgIHJldHVybiBgMHgke2hleGFkZWNpbWFsfWA7XG59XG5leHBvcnRzLmFkZDB4ID0gYWRkMHg7XG4vKipcbiAqIFJlbW92ZSB0aGUgYDB4YC1wcmVmaXggZnJvbSBhIGhleGFkZWNpbWFsIHN0cmluZy4gSWYgdGhlIHN0cmluZyBkb2Vzbid0IGhhdmVcbiAqIHRoZSBwcmVmaXgsIGl0IGlzIHJldHVybmVkIGFzLWlzLlxuICpcbiAqIEBwYXJhbSBoZXhhZGVjaW1hbCAtIFRoZSBoZXhhZGVjaW1hbCBzdHJpbmcgdG8gcmVtb3ZlIHRoZSBwcmVmaXggZnJvbS5cbiAqIEByZXR1cm5zIFRoZSB1bi1wcmVmaXhlZCBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZTB4KGhleGFkZWNpbWFsKSB7XG4gICAgaWYgKGhleGFkZWNpbWFsLnN0YXJ0c1dpdGgoJzB4JykgfHwgaGV4YWRlY2ltYWwuc3RhcnRzV2l0aCgnMFgnKSkge1xuICAgICAgICByZXR1cm4gaGV4YWRlY2ltYWwuc3Vic3RyaW5nKDIpO1xuICAgIH1cbiAgICByZXR1cm4gaGV4YWRlY2ltYWw7XG59XG5leHBvcnRzLnJlbW92ZTB4ID0gcmVtb3ZlMHg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVtb3ZlMHgiLCJhZGQweCIsImFzc2VydElzU3RyaWN0SGV4U3RyaW5nIiwiYXNzZXJ0SXNIZXhTdHJpbmciLCJpc1N0cmljdEhleFN0cmluZyIsImlzSGV4U3RyaW5nIiwiU3RyaWN0SGV4U3RydWN0IiwiSGV4U3RydWN0Iiwic3VwZXJzdHJ1Y3RfMSIsInJlcXVpcmUiLCJhc3NlcnRfMSIsInBhdHRlcm4iLCJzdHJpbmciLCJpcyIsImFzc2VydCIsImhleGFkZWNpbWFsIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./assert */ \"(ssr)/./node_modules/@metamask/utils/dist/assert.js\"), exports);\n__exportStar(__webpack_require__(/*! ./base64 */ \"(ssr)/./node_modules/@metamask/utils/dist/base64.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@metamask/utils/dist/bytes.js\"), exports);\n__exportStar(__webpack_require__(/*! ./checksum */ \"(ssr)/./node_modules/@metamask/utils/dist/checksum.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coercers */ \"(ssr)/./node_modules/@metamask/utils/dist/coercers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./collections */ \"(ssr)/./node_modules/@metamask/utils/dist/collections.js\"), exports);\n__exportStar(__webpack_require__(/*! ./hex */ \"(ssr)/./node_modules/@metamask/utils/dist/hex.js\"), exports);\n__exportStar(__webpack_require__(/*! ./json */ \"(ssr)/./node_modules/@metamask/utils/dist/json.js\"), exports);\n__exportStar(__webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@metamask/utils/dist/logging.js\"), exports);\n__exportStar(__webpack_require__(/*! ./misc */ \"(ssr)/./node_modules/@metamask/utils/dist/misc.js\"), exports);\n__exportStar(__webpack_require__(/*! ./number */ \"(ssr)/./node_modules/@metamask/utils/dist/number.js\"), exports);\n__exportStar(__webpack_require__(/*! ./opaque */ \"(ssr)/./node_modules/@metamask/utils/dist/opaque.js\"), exports);\n__exportStar(__webpack_require__(/*! ./time */ \"(ssr)/./node_modules/@metamask/utils/dist/time.js\"), exports);\n__exportStar(__webpack_require__(/*! ./versions */ \"(ssr)/./node_modules/@metamask/utils/dist/versions.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLHFFQUFVLEdBQUdOO0FBQ2xDRCxhQUFhTyxtQkFBT0EsQ0FBQyxxRUFBVSxHQUFHTjtBQUNsQ0QsYUFBYU8sbUJBQU9BLENBQUMsbUVBQVMsR0FBR047QUFDakNELGFBQWFPLG1CQUFPQSxDQUFDLHlFQUFZLEdBQUdOO0FBQ3BDRCxhQUFhTyxtQkFBT0EsQ0FBQyx5RUFBWSxHQUFHTjtBQUNwQ0QsYUFBYU8sbUJBQU9BLENBQUMsK0VBQWUsR0FBR047QUFDdkNELGFBQWFPLG1CQUFPQSxDQUFDLCtEQUFPLEdBQUdOO0FBQy9CRCxhQUFhTyxtQkFBT0EsQ0FBQyxpRUFBUSxHQUFHTjtBQUNoQ0QsYUFBYU8sbUJBQU9BLENBQUMsdUVBQVcsR0FBR047QUFDbkNELGFBQWFPLG1CQUFPQSxDQUFDLGlFQUFRLEdBQUdOO0FBQ2hDRCxhQUFhTyxtQkFBT0EsQ0FBQyxxRUFBVSxHQUFHTjtBQUNsQ0QsYUFBYU8sbUJBQU9BLENBQUMscUVBQVUsR0FBR047QUFDbENELGFBQWFPLG1CQUFPQSxDQUFDLGlFQUFRLEdBQUdOO0FBQ2hDRCxhQUFhTyxtQkFBT0EsQ0FBQyx5RUFBWSxHQUFHTixVQUNwQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvZGlzdC9pbmRleC5qcz8yZGYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXNzZXJ0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iYXNlNjRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2J5dGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jaGVja3N1bVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29lcmNlcnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25zXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZXhcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2pzb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2xvZ2dpbmdcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21pc2NcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL251bWJlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb3BhcXVlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90aW1lXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92ZXJzaW9uc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/json.js":
/*!***************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/json.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateJsonAndGetSize = exports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.isValidJson = exports.JsonStruct = void 0;\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs\");\nconst assert_1 = __webpack_require__(/*! ./assert */ \"(ssr)/./node_modules/@metamask/utils/dist/assert.js\");\nconst misc_1 = __webpack_require__(/*! ./misc */ \"(ssr)/./node_modules/@metamask/utils/dist/misc.js\");\nexports.JsonStruct = (0, superstruct_1.define)(\"Json\", (value)=>{\n    const [isValid] = validateJsonAndGetSize(value, true);\n    if (!isValid) {\n        return \"Expected a valid JSON-serializable value\";\n    }\n    return true;\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */ function isValidJson(value) {\n    return (0, superstruct_1.is)(value, exports.JsonStruct);\n}\nexports.isValidJson = isValidJson;\n/**\n * The string '2.0'.\n */ exports.jsonrpc2 = \"2.0\";\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([\n    (0, superstruct_1.number)(),\n    (0, superstruct_1.string)()\n]));\nexports.JsonRpcErrorStruct = (0, superstruct_1.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: (0, superstruct_1.optional)(exports.JsonStruct),\n    stack: (0, superstruct_1.optional)((0, superstruct_1.string)())\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.optional)((0, superstruct_1.union)([\n    (0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct),\n    (0, superstruct_1.array)(exports.JsonStruct)\n]));\nexports.JsonRpcRequestStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exports.JsonRpcParamsStruct\n});\nexports.JsonRpcNotificationStruct = (0, superstruct_1.omit)(exports.JsonRpcRequestStruct, [\n    \"id\"\n]);\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */ function isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */ function assertIsJsonRpcNotification(value, // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, \"Invalid JSON-RPC notification\", ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */ function isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */ function assertIsJsonRpcRequest(value, // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, \"Invalid JSON-RPC request\", ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct)\n});\nexports.JsonRpcSuccessStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct\n});\nexports.JsonRpcFailureStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */ function isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */ function assertIsPendingJsonRpcResponse(response, // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, \"Invalid pending JSON-RPC response\", ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */ function isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */ function assertIsJsonRpcResponse(value, // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, \"Invalid JSON-RPC response\", ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */ function isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */ function assertIsJsonRpcSuccess(value, // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, \"Invalid JSON-RPC success response\", ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */ function isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */ function assertIsJsonRpcFailure(value, // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, \"Invalid JSON-RPC failure response\", ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */ function isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */ function assertIsJsonRpcError(value, // eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, \"Invalid JSON-RPC error\", ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */ function getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = Object.assign({\n        permitEmptyString: true,\n        permitFractions: false,\n        permitNull: true\n    }, options);\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */ const isValidJsonRpcId = (id)=>{\n        return Boolean(typeof id === \"number\" && (permitFractions || Number.isInteger(id)) || typeof id === \"string\" && (permitEmptyString || id.length > 0) || permitNull && id === null);\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n/**\n * Checks whether a value is JSON serializable and counts the total number\n * of bytes needed to store the serialized version of the value.\n *\n * @param jsObject - Potential JSON serializable object.\n * @param skipSizingProcess - Skip JSON size calculation (default: false).\n * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether\n * the value was serializable and a number of bytes that it will use when serialized to JSON.\n */ function validateJsonAndGetSize(jsObject, skipSizingProcess = false) {\n    const seenObjects = new Set();\n    /**\n     * Checks whether a value is JSON serializable and counts the total number\n     * of bytes needed to store the serialized version of the value.\n     *\n     * This function assumes the encoding of the JSON is done in UTF-8.\n     *\n     * @param value - Potential JSON serializable value.\n     * @param skipSizing - Skip JSON size calculation (default: false).\n     * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether\n     * the value was serializable and a number of bytes that it will use when serialized to JSON.\n     */ function getJsonSerializableInfo(value, skipSizing) {\n        if (value === undefined) {\n            return [\n                false,\n                0\n            ];\n        } else if (value === null) {\n            // Return already specified constant size for null (special object)\n            return [\n                true,\n                skipSizing ? 0 : misc_1.JsonSize.Null\n            ];\n        }\n        // Check and calculate sizes for basic (and some special) types\n        const typeOfValue = typeof value;\n        try {\n            if (typeOfValue === \"function\") {\n                return [\n                    false,\n                    0\n                ];\n            } else if (typeOfValue === \"string\" || value instanceof String) {\n                return [\n                    true,\n                    skipSizing ? 0 : (0, misc_1.calculateStringSize)(value) + misc_1.JsonSize.Quote * 2\n                ];\n            } else if (typeOfValue === \"boolean\" || value instanceof Boolean) {\n                if (skipSizing) {\n                    return [\n                        true,\n                        0\n                    ];\n                }\n                // eslint-disable-next-line eqeqeq\n                return [\n                    true,\n                    value == true ? misc_1.JsonSize.True : misc_1.JsonSize.False\n                ];\n            } else if (typeOfValue === \"number\" || value instanceof Number) {\n                if (skipSizing) {\n                    return [\n                        true,\n                        0\n                    ];\n                }\n                return [\n                    true,\n                    (0, misc_1.calculateNumberSize)(value)\n                ];\n            } else if (value instanceof Date) {\n                if (skipSizing) {\n                    return [\n                        true,\n                        0\n                    ];\n                }\n                return [\n                    true,\n                    // Note: Invalid dates will serialize to null\n                    isNaN(value.getDate()) ? misc_1.JsonSize.Null : misc_1.JsonSize.Date + misc_1.JsonSize.Quote * 2\n                ];\n            }\n        } catch (_) {\n            return [\n                false,\n                0\n            ];\n        }\n        // If object is not plain and cannot be serialized properly,\n        // stop here and return false for serialization\n        if (!(0, misc_1.isPlainObject)(value) && !Array.isArray(value)) {\n            return [\n                false,\n                0\n            ];\n        }\n        // Circular object detection (handling)\n        // Check if the same object already exists\n        if (seenObjects.has(value)) {\n            return [\n                false,\n                0\n            ];\n        }\n        // Add new object to the seen objects set\n        // Only the plain objects should be added (Primitive types are skipped)\n        seenObjects.add(value);\n        // Continue object decomposition\n        try {\n            return [\n                true,\n                Object.entries(value).reduce((sum, [key, nestedValue], idx, arr)=>{\n                    // Recursively process next nested object or primitive type\n                    // eslint-disable-next-line prefer-const\n                    let [valid, size] = getJsonSerializableInfo(nestedValue, skipSizing);\n                    if (!valid) {\n                        throw new Error(\"JSON validation did not pass. Validation process stopped.\");\n                    }\n                    // Circular object detection\n                    // Once a child node is visited and processed remove it from the set.\n                    // This will prevent false positives with the same adjacent objects.\n                    seenObjects.delete(value);\n                    if (skipSizing) {\n                        return 0;\n                    }\n                    // Objects will have be serialized with \"key\": value,\n                    // therefore we include the key in the calculation here\n                    const keySize = Array.isArray(value) ? 0 : key.length + misc_1.JsonSize.Comma + misc_1.JsonSize.Colon * 2;\n                    const separator = idx < arr.length - 1 ? misc_1.JsonSize.Comma : 0;\n                    return sum + keySize + size + separator;\n                }, // Starts at 2 because the serialized JSON string data (plain text)\n                // will minimally contain {}/[]\n                skipSizing ? 0 : misc_1.JsonSize.Wrapper * 2)\n            ];\n        } catch (_) {\n            return [\n                false,\n                0\n            ];\n        }\n    }\n    return getJsonSerializableInfo(jsObject, skipSizingProcess);\n}\nexports.validateJsonAndGetSize = validateJsonAndGetSize; //# sourceMappingURL=json.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/logging.js":
/*!******************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/logging.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst globalLogger = (0, debug_1.default)(\"metamask\");\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */ function createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */ function createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger; //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvbG9nZ2luZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLDJCQUEyQixHQUFHLEtBQUs7QUFDaEUsTUFBTUksVUFBVVQsZ0JBQWdCVSxtQkFBT0EsQ0FBQyxzREFBTztBQUMvQyxNQUFNQyxlQUFlLENBQUMsR0FBR0YsUUFBUUcsT0FBTyxFQUFFO0FBQzFDOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsU0FBU0osb0JBQW9CSyxXQUFXO0lBQ3BDLE9BQU9GLGFBQWFHLE1BQU0sQ0FBQ0Q7QUFDL0I7QUFDQVIsMkJBQTJCLEdBQUdHO0FBQzlCOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDRCxTQUFTRCxtQkFBbUJRLGFBQWEsRUFBRUMsVUFBVTtJQUNqRCxPQUFPRCxjQUFjRCxNQUFNLENBQUNFO0FBQ2hDO0FBQ0FYLDBCQUEwQixHQUFHRSxvQkFDN0IsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvbG9nZ2luZy5qcz9mMzA4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVNb2R1bGVMb2dnZXIgPSBleHBvcnRzLmNyZWF0ZVByb2plY3RMb2dnZXIgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBnbG9iYWxMb2dnZXIgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnbWV0YW1hc2snKTtcbi8qKlxuICogQ3JlYXRlcyBhIGxvZ2dlciB2aWEgdGhlIGBkZWJ1Z2AgbGlicmFyeSB3aG9zZSBsb2cgbWVzc2FnZXMgd2lsbCBiZSB0YWdnZWRcbiAqIHVzaW5nIHRoZSBuYW1lIG9mIHlvdXIgcHJvamVjdC4gQnkgZGVmYXVsdCwgc3VjaCBtZXNzYWdlcyB3aWxsIGJlXG4gKiBzdXBwcmVzc2VkLCBidXQgeW91IGNhbiByZXZlYWwgdGhlbSBieSBzZXR0aW5nIHRoZSBgREVCVUdgIGVudmlyb25tZW50XG4gKiB2YXJpYWJsZSB0byBgbWV0YW1hc2s6PHByb2plY3ROYW1lPmAuIFlvdSBjYW4gYWxzbyBzZXQgdGhpcyB2YXJpYWJsZSB0b1xuICogYG1ldGFtYXNrOipgIGlmIHlvdSB3YW50IHRvIHNlZSBsb2cgbWVzc2FnZXMgZnJvbSBhbGwgTWV0YU1hc2sgcHJvamVjdHMgdGhhdFxuICogYXJlIGFsc28gdXNpbmcgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgdGhlaXIgbG9nZ2Vycy5cbiAqXG4gKiBAcGFyYW0gcHJvamVjdE5hbWUgLSBUaGUgbmFtZSBvZiB5b3VyIHByb2plY3QuIFRoaXMgc2hvdWxkIGJlIHRoZSBuYW1lIG9mXG4gKiB5b3VyIE5QTSBwYWNrYWdlIGlmIHlvdSdyZSBkZXZlbG9waW5nIG9uZS5cbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGBkZWJ1Z2AuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3RMb2dnZXIocHJvamVjdE5hbWUpIHtcbiAgICByZXR1cm4gZ2xvYmFsTG9nZ2VyLmV4dGVuZChwcm9qZWN0TmFtZSk7XG59XG5leHBvcnRzLmNyZWF0ZVByb2plY3RMb2dnZXIgPSBjcmVhdGVQcm9qZWN0TG9nZ2VyO1xuLyoqXG4gKiBDcmVhdGVzIGEgbG9nZ2VyIHZpYSB0aGUgYGRlYnVnYCBsaWJyYXJ5IHdoaWNoIGlzIGRlcml2ZWQgZnJvbSB0aGUgbG9nZ2VyIGZvclxuICogdGhlIHdob2xlIHByb2plY3Qgd2hvc2UgbG9nIG1lc3NhZ2VzIHdpbGwgYmUgdGFnZ2VkIHVzaW5nIHRoZSBuYW1lIG9mIHlvdXJcbiAqIG1vZHVsZS4gQnkgZGVmYXVsdCwgc3VjaCBtZXNzYWdlcyB3aWxsIGJlIHN1cHByZXNzZWQsIGJ1dCB5b3UgY2FuIHJldmVhbCB0aGVtXG4gKiBieSBzZXR0aW5nIHRoZSBgREVCVUdgIGVudmlyb25tZW50IHZhcmlhYmxlIHRvXG4gKiBgbWV0YW1hc2s6PHByb2plY3ROYW1lPjo8bW9kdWxlTmFtZT5gLiBZb3UgY2FuIGFsc28gc2V0IHRoaXMgdmFyaWFibGUgdG9cbiAqIGBtZXRhbWFzazo8cHJvamVjdE5hbWU+OipgIGlmIHlvdSB3YW50IHRvIHNlZSBsb2cgbWVzc2FnZXMgZnJvbSB0aGUgcHJvamVjdCxcbiAqIG9yIGBtZXRhbWFzazoqYCBpZiB5b3Ugd2FudCB0byBzZWUgbG9nIG1lc3NhZ2VzIGZyb20gYWxsIE1ldGFNYXNrIHByb2plY3RzLlxuICpcbiAqIEBwYXJhbSBwcm9qZWN0TG9nZ2VyIC0gVGhlIGxvZ2dlciBjcmVhdGVkIHZpYSB7QGxpbmsgY3JlYXRlUHJvamVjdExvZ2dlcn0uXG4gKiBAcGFyYW0gbW9kdWxlTmFtZSAtIFRoZSBuYW1lIG9mIHlvdXIgbW9kdWxlLiBZb3UgY291bGQgdXNlIHRoZSBuYW1lIG9mIHRoZVxuICogZmlsZSB3aGVyZSB5b3UncmUgdXNpbmcgdGhpcyBsb2dnZXIgb3Igc29tZSBvdGhlciBuYW1lLlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYGRlYnVnYC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTW9kdWxlTG9nZ2VyKHByb2plY3RMb2dnZXIsIG1vZHVsZU5hbWUpIHtcbiAgICByZXR1cm4gcHJvamVjdExvZ2dlci5leHRlbmQobW9kdWxlTmFtZSk7XG59XG5leHBvcnRzLmNyZWF0ZU1vZHVsZUxvZ2dlciA9IGNyZWF0ZU1vZHVsZUxvZ2dlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dpbmcuanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZU1vZHVsZUxvZ2dlciIsImNyZWF0ZVByb2plY3RMb2dnZXIiLCJkZWJ1Z18xIiwicmVxdWlyZSIsImdsb2JhbExvZ2dlciIsImRlZmF1bHQiLCJwcm9qZWN0TmFtZSIsImV4dGVuZCIsInByb2plY3RMb2dnZXIiLCJtb2R1bGVOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/logging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/misc.js":
/*!***************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/misc.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */ function isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */ function isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */ function isObject(value) {\n    return Boolean(value) && typeof value === \"object\" && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */ const hasProperty = (objectToCheck, name)=>Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */ var JsonSize;\n(function(JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */ exports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */ function isPlainObject(value) {\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while(Object.getPrototypeOf(proto) !== null){\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    } catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */ function isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */ function calculateStringSize(value) {\n    var _a;\n    const size = value.split(\"\").reduce((total, character)=>{\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + ((_a = value.match(exports.ESCAPE_CHARACTERS_REGEXP)) !== null && _a !== void 0 ? _a : []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */ function calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize; //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/number.js":
/*!*****************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/number.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = __webpack_require__(/*! ./assert */ \"(ssr)/./node_modules/@metamask/utils/dist/assert.js\");\nconst hex_1 = __webpack_require__(/*! ./hex */ \"(ssr)/./node_modules/@metamask/utils/dist/hex.js\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */ const numberToHex = (value)=>{\n    (0, assert_1.assert)(typeof value === \"number\", \"Value must be a number.\");\n    (0, assert_1.assert)(value >= 0, \"Value must be a non-negative number.\");\n    (0, assert_1.assert)(Number.isSafeInteger(value), \"Value is not a safe integer. Use `bigIntToHex` instead.\");\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */ const bigIntToHex = (value)=>{\n    (0, assert_1.assert)(typeof value === \"bigint\", \"Value must be a bigint.\");\n    (0, assert_1.assert)(value >= 0, \"Value must be a non-negative bigint.\");\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */ const hexToNumber = (value)=>{\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), \"Value is not a safe integer. Use `hexToBigInt` instead.\");\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */ const hexToBigInt = (value)=>{\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt; //# sourceMappingURL=number.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvbnVtYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0EsbUJBQW1CLEdBQUdBLG1CQUFtQixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQzdGLE1BQU1NLFdBQVdDLG1CQUFPQSxDQUFDLHFFQUFVO0FBQ25DLE1BQU1DLFFBQVFELG1CQUFPQSxDQUFDLCtEQUFPO0FBQzdCOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ0QsTUFBTUYsY0FBYyxDQUFDSjtJQUNoQixJQUFHSyxTQUFTRyxNQUFNLEVBQUUsT0FBT1IsVUFBVSxVQUFVO0lBQy9DLElBQUdLLFNBQVNHLE1BQU0sRUFBRVIsU0FBUyxHQUFHO0lBQ2hDLElBQUdLLFNBQVNHLE1BQU0sRUFBRUMsT0FBT0MsYUFBYSxDQUFDVixRQUFRO0lBQ2xELE9BQU8sQ0FBQyxHQUFHTyxNQUFNSSxLQUFLLEVBQUVYLE1BQU1ZLFFBQVEsQ0FBQztBQUMzQztBQUNBYixtQkFBbUIsR0FBR0s7QUFDdEI7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0QsTUFBTUQsY0FBYyxDQUFDSDtJQUNoQixJQUFHSyxTQUFTRyxNQUFNLEVBQUUsT0FBT1IsVUFBVSxVQUFVO0lBQy9DLElBQUdLLFNBQVNHLE1BQU0sRUFBRVIsU0FBUyxHQUFHO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHTyxNQUFNSSxLQUFLLEVBQUVYLE1BQU1ZLFFBQVEsQ0FBQztBQUMzQztBQUNBYixtQkFBbUIsR0FBR0k7QUFDdEI7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxHQUNELE1BQU1ELGNBQWMsQ0FBQ0Y7SUFDaEIsSUFBR08sTUFBTU0saUJBQWlCLEVBQUViO0lBQzdCLDJFQUEyRTtJQUMzRSxrRUFBa0U7SUFDbEUsTUFBTWMsY0FBY0MsU0FBU2YsT0FBTztJQUNuQyxJQUFHSyxTQUFTRyxNQUFNLEVBQUVDLE9BQU9DLGFBQWEsQ0FBQ0ksY0FBYztJQUN4RCxPQUFPQTtBQUNYO0FBQ0FmLG1CQUFtQixHQUFHRztBQUN0Qjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDRCxNQUFNRCxjQUFjLENBQUNEO0lBQ2hCLElBQUdPLE1BQU1NLGlCQUFpQixFQUFFYjtJQUM3QiwyRUFBMkU7SUFDM0UsT0FBT2dCLE9BQU8sQ0FBQyxHQUFHVCxNQUFNSSxLQUFLLEVBQUVYO0FBQ25DO0FBQ0FELG1CQUFtQixHQUFHRSxhQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvZGlzdC9udW1iZXIuanM/ZGMwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGV4VG9CaWdJbnQgPSBleHBvcnRzLmhleFRvTnVtYmVyID0gZXhwb3J0cy5iaWdJbnRUb0hleCA9IGV4cG9ydHMubnVtYmVyVG9IZXggPSB2b2lkIDA7XG5jb25zdCBhc3NlcnRfMSA9IHJlcXVpcmUoXCIuL2Fzc2VydFwiKTtcbmNvbnN0IGhleF8xID0gcmVxdWlyZShcIi4vaGV4XCIpO1xuLyoqXG4gKiBDb252ZXJ0IGEgbnVtYmVyIHRvIGEgaGV4YWRlY2ltYWwgc3RyaW5nLiBUaGlzIHZlcmlmaWVzIHRoYXQgdGhlIG51bWJlciBpcyBhXG4gKiBub24tbmVnYXRpdmUgc2FmZSBpbnRlZ2VyLlxuICpcbiAqIFRvIGNvbnZlcnQgYSBgYmlnaW50YCB0byBhIGhleGFkZWNpbWFsIHN0cmluZyBpbnN0ZWFkLCB1c2VcbiAqIHtAbGluayBiaWdJbnRUb0hleH0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIG51bWJlclRvSGV4KDApOyAvLyAnMHgwJ1xuICogbnVtYmVyVG9IZXgoMSk7IC8vICcweDEnXG4gKiBudW1iZXJUb0hleCgxNik7IC8vICcweDEwJ1xuICogYGBgXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQgdG8gYSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiBAcmV0dXJucyBUaGUgaGV4YWRlY2ltYWwgc3RyaW5nLCB3aXRoIHRoZSBcIjB4XCItcHJlZml4LlxuICogQHRocm93cyBJZiB0aGUgbnVtYmVyIGlzIG5vdCBhIG5vbi1uZWdhdGl2ZSBzYWZlIGludGVnZXIuXG4gKi9cbmNvbnN0IG51bWJlclRvSGV4ID0gKHZhbHVlKSA9PiB7XG4gICAgKDAsIGFzc2VydF8xLmFzc2VydCkodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJywgJ1ZhbHVlIG11c3QgYmUgYSBudW1iZXIuJyk7XG4gICAgKDAsIGFzc2VydF8xLmFzc2VydCkodmFsdWUgPj0gMCwgJ1ZhbHVlIG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLicpO1xuICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKE51bWJlci5pc1NhZmVJbnRlZ2VyKHZhbHVlKSwgJ1ZhbHVlIGlzIG5vdCBhIHNhZmUgaW50ZWdlci4gVXNlIGBiaWdJbnRUb0hleGAgaW5zdGVhZC4nKTtcbiAgICByZXR1cm4gKDAsIGhleF8xLmFkZDB4KSh2YWx1ZS50b1N0cmluZygxNikpO1xufTtcbmV4cG9ydHMubnVtYmVyVG9IZXggPSBudW1iZXJUb0hleDtcbi8qKlxuICogQ29udmVydCBhIGBiaWdpbnRgIHRvIGEgaGV4YWRlY2ltYWwgc3RyaW5nLiBUaGlzIHZlcmlmaWVzIHRoYXQgdGhlIGBiaWdpbnRgXG4gKiBpcyBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLlxuICpcbiAqIFRvIGNvbnZlcnQgYSBudW1iZXIgdG8gYSBoZXhhZGVjaW1hbCBzdHJpbmcgaW5zdGVhZCwgdXNlIHtAbGluayBudW1iZXJUb0hleH0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGJpZ0ludFRvSGV4KDBuKTsgLy8gJzB4MCdcbiAqIGJpZ0ludFRvSGV4KDFuKTsgLy8gJzB4MSdcbiAqIGJpZ0ludFRvSGV4KDE2bik7IC8vICcweDEwJ1xuICogYGBgXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgYGJpZ2ludGAgdG8gY29udmVydCB0byBhIGhleGFkZWNpbWFsIHN0cmluZy5cbiAqIEByZXR1cm5zIFRoZSBoZXhhZGVjaW1hbCBzdHJpbmcsIHdpdGggdGhlIFwiMHhcIi1wcmVmaXguXG4gKiBAdGhyb3dzIElmIHRoZSBgYmlnaW50YCBpcyBub3QgYSBub24tbmVnYXRpdmUgaW50ZWdlci5cbiAqL1xuY29uc3QgYmlnSW50VG9IZXggPSAodmFsdWUpID0+IHtcbiAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KSh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnLCAnVmFsdWUgbXVzdCBiZSBhIGJpZ2ludC4nKTtcbiAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KSh2YWx1ZSA+PSAwLCAnVmFsdWUgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBiaWdpbnQuJyk7XG4gICAgcmV0dXJuICgwLCBoZXhfMS5hZGQweCkodmFsdWUudG9TdHJpbmcoMTYpKTtcbn07XG5leHBvcnRzLmJpZ0ludFRvSGV4ID0gYmlnSW50VG9IZXg7XG4vKipcbiAqIENvbnZlcnQgYSBoZXhhZGVjaW1hbCBzdHJpbmcgdG8gYSBudW1iZXIuIFRoaXMgdmVyaWZpZXMgdGhhdCB0aGUgc3RyaW5nIGlzIGFcbiAqIHZhbGlkIGhleCBzdHJpbmcsIGFuZCB0aGF0IHRoZSByZXN1bHRpbmcgbnVtYmVyIGlzIGEgc2FmZSBpbnRlZ2VyLiBCb3RoXG4gKiBcIjB4XCItcHJlZml4ZWQgYW5kIHVucHJlZml4ZWQgc3RyaW5ncyBhcmUgc3VwcG9ydGVkLlxuICpcbiAqIFRvIGNvbnZlcnQgYSBoZXhhZGVjaW1hbCBzdHJpbmcgdG8gYSBgYmlnaW50YCBpbnN0ZWFkLCB1c2VcbiAqIHtAbGluayBoZXhUb0JpZ0ludH0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGhleFRvTnVtYmVyKCcweDAnKTsgLy8gMFxuICogaGV4VG9OdW1iZXIoJzB4MScpOyAvLyAxXG4gKiBoZXhUb051bWJlcignMHgxMCcpOyAvLyAxNlxuICogYGBgXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgaGV4YWRlY2ltYWwgc3RyaW5nIHRvIGNvbnZlcnQgdG8gYSBudW1iZXIuXG4gKiBAcmV0dXJucyBUaGUgbnVtYmVyLlxuICogQHRocm93cyBJZiB0aGUgdmFsdWUgaXMgbm90IGEgdmFsaWQgaGV4YWRlY2ltYWwgc3RyaW5nLCBvciBpZiB0aGUgcmVzdWx0aW5nXG4gKiBudW1iZXIgaXMgbm90IGEgc2FmZSBpbnRlZ2VyLlxuICovXG5jb25zdCBoZXhUb051bWJlciA9ICh2YWx1ZSkgPT4ge1xuICAgICgwLCBoZXhfMS5hc3NlcnRJc0hleFN0cmluZykodmFsdWUpO1xuICAgIC8vIGBwYXJzZUludGAgYWNjZXB0cyB2YWx1ZXMgd2l0aG91dCB0aGUgXCIweFwiLXByZWZpeCwgd2hlcmVhcyBgTnVtYmVyYCBkb2VzXG4gICAgLy8gbm90LiBVc2luZyB0aGlzIGlzIHNsaWdodGx5IGZhc3RlciB0aGFuIGBOdW1iZXIoYWRkMHgodmFsdWUpKWAuXG4gICAgY29uc3QgbnVtYmVyVmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTYpO1xuICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlclZhbHVlKSwgJ1ZhbHVlIGlzIG5vdCBhIHNhZmUgaW50ZWdlci4gVXNlIGBoZXhUb0JpZ0ludGAgaW5zdGVhZC4nKTtcbiAgICByZXR1cm4gbnVtYmVyVmFsdWU7XG59O1xuZXhwb3J0cy5oZXhUb051bWJlciA9IGhleFRvTnVtYmVyO1xuLyoqXG4gKiBDb252ZXJ0IGEgaGV4YWRlY2ltYWwgc3RyaW5nIHRvIGEgYGJpZ2ludGAuIFRoaXMgdmVyaWZpZXMgdGhhdCB0aGUgc3RyaW5nIGlzXG4gKiBhIHZhbGlkIGhleCBzdHJpbmcuIEJvdGggXCIweFwiLXByZWZpeGVkIGFuZCB1bnByZWZpeGVkIHN0cmluZ3MgYXJlIHN1cHBvcnRlZC5cbiAqXG4gKiBUbyBjb252ZXJ0IGEgaGV4YWRlY2ltYWwgc3RyaW5nIHRvIGEgbnVtYmVyIGluc3RlYWQsIHVzZSB7QGxpbmsgaGV4VG9OdW1iZXJ9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBoZXhUb0JpZ0ludCgnMHgwJyk7IC8vIDBuXG4gKiBoZXhUb0JpZ0ludCgnMHgxJyk7IC8vIDFuXG4gKiBoZXhUb0JpZ0ludCgnMHgxMCcpOyAvLyAxNm5cbiAqIGBgYFxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGhleGFkZWNpbWFsIHN0cmluZyB0byBjb252ZXJ0IHRvIGEgYGJpZ2ludGAuXG4gKiBAcmV0dXJucyBUaGUgYGJpZ2ludGAuXG4gKiBAdGhyb3dzIElmIHRoZSB2YWx1ZSBpcyBub3QgYSB2YWxpZCBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKi9cbmNvbnN0IGhleFRvQmlnSW50ID0gKHZhbHVlKSA9PiB7XG4gICAgKDAsIGhleF8xLmFzc2VydElzSGV4U3RyaW5nKSh2YWx1ZSk7XG4gICAgLy8gVGhlIGBCaWdJbnRgIGNvbnN0cnVjdG9yIHJlcXVpcmVzIHRoZSBcIjB4XCItcHJlZml4IHRvIHBhcnNlIGEgaGV4IHN0cmluZy5cbiAgICByZXR1cm4gQmlnSW50KCgwLCBoZXhfMS5hZGQweCkodmFsdWUpKTtcbn07XG5leHBvcnRzLmhleFRvQmlnSW50ID0gaGV4VG9CaWdJbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udW1iZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaGV4VG9CaWdJbnQiLCJoZXhUb051bWJlciIsImJpZ0ludFRvSGV4IiwibnVtYmVyVG9IZXgiLCJhc3NlcnRfMSIsInJlcXVpcmUiLCJoZXhfMSIsImFzc2VydCIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJhZGQweCIsInRvU3RyaW5nIiwiYXNzZXJ0SXNIZXhTdHJpbmciLCJudW1iZXJWYWx1ZSIsInBhcnNlSW50IiwiQmlnSW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/opaque.js":
/*!*****************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/opaque.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n})); //# sourceMappingURL=opaque.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3Qvb3BhcXVlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDLEVBQzdELGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9kaXN0L29wYXF1ZS5qcz84NTY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BhcXVlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/opaque.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/time.js":
/*!***************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/time.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */ var Duration;\n(function(Duration) {\n    /**\n     * A millisecond.\n     */ Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */ Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */ Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */ Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */ Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */ Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */ Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number)=>Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name)=>{\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */ function inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, \"count\");\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */ function timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, \"timestamp\");\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince; //# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvdGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLHNCQUFzQixHQUFHQSxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3JFOztDQUVDLEdBQ0QsSUFBSUk7QUFDSCxVQUFVQSxRQUFRO0lBQ2Y7O0tBRUMsR0FDREEsUUFBUSxDQUFDQSxRQUFRLENBQUMsY0FBYyxHQUFHLEVBQUUsR0FBRztJQUN4Qzs7S0FFQyxHQUNEQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxHQUFHO0lBQ3RDOztLQUVDLEdBQ0RBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLFNBQVMsR0FBRyxNQUFNLEdBQUc7SUFDdkM7O0tBRUMsR0FDREEsUUFBUSxDQUFDQSxRQUFRLENBQUMsT0FBTyxHQUFHLFFBQVEsR0FBRztJQUN2Qzs7S0FFQyxHQUNEQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHO0lBQ3ZDOztLQUVDLEdBQ0RBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLE9BQU8sR0FBRyxVQUFVLEdBQUc7SUFDekM7O0tBRUMsR0FDREEsUUFBUSxDQUFDQSxRQUFRLENBQUMsT0FBTyxHQUFHLFlBQVksR0FBRztBQUMvQyxHQUFHQSxXQUFXSixRQUFRSSxRQUFRLElBQUtKLENBQUFBLGdCQUFnQixHQUFHLENBQUM7QUFDdkQsTUFBTUssdUJBQXVCLENBQUNDLFNBQVdDLE9BQU9DLFNBQVMsQ0FBQ0YsV0FBV0EsVUFBVTtBQUMvRSxNQUFNRyw2QkFBNkIsQ0FBQ0gsUUFBUUk7SUFDeEMsSUFBSSxDQUFDTCxxQkFBcUJDLFNBQVM7UUFDL0IsTUFBTSxJQUFJSyxNQUFNLENBQUMsQ0FBQyxFQUFFRCxLQUFLLDZDQUE2QyxFQUFFSixPQUFPLEVBQUUsQ0FBQztJQUN0RjtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU0gsZUFBZVMsS0FBSyxFQUFFQyxRQUFRO0lBQ25DSiwyQkFBMkJHLE9BQU87SUFDbEMsT0FBT0EsUUFBUUM7QUFDbkI7QUFDQWIsc0JBQXNCLEdBQUdHO0FBQ3pCOzs7OztDQUtDLEdBQ0QsU0FBU0QsVUFBVVksU0FBUztJQUN4QkwsMkJBQTJCSyxXQUFXO0lBQ3RDLE9BQU9DLEtBQUtDLEdBQUcsS0FBS0Y7QUFDeEI7QUFDQWQsaUJBQWlCLEdBQUdFLFdBQ3BCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9kaXN0L3RpbWUuanM/ZWQwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGltZVNpbmNlID0gZXhwb3J0cy5pbk1pbGxpc2Vjb25kcyA9IGV4cG9ydHMuRHVyYXRpb24gPSB2b2lkIDA7XG4vKipcbiAqIENvbW1vbiBkdXJhdGlvbiBjb25zdGFudHMsIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xudmFyIER1cmF0aW9uO1xuKGZ1bmN0aW9uIChEdXJhdGlvbikge1xuICAgIC8qKlxuICAgICAqIEEgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgRHVyYXRpb25bRHVyYXRpb25bXCJNaWxsaXNlY29uZFwiXSA9IDFdID0gXCJNaWxsaXNlY29uZFwiO1xuICAgIC8qKlxuICAgICAqIEEgc2Vjb25kLCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICovXG4gICAgRHVyYXRpb25bRHVyYXRpb25bXCJTZWNvbmRcIl0gPSAxMDAwXSA9IFwiU2Vjb25kXCI7XG4gICAgLyoqXG4gICAgICogQSBtaW51dGUsIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKi9cbiAgICBEdXJhdGlvbltEdXJhdGlvbltcIk1pbnV0ZVwiXSA9IDYwMDAwXSA9IFwiTWludXRlXCI7XG4gICAgLyoqXG4gICAgICogQW4gaG91ciwgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqL1xuICAgIER1cmF0aW9uW0R1cmF0aW9uW1wiSG91clwiXSA9IDM2MDAwMDBdID0gXCJIb3VyXCI7XG4gICAgLyoqXG4gICAgICogQSBkYXksIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKi9cbiAgICBEdXJhdGlvbltEdXJhdGlvbltcIkRheVwiXSA9IDg2NDAwMDAwXSA9IFwiRGF5XCI7XG4gICAgLyoqXG4gICAgICogQSB3ZWVrLCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICovXG4gICAgRHVyYXRpb25bRHVyYXRpb25bXCJXZWVrXCJdID0gNjA0ODAwMDAwXSA9IFwiV2Vla1wiO1xuICAgIC8qKlxuICAgICAqIEEgeWVhciwgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqL1xuICAgIER1cmF0aW9uW0R1cmF0aW9uW1wiWWVhclwiXSA9IDMxNTM2MDAwMDAwXSA9IFwiWWVhclwiO1xufSkoRHVyYXRpb24gPSBleHBvcnRzLkR1cmF0aW9uIHx8IChleHBvcnRzLkR1cmF0aW9uID0ge30pKTtcbmNvbnN0IGlzTm9uTmVnYXRpdmVJbnRlZ2VyID0gKG51bWJlcikgPT4gTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpICYmIG51bWJlciA+PSAwO1xuY29uc3QgYXNzZXJ0SXNOb25OZWdhdGl2ZUludGVnZXIgPSAobnVtYmVyLCBuYW1lKSA9PiB7XG4gICAgaWYgKCFpc05vbk5lZ2F0aXZlSW50ZWdlcihudW1iZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke25hbWV9XCIgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLiBSZWNlaXZlZDogXCIke251bWJlcn1cIi5gKTtcbiAgICB9XG59O1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBtaWxsaXNlY29uZCB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB1bml0cyBvZiB0aW1lLlxuICpcbiAqIEBwYXJhbSBjb3VudCAtIFRoZSBudW1iZXIgb2YgdW5pdHMgb2YgdGltZS5cbiAqIEBwYXJhbSBkdXJhdGlvbiAtIFRoZSB1bml0IG9mIHRpbWUgdG8gY291bnQuXG4gKiBAcmV0dXJucyBUaGUgY291bnQgbXVsdGlwbGllZCBieSB0aGUgc3BlY2lmaWVkIGR1cmF0aW9uLlxuICovXG5mdW5jdGlvbiBpbk1pbGxpc2Vjb25kcyhjb3VudCwgZHVyYXRpb24pIHtcbiAgICBhc3NlcnRJc05vbk5lZ2F0aXZlSW50ZWdlcihjb3VudCwgJ2NvdW50Jyk7XG4gICAgcmV0dXJuIGNvdW50ICogZHVyYXRpb247XG59XG5leHBvcnRzLmluTWlsbGlzZWNvbmRzID0gaW5NaWxsaXNlY29uZHM7XG4vKipcbiAqIEdldHMgdGhlIG1pbGxpc2Vjb25kcyBzaW5jZSBhIHBhcnRpY3VsYXIgVW5peCBlcG9jaCB0aW1lc3RhbXAuXG4gKlxuICogQHBhcmFtIHRpbWVzdGFtcCAtIEEgVW5peCBtaWxsaXNlY29uZCB0aW1lc3RhbXAuXG4gKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBlbGFwc2VkIHNpbmNlIHRoZSBzcGVjaWZpZWQgdGltZXN0YW1wLlxuICovXG5mdW5jdGlvbiB0aW1lU2luY2UodGltZXN0YW1wKSB7XG4gICAgYXNzZXJ0SXNOb25OZWdhdGl2ZUludGVnZXIodGltZXN0YW1wLCAndGltZXN0YW1wJyk7XG4gICAgcmV0dXJuIERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG59XG5leHBvcnRzLnRpbWVTaW5jZSA9IHRpbWVTaW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidGltZVNpbmNlIiwiaW5NaWxsaXNlY29uZHMiLCJEdXJhdGlvbiIsImlzTm9uTmVnYXRpdmVJbnRlZ2VyIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiYXNzZXJ0SXNOb25OZWdhdGl2ZUludGVnZXIiLCJuYW1lIiwiRXJyb3IiLCJjb3VudCIsImR1cmF0aW9uIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/dist/versions.js":
/*!*******************************************************!*\
  !*** ./node_modules/@metamask/utils/dist/versions.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst semver_1 = __webpack_require__(/*! semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/index.js\");\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs\");\nconst assert_1 = __webpack_require__(/*! ./assert */ \"(ssr)/./node_modules/@metamask/utils/dist/assert.js\");\n/**\n * A struct for validating a version string.\n */ exports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), \"Version\", (value)=>{\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), \"Version range\", (value)=>{\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */ function isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */ function isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */ function assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */ function assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */ function gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */ function gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */ function satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange; //# sourceMappingURL=versions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL2Rpc3QvdmVyc2lvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHQSxlQUFlLEdBQUdBLGlCQUFpQixHQUFHQSwyQkFBMkIsR0FBR0EsNkJBQTZCLEdBQUdBLDBCQUEwQixHQUFHQSw0QkFBNEIsR0FBR0EsMEJBQTBCLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDMVAsTUFBTVcsV0FBV0MsbUJBQU9BLENBQUMsaUZBQVE7QUFDakMsTUFBTUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQyxpR0FBYTtBQUMzQyxNQUFNRSxXQUFXRixtQkFBT0EsQ0FBQyxxRUFBVTtBQUNuQzs7Q0FFQyxHQUNEWixxQkFBcUIsR0FBRyxDQUFDLEdBQUdhLGNBQWNFLE1BQU0sRUFBRSxDQUFDLEdBQUdGLGNBQWNHLE1BQU0sS0FBSyxXQUFXLENBQUNmO0lBQ3ZGLElBQUksQ0FBQyxHQUFHVSxTQUFTTSxLQUFLLEVBQUVoQixXQUFXLE1BQU07UUFDckMsT0FBTyxDQUFDLDhCQUE4QixFQUFFQSxNQUFNLENBQUMsQ0FBQztJQUNwRDtJQUNBLE9BQU87QUFDWDtBQUNBRCwwQkFBMEIsR0FBRyxDQUFDLEdBQUdhLGNBQWNFLE1BQU0sRUFBRSxDQUFDLEdBQUdGLGNBQWNHLE1BQU0sS0FBSyxpQkFBaUIsQ0FBQ2Y7SUFDbEcsSUFBSSxDQUFDLEdBQUdVLFNBQVNPLFVBQVUsRUFBRWpCLFdBQVcsTUFBTTtRQUMxQyxPQUFPLENBQUMsNEJBQTRCLEVBQUVBLE1BQU0sQ0FBQyxDQUFDO0lBQ2xEO0lBQ0EsT0FBTztBQUNYO0FBQ0E7Ozs7O0NBS0MsR0FDRCxTQUFTTyxxQkFBcUJXLE9BQU87SUFDakMsT0FBTyxDQUFDLEdBQUdOLGNBQWNPLEVBQUUsRUFBRUQsU0FBU25CLFFBQVFVLGFBQWE7QUFDL0Q7QUFDQVYsNEJBQTRCLEdBQUdRO0FBQy9COzs7OztDQUtDLEdBQ0QsU0FBU0QsbUJBQW1CYyxZQUFZO0lBQ3BDLE9BQU8sQ0FBQyxHQUFHUixjQUFjTyxFQUFFLEVBQUVDLGNBQWNyQixRQUFRUyxrQkFBa0I7QUFDekU7QUFDQVQsMEJBQTBCLEdBQUdPO0FBQzdCOzs7O0NBSUMsR0FDRCxTQUFTRCxzQkFBc0JhLE9BQU87SUFDakMsSUFBR0wsU0FBU1EsWUFBWSxFQUFFSCxTQUFTbkIsUUFBUVUsYUFBYTtBQUM3RDtBQUNBViw2QkFBNkIsR0FBR007QUFDaEM7Ozs7Q0FJQyxHQUNELFNBQVNELG9CQUFvQmtCLEtBQUs7SUFDN0IsSUFBR1QsU0FBU1EsWUFBWSxFQUFFQyxPQUFPdkIsUUFBUVMsa0JBQWtCO0FBQ2hFO0FBQ0FULDJCQUEyQixHQUFHSztBQUM5Qjs7Ozs7O0NBTUMsR0FDRCxTQUFTRCxVQUFVb0IsUUFBUSxFQUFFQyxRQUFRO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHZCxTQUFTZSxFQUFFLEVBQUVGLFVBQVVDO0FBQ3RDO0FBQ0F6QixpQkFBaUIsR0FBR0k7QUFDcEI7Ozs7OztDQU1DLEdBQ0QsU0FBU0QsUUFBUWdCLE9BQU8sRUFBRUksS0FBSztJQUMzQixPQUFPLENBQUMsR0FBR1osU0FBU2dCLEdBQUcsRUFBRVIsU0FBU0k7QUFDdEM7QUFDQXZCLGVBQWUsR0FBR0c7QUFDbEI7Ozs7OztDQU1DLEdBQ0QsU0FBU0Qsc0JBQXNCaUIsT0FBTyxFQUFFRSxZQUFZO0lBQ2hELE9BQU8sQ0FBQyxHQUFHVixTQUFTaUIsU0FBUyxFQUFFVCxTQUFTRSxjQUFjO1FBQ2xEUSxtQkFBbUI7SUFDdkI7QUFDSjtBQUNBN0IsNkJBQTZCLEdBQUdFLHVCQUNoQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvZGlzdC92ZXJzaW9ucy5qcz9kOWVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zYXRpc2ZpZXNWZXJzaW9uUmFuZ2UgPSBleHBvcnRzLmd0UmFuZ2UgPSBleHBvcnRzLmd0VmVyc2lvbiA9IGV4cG9ydHMuYXNzZXJ0SXNTZW1WZXJSYW5nZSA9IGV4cG9ydHMuYXNzZXJ0SXNTZW1WZXJWZXJzaW9uID0gZXhwb3J0cy5pc1ZhbGlkU2VtVmVyUmFuZ2UgPSBleHBvcnRzLmlzVmFsaWRTZW1WZXJWZXJzaW9uID0gZXhwb3J0cy5WZXJzaW9uUmFuZ2VTdHJ1Y3QgPSBleHBvcnRzLlZlcnNpb25TdHJ1Y3QgPSB2b2lkIDA7XG5jb25zdCBzZW12ZXJfMSA9IHJlcXVpcmUoXCJzZW12ZXJcIik7XG5jb25zdCBzdXBlcnN0cnVjdF8xID0gcmVxdWlyZShcInN1cGVyc3RydWN0XCIpO1xuY29uc3QgYXNzZXJ0XzEgPSByZXF1aXJlKFwiLi9hc3NlcnRcIik7XG4vKipcbiAqIEEgc3RydWN0IGZvciB2YWxpZGF0aW5nIGEgdmVyc2lvbiBzdHJpbmcuXG4gKi9cbmV4cG9ydHMuVmVyc2lvblN0cnVjdCA9ICgwLCBzdXBlcnN0cnVjdF8xLnJlZmluZSkoKDAsIHN1cGVyc3RydWN0XzEuc3RyaW5nKSgpLCAnVmVyc2lvbicsICh2YWx1ZSkgPT4ge1xuICAgIGlmICgoMCwgc2VtdmVyXzEudmFsaWQpKHZhbHVlKSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYEV4cGVjdGVkIFNlbVZlciB2ZXJzaW9uLCBnb3QgXCIke3ZhbHVlfVwiYDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59KTtcbmV4cG9ydHMuVmVyc2lvblJhbmdlU3RydWN0ID0gKDAsIHN1cGVyc3RydWN0XzEucmVmaW5lKSgoMCwgc3VwZXJzdHJ1Y3RfMS5zdHJpbmcpKCksICdWZXJzaW9uIHJhbmdlJywgKHZhbHVlKSA9PiB7XG4gICAgaWYgKCgwLCBzZW12ZXJfMS52YWxpZFJhbmdlKSh2YWx1ZSkgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGBFeHBlY3RlZCBTZW1WZXIgcmFuZ2UsIGdvdCBcIiR7dmFsdWV9XCJgO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIFNlbVZlciB2ZXJzaW9uIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB2ZXJzaW9uIC0gQSBwb3RlbnRpYWwgdmVyc2lvbi5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmVyc2lvbiBpcyB2YWxpZCwgYW5kIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkU2VtVmVyVmVyc2lvbih2ZXJzaW9uKSB7XG4gICAgcmV0dXJuICgwLCBzdXBlcnN0cnVjdF8xLmlzKSh2ZXJzaW9uLCBleHBvcnRzLlZlcnNpb25TdHJ1Y3QpO1xufVxuZXhwb3J0cy5pc1ZhbGlkU2VtVmVyVmVyc2lvbiA9IGlzVmFsaWRTZW1WZXJWZXJzaW9uO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIFNlbVZlciB2ZXJzaW9uIHJhbmdlIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB2ZXJzaW9uUmFuZ2UgLSBBIHBvdGVudGlhbCB2ZXJzaW9uIHJhbmdlLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSB2ZXJzaW9uIHJhbmdlIGlzIHZhbGlkLCBhbmQgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRTZW1WZXJSYW5nZSh2ZXJzaW9uUmFuZ2UpIHtcbiAgICByZXR1cm4gKDAsIHN1cGVyc3RydWN0XzEuaXMpKHZlcnNpb25SYW5nZSwgZXhwb3J0cy5WZXJzaW9uUmFuZ2VTdHJ1Y3QpO1xufVxuZXhwb3J0cy5pc1ZhbGlkU2VtVmVyUmFuZ2UgPSBpc1ZhbGlkU2VtVmVyUmFuZ2U7XG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIHZhbHVlIGlzIGEgdmFsaWQgY29uY3JldGUgU2VtVmVyIHZlcnNpb24uXG4gKlxuICogQHBhcmFtIHZlcnNpb24gLSBBIHBvdGVudGlhbCBTZW1WZXIgY29uY3JldGUgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0SXNTZW1WZXJWZXJzaW9uKHZlcnNpb24pIHtcbiAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0U3RydWN0KSh2ZXJzaW9uLCBleHBvcnRzLlZlcnNpb25TdHJ1Y3QpO1xufVxuZXhwb3J0cy5hc3NlcnRJc1NlbVZlclZlcnNpb24gPSBhc3NlcnRJc1NlbVZlclZlcnNpb247XG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIHZhbHVlIGlzIGEgdmFsaWQgU2VtVmVyIHJhbmdlLlxuICpcbiAqIEBwYXJhbSByYW5nZSAtIEEgcG90ZW50aWFsIFNlbVZlciByYW5nZS5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0SXNTZW1WZXJSYW5nZShyYW5nZSkge1xuICAgICgwLCBhc3NlcnRfMS5hc3NlcnRTdHJ1Y3QpKHJhbmdlLCBleHBvcnRzLlZlcnNpb25SYW5nZVN0cnVjdCk7XG59XG5leHBvcnRzLmFzc2VydElzU2VtVmVyUmFuZ2UgPSBhc3NlcnRJc1NlbVZlclJhbmdlO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIFNlbVZlciB2ZXJzaW9uIGlzIGdyZWF0ZXIgdGhhbiBhbm90aGVyLlxuICpcbiAqIEBwYXJhbSB2ZXJzaW9uMSAtIFRoZSBsZWZ0LWhhbmQgdmVyc2lvbi5cbiAqIEBwYXJhbSB2ZXJzaW9uMiAtIFRoZSByaWdodC1oYW5kIHZlcnNpb24uXG4gKiBAcmV0dXJucyBgdmVyc2lvbjEgPiB2ZXJzaW9uMmAuXG4gKi9cbmZ1bmN0aW9uIGd0VmVyc2lvbih2ZXJzaW9uMSwgdmVyc2lvbjIpIHtcbiAgICByZXR1cm4gKDAsIHNlbXZlcl8xLmd0KSh2ZXJzaW9uMSwgdmVyc2lvbjIpO1xufVxuZXhwb3J0cy5ndFZlcnNpb24gPSBndFZlcnNpb247XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgU2VtVmVyIHZlcnNpb24gaXMgZ3JlYXRlciB0aGFuIGFsbCBwb3NzaWJpbGl0aWVzIGluIGEgcmFuZ2UuXG4gKlxuICogQHBhcmFtIHZlcnNpb24gLSBBIFNlbXZWZXIgdmVyc2lvbi5cbiAqIEBwYXJhbSByYW5nZSAtIFRoZSByYW5nZSB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybnMgYHZlcnNpb24gPiByYW5nZWAuXG4gKi9cbmZ1bmN0aW9uIGd0UmFuZ2UodmVyc2lvbiwgcmFuZ2UpIHtcbiAgICByZXR1cm4gKDAsIHNlbXZlcl8xLmd0cikodmVyc2lvbiwgcmFuZ2UpO1xufVxuZXhwb3J0cy5ndFJhbmdlID0gZ3RSYW5nZTtcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgU2VtVmVyIHZlcnNpb24gc2F0aXNmaWVzIGEgU2VtVmVyIHJhbmdlLlxuICpcbiAqIEBwYXJhbSB2ZXJzaW9uIC0gVGhlIFNlbVZlciB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHBhcmFtIHZlcnNpb25SYW5nZSAtIFRoZSBTZW1WZXIgdmVyc2lvbiByYW5nZSB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybnMgV2hldGhlciB0aGUgdmVyc2lvbiBzYXRpc2ZpZWQgdGhlIHZlcnNpb24gcmFuZ2UuXG4gKi9cbmZ1bmN0aW9uIHNhdGlzZmllc1ZlcnNpb25SYW5nZSh2ZXJzaW9uLCB2ZXJzaW9uUmFuZ2UpIHtcbiAgICByZXR1cm4gKDAsIHNlbXZlcl8xLnNhdGlzZmllcykodmVyc2lvbiwgdmVyc2lvblJhbmdlLCB7XG4gICAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiB0cnVlLFxuICAgIH0pO1xufVxuZXhwb3J0cy5zYXRpc2ZpZXNWZXJzaW9uUmFuZ2UgPSBzYXRpc2ZpZXNWZXJzaW9uUmFuZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzYXRpc2ZpZXNWZXJzaW9uUmFuZ2UiLCJndFJhbmdlIiwiZ3RWZXJzaW9uIiwiYXNzZXJ0SXNTZW1WZXJSYW5nZSIsImFzc2VydElzU2VtVmVyVmVyc2lvbiIsImlzVmFsaWRTZW1WZXJSYW5nZSIsImlzVmFsaWRTZW1WZXJWZXJzaW9uIiwiVmVyc2lvblJhbmdlU3RydWN0IiwiVmVyc2lvblN0cnVjdCIsInNlbXZlcl8xIiwicmVxdWlyZSIsInN1cGVyc3RydWN0XzEiLCJhc3NlcnRfMSIsInJlZmluZSIsInN0cmluZyIsInZhbGlkIiwidmFsaWRSYW5nZSIsInZlcnNpb24iLCJpcyIsInZlcnNpb25SYW5nZSIsImFzc2VydFN0cnVjdCIsInJhbmdlIiwidmVyc2lvbjEiLCJ2ZXJzaW9uMiIsImd0IiwiZ3RyIiwic2F0aXNmaWVzIiwiaW5jbHVkZVByZXJlbGVhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/dist/versions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/comparator.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/classes/comparator.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ANY = Symbol(\"SemVer ANY\");\n// hoisted class for cyclic dependency\nclass Comparator {\n    static get ANY() {\n        return ANY;\n    }\n    constructor(comp, options){\n        options = parseOptions(options);\n        if (comp instanceof Comparator) {\n            if (comp.loose === !!options.loose) {\n                return comp;\n            } else {\n                comp = comp.value;\n            }\n        }\n        comp = comp.trim().split(/\\s+/).join(\" \");\n        debug(\"comparator\", comp, options);\n        this.options = options;\n        this.loose = !!options.loose;\n        this.parse(comp);\n        if (this.semver === ANY) {\n            this.value = \"\";\n        } else {\n            this.value = this.operator + this.semver.version;\n        }\n        debug(\"comp\", this);\n    }\n    parse(comp) {\n        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n        const m = comp.match(r);\n        if (!m) {\n            throw new TypeError(`Invalid comparator: ${comp}`);\n        }\n        this.operator = m[1] !== undefined ? m[1] : \"\";\n        if (this.operator === \"=\") {\n            this.operator = \"\";\n        }\n        // if it literally is just '>' or '' then allow anything.\n        if (!m[2]) {\n            this.semver = ANY;\n        } else {\n            this.semver = new SemVer(m[2], this.options.loose);\n        }\n    }\n    toString() {\n        return this.value;\n    }\n    test(version) {\n        debug(\"Comparator.test\", version, this.options.loose);\n        if (this.semver === ANY || version === ANY) {\n            return true;\n        }\n        if (typeof version === \"string\") {\n            try {\n                version = new SemVer(version, this.options);\n            } catch (er) {\n                return false;\n            }\n        }\n        return cmp(version, this.operator, this.semver, this.options);\n    }\n    intersects(comp, options) {\n        if (!(comp instanceof Comparator)) {\n            throw new TypeError(\"a Comparator is required\");\n        }\n        if (this.operator === \"\") {\n            if (this.value === \"\") {\n                return true;\n            }\n            return new Range(comp.value, options).test(this.value);\n        } else if (comp.operator === \"\") {\n            if (comp.value === \"\") {\n                return true;\n            }\n            return new Range(this.value, options).test(comp.semver);\n        }\n        options = parseOptions(options);\n        // Special cases where nothing can possibly be lower\n        if (options.includePrerelease && (this.value === \"<0.0.0-0\" || comp.value === \"<0.0.0-0\")) {\n            return false;\n        }\n        if (!options.includePrerelease && (this.value.startsWith(\"<0.0.0\") || comp.value.startsWith(\"<0.0.0\"))) {\n            return false;\n        }\n        // Same direction increasing (> or >=)\n        if (this.operator.startsWith(\">\") && comp.operator.startsWith(\">\")) {\n            return true;\n        }\n        // Same direction decreasing (< or <=)\n        if (this.operator.startsWith(\"<\") && comp.operator.startsWith(\"<\")) {\n            return true;\n        }\n        // same SemVer and both sides are inclusive (<= or >=)\n        if (this.semver.version === comp.semver.version && this.operator.includes(\"=\") && comp.operator.includes(\"=\")) {\n            return true;\n        }\n        // opposite directions less than\n        if (cmp(this.semver, \"<\", comp.semver, options) && this.operator.startsWith(\">\") && comp.operator.startsWith(\"<\")) {\n            return true;\n        }\n        // opposite directions greater than\n        if (cmp(this.semver, \">\", comp.semver, options) && this.operator.startsWith(\"<\") && comp.operator.startsWith(\">\")) {\n            return true;\n        }\n        return false;\n    }\n}\nmodule.exports = Comparator;\nconst parseOptions = __webpack_require__(/*! ../internal/parse-options */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/parse-options.js\");\nconst { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/re.js\");\nconst cmp = __webpack_require__(/*! ../functions/cmp */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/cmp.js\");\nconst debug = __webpack_require__(/*! ../internal/debug */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/debug.js\");\nconst SemVer = __webpack_require__(/*! ./semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst Range = __webpack_require__(/*! ./range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/comparator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/classes/range.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// hoisted class for cyclic dependency\n\nclass Range {\n    constructor(range, options){\n        options = parseOptions(options);\n        if (range instanceof Range) {\n            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n                return range;\n            } else {\n                return new Range(range.raw, options);\n            }\n        }\n        if (range instanceof Comparator) {\n            // just put it in the set and return\n            this.raw = range.value;\n            this.set = [\n                [\n                    range\n                ]\n            ];\n            this.format();\n            return this;\n        }\n        this.options = options;\n        this.loose = !!options.loose;\n        this.includePrerelease = !!options.includePrerelease;\n        // First reduce all whitespace as much as possible so we do not have to rely\n        // on potentially slow regexes like \\s*. This is then stored and used for\n        // future error messages as well.\n        this.raw = range.trim().split(/\\s+/).join(\" \");\n        // First, split on ||\n        this.set = this.raw.split(\"||\")// map the range to a 2d array of comparators\n        .map((r)=>this.parseRange(r.trim()))// throw out any comparator lists that are empty\n        // this generally means that it was not a valid range, which is allowed\n        // in loose mode, but will still throw if the WHOLE range is invalid.\n        .filter((c)=>c.length);\n        if (!this.set.length) {\n            throw new TypeError(`Invalid SemVer Range: ${this.raw}`);\n        }\n        // if we have any that are not the null set, throw out null sets.\n        if (this.set.length > 1) {\n            // keep the first one, in case they're all null sets\n            const first = this.set[0];\n            this.set = this.set.filter((c)=>!isNullSet(c[0]));\n            if (this.set.length === 0) {\n                this.set = [\n                    first\n                ];\n            } else if (this.set.length > 1) {\n                // if we have any that are *, then the range is just *\n                for (const c of this.set){\n                    if (c.length === 1 && isAny(c[0])) {\n                        this.set = [\n                            c\n                        ];\n                        break;\n                    }\n                }\n            }\n        }\n        this.format();\n    }\n    format() {\n        this.range = this.set.map((comps)=>comps.join(\" \").trim()).join(\"||\").trim();\n        return this.range;\n    }\n    toString() {\n        return this.range;\n    }\n    parseRange(range) {\n        // memoize range parsing for performance.\n        // this is a very hot path, and fully deterministic.\n        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);\n        const memoKey = memoOpts + \":\" + range;\n        const cached = cache.get(memoKey);\n        if (cached) {\n            return cached;\n        }\n        const loose = this.options.loose;\n        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n        debug(\"hyphen replace\", range);\n        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n        debug(\"comparator trim\", range);\n        // `~ 1.2.3` => `~1.2.3`\n        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);\n        debug(\"tilde trim\", range);\n        // `^ 1.2.3` => `^1.2.3`\n        range = range.replace(re[t.CARETTRIM], caretTrimReplace);\n        debug(\"caret trim\", range);\n        // At this point, the range is completely trimmed and\n        // ready to be split into comparators.\n        let rangeList = range.split(\" \").map((comp)=>parseComparator(comp, this.options)).join(\" \").split(/\\s+/)// >=0.0.0 is equivalent to *\n        .map((comp)=>replaceGTE0(comp, this.options));\n        if (loose) {\n            // in loose mode, throw out any that are not valid comparators\n            rangeList = rangeList.filter((comp)=>{\n                debug(\"loose invalid filter\", comp, this.options);\n                return !!comp.match(re[t.COMPARATORLOOSE]);\n            });\n        }\n        debug(\"range list\", rangeList);\n        // if any comparators are the null set, then replace with JUST null set\n        // if more than one comparator, remove any * comparators\n        // also, don't include the same comparator more than once\n        const rangeMap = new Map();\n        const comparators = rangeList.map((comp)=>new Comparator(comp, this.options));\n        for (const comp of comparators){\n            if (isNullSet(comp)) {\n                return [\n                    comp\n                ];\n            }\n            rangeMap.set(comp.value, comp);\n        }\n        if (rangeMap.size > 1 && rangeMap.has(\"\")) {\n            rangeMap.delete(\"\");\n        }\n        const result = [\n            ...rangeMap.values()\n        ];\n        cache.set(memoKey, result);\n        return result;\n    }\n    intersects(range, options) {\n        if (!(range instanceof Range)) {\n            throw new TypeError(\"a Range is required\");\n        }\n        return this.set.some((thisComparators)=>{\n            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators)=>{\n                return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator)=>{\n                    return rangeComparators.every((rangeComparator)=>{\n                        return thisComparator.intersects(rangeComparator, options);\n                    });\n                });\n            });\n        });\n    }\n    // if ANY of the sets match ALL of its comparators, then pass\n    test(version) {\n        if (!version) {\n            return false;\n        }\n        if (typeof version === \"string\") {\n            try {\n                version = new SemVer(version, this.options);\n            } catch (er) {\n                return false;\n            }\n        }\n        for(let i = 0; i < this.set.length; i++){\n            if (testSet(this.set[i], version, this.options)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nmodule.exports = Range;\nconst LRU = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/lru-cache/index.js\");\nconst cache = new LRU({\n    max: 1000\n});\nconst parseOptions = __webpack_require__(/*! ../internal/parse-options */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/parse-options.js\");\nconst Comparator = __webpack_require__(/*! ./comparator */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/comparator.js\");\nconst debug = __webpack_require__(/*! ../internal/debug */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/debug.js\");\nconst SemVer = __webpack_require__(/*! ./semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst { safeRe: re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = __webpack_require__(/*! ../internal/re */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/re.js\");\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __webpack_require__(/*! ../internal/constants */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/constants.js\");\nconst isNullSet = (c)=>c.value === \"<0.0.0-0\";\nconst isAny = (c)=>c.value === \"\";\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options)=>{\n    let result = true;\n    const remainingComparators = comparators.slice();\n    let testComparator = remainingComparators.pop();\n    while(result && remainingComparators.length){\n        result = remainingComparators.every((otherComparator)=>{\n            return testComparator.intersects(otherComparator, options);\n        });\n        testComparator = remainingComparators.pop();\n    }\n    return result;\n};\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options)=>{\n    debug(\"comp\", comp, options);\n    comp = replaceCarets(comp, options);\n    debug(\"caret\", comp);\n    comp = replaceTildes(comp, options);\n    debug(\"tildes\", comp);\n    comp = replaceXRanges(comp, options);\n    debug(\"xrange\", comp);\n    comp = replaceStars(comp, options);\n    debug(\"stars\", comp);\n    return comp;\n};\nconst isX = (id)=>!id || id.toLowerCase() === \"x\" || id === \"*\";\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options)=>{\n    return comp.trim().split(/\\s+/).map((c)=>replaceTilde(c, options)).join(\" \");\n};\nconst replaceTilde = (comp, options)=>{\n    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n    return comp.replace(r, (_, M, m, p, pr)=>{\n        debug(\"tilde\", comp, _, M, m, p, pr);\n        let ret;\n        if (isX(M)) {\n            ret = \"\";\n        } else if (isX(m)) {\n            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;\n        } else if (isX(p)) {\n            // ~1.2 == >=1.2.0 <1.3.0-0\n            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;\n        } else if (pr) {\n            debug(\"replaceTilde pr\", pr);\n            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;\n        } else {\n            // ~1.2.3 == >=1.2.3 <1.3.0-0\n            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;\n        }\n        debug(\"tilde return\", ret);\n        return ret;\n    });\n};\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options)=>{\n    return comp.trim().split(/\\s+/).map((c)=>replaceCaret(c, options)).join(\" \");\n};\nconst replaceCaret = (comp, options)=>{\n    debug(\"caret\", comp, options);\n    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n    const z = options.includePrerelease ? \"-0\" : \"\";\n    return comp.replace(r, (_, M, m, p, pr)=>{\n        debug(\"caret\", comp, _, M, m, p, pr);\n        let ret;\n        if (isX(M)) {\n            ret = \"\";\n        } else if (isX(m)) {\n            ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;\n        } else if (isX(p)) {\n            if (M === \"0\") {\n                ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;\n            } else {\n                ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;\n            }\n        } else if (pr) {\n            debug(\"replaceCaret pr\", pr);\n            if (M === \"0\") {\n                if (m === \"0\") {\n                    ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;\n                } else {\n                    ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;\n                }\n            } else {\n                ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;\n            }\n        } else {\n            debug(\"no pr\");\n            if (M === \"0\") {\n                if (m === \"0\") {\n                    ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;\n                } else {\n                    ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;\n                }\n            } else {\n                ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;\n            }\n        }\n        debug(\"caret return\", ret);\n        return ret;\n    });\n};\nconst replaceXRanges = (comp, options)=>{\n    debug(\"replaceXRanges\", comp, options);\n    return comp.split(/\\s+/).map((c)=>replaceXRange(c, options)).join(\" \");\n};\nconst replaceXRange = (comp, options)=>{\n    comp = comp.trim();\n    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n    return comp.replace(r, (ret, gtlt, M, m, p, pr)=>{\n        debug(\"xRange\", comp, ret, gtlt, M, m, p, pr);\n        const xM = isX(M);\n        const xm = xM || isX(m);\n        const xp = xm || isX(p);\n        const anyX = xp;\n        if (gtlt === \"=\" && anyX) {\n            gtlt = \"\";\n        }\n        // if we're including prereleases in the match, then we need\n        // to fix this to -0, the lowest possible prerelease value\n        pr = options.includePrerelease ? \"-0\" : \"\";\n        if (xM) {\n            if (gtlt === \">\" || gtlt === \"<\") {\n                // nothing is allowed\n                ret = \"<0.0.0-0\";\n            } else {\n                // nothing is forbidden\n                ret = \"*\";\n            }\n        } else if (gtlt && anyX) {\n            // we know patch is an x, because we have any x at all.\n            // replace X with 0\n            if (xm) {\n                m = 0;\n            }\n            p = 0;\n            if (gtlt === \">\") {\n                // >1 => >=2.0.0\n                // >1.2 => >=1.3.0\n                gtlt = \">=\";\n                if (xm) {\n                    M = +M + 1;\n                    m = 0;\n                    p = 0;\n                } else {\n                    m = +m + 1;\n                    p = 0;\n                }\n            } else if (gtlt === \"<=\") {\n                // <=0.7.x is actually <0.8.0, since any 0.7.x should\n                // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n                gtlt = \"<\";\n                if (xm) {\n                    M = +M + 1;\n                } else {\n                    m = +m + 1;\n                }\n            }\n            if (gtlt === \"<\") {\n                pr = \"-0\";\n            }\n            ret = `${gtlt + M}.${m}.${p}${pr}`;\n        } else if (xm) {\n            ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;\n        } else if (xp) {\n            ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;\n        }\n        debug(\"xRange return\", ret);\n        return ret;\n    });\n};\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options)=>{\n    debug(\"replaceStars\", comp, options);\n    // Looseness is ignored here.  star is always as loose as it gets!\n    return comp.trim().replace(re[t.STAR], \"\");\n};\nconst replaceGTE0 = (comp, options)=>{\n    debug(\"replaceGTE0\", comp, options);\n    return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], \"\");\n};\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = (incPr)=>($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb)=>{\n        if (isX(fM)) {\n            from = \"\";\n        } else if (isX(fm)) {\n            from = `>=${fM}.0.0${incPr ? \"-0\" : \"\"}`;\n        } else if (isX(fp)) {\n            from = `>=${fM}.${fm}.0${incPr ? \"-0\" : \"\"}`;\n        } else if (fpr) {\n            from = `>=${from}`;\n        } else {\n            from = `>=${from}${incPr ? \"-0\" : \"\"}`;\n        }\n        if (isX(tM)) {\n            to = \"\";\n        } else if (isX(tm)) {\n            to = `<${+tM + 1}.0.0-0`;\n        } else if (isX(tp)) {\n            to = `<${tM}.${+tm + 1}.0-0`;\n        } else if (tpr) {\n            to = `<=${tM}.${tm}.${tp}-${tpr}`;\n        } else if (incPr) {\n            to = `<${tM}.${tm}.${+tp + 1}-0`;\n        } else {\n            to = `<=${to}`;\n        }\n        return `${from} ${to}`.trim();\n    };\nconst testSet = (set, version, options)=>{\n    for(let i = 0; i < set.length; i++){\n        if (!set[i].test(version)) {\n            return false;\n        }\n    }\n    if (version.prerelease.length && !options.includePrerelease) {\n        // Find the set of versions that are allowed to have prereleases\n        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n        // That should allow `1.2.3-pr.2` to pass.\n        // However, `1.2.4-alpha.notready` should NOT be allowed,\n        // even though it's within the range set by the comparators.\n        for(let i = 0; i < set.length; i++){\n            debug(set[i].semver);\n            if (set[i].semver === Comparator.ANY) {\n                continue;\n            }\n            if (set[i].semver.prerelease.length > 0) {\n                const allowed = set[i].semver;\n                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n                    return true;\n                }\n            }\n        }\n        // Version has a -pre, but it's not one of the ones we like.\n        return false;\n    }\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/classes/semver.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst debug = __webpack_require__(/*! ../internal/debug */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/debug.js\");\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__(/*! ../internal/constants */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/constants.js\");\nconst { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/re.js\");\nconst parseOptions = __webpack_require__(/*! ../internal/parse-options */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/parse-options.js\");\nconst { compareIdentifiers } = __webpack_require__(/*! ../internal/identifiers */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/identifiers.js\");\nclass SemVer {\n    constructor(version, options){\n        options = parseOptions(options);\n        if (version instanceof SemVer) {\n            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {\n                return version;\n            } else {\n                version = version.version;\n            }\n        } else if (typeof version !== \"string\") {\n            throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`);\n        }\n        if (version.length > MAX_LENGTH) {\n            throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);\n        }\n        debug(\"SemVer\", version, options);\n        this.options = options;\n        this.loose = !!options.loose;\n        // this isn't actually relevant for versions, but keep it so that we\n        // don't run into trouble passing this.options around.\n        this.includePrerelease = !!options.includePrerelease;\n        const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);\n        if (!m) {\n            throw new TypeError(`Invalid Version: ${version}`);\n        }\n        this.raw = version;\n        // these are actually numbers\n        this.major = +m[1];\n        this.minor = +m[2];\n        this.patch = +m[3];\n        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n            throw new TypeError(\"Invalid major version\");\n        }\n        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n            throw new TypeError(\"Invalid minor version\");\n        }\n        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n            throw new TypeError(\"Invalid patch version\");\n        }\n        // numberify any prerelease numeric ids\n        if (!m[4]) {\n            this.prerelease = [];\n        } else {\n            this.prerelease = m[4].split(\".\").map((id)=>{\n                if (/^[0-9]+$/.test(id)) {\n                    const num = +id;\n                    if (num >= 0 && num < MAX_SAFE_INTEGER) {\n                        return num;\n                    }\n                }\n                return id;\n            });\n        }\n        this.build = m[5] ? m[5].split(\".\") : [];\n        this.format();\n    }\n    format() {\n        this.version = `${this.major}.${this.minor}.${this.patch}`;\n        if (this.prerelease.length) {\n            this.version += `-${this.prerelease.join(\".\")}`;\n        }\n        return this.version;\n    }\n    toString() {\n        return this.version;\n    }\n    compare(other) {\n        debug(\"SemVer.compare\", this.version, this.options, other);\n        if (!(other instanceof SemVer)) {\n            if (typeof other === \"string\" && other === this.version) {\n                return 0;\n            }\n            other = new SemVer(other, this.options);\n        }\n        if (other.version === this.version) {\n            return 0;\n        }\n        return this.compareMain(other) || this.comparePre(other);\n    }\n    compareMain(other) {\n        if (!(other instanceof SemVer)) {\n            other = new SemVer(other, this.options);\n        }\n        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);\n    }\n    comparePre(other) {\n        if (!(other instanceof SemVer)) {\n            other = new SemVer(other, this.options);\n        }\n        // NOT having a prerelease is > having one\n        if (this.prerelease.length && !other.prerelease.length) {\n            return -1;\n        } else if (!this.prerelease.length && other.prerelease.length) {\n            return 1;\n        } else if (!this.prerelease.length && !other.prerelease.length) {\n            return 0;\n        }\n        let i = 0;\n        do {\n            const a = this.prerelease[i];\n            const b = other.prerelease[i];\n            debug(\"prerelease compare\", i, a, b);\n            if (a === undefined && b === undefined) {\n                return 0;\n            } else if (b === undefined) {\n                return 1;\n            } else if (a === undefined) {\n                return -1;\n            } else if (a === b) {\n                continue;\n            } else {\n                return compareIdentifiers(a, b);\n            }\n        }while (++i);\n    }\n    compareBuild(other) {\n        if (!(other instanceof SemVer)) {\n            other = new SemVer(other, this.options);\n        }\n        let i = 0;\n        do {\n            const a = this.build[i];\n            const b = other.build[i];\n            debug(\"prerelease compare\", i, a, b);\n            if (a === undefined && b === undefined) {\n                return 0;\n            } else if (b === undefined) {\n                return 1;\n            } else if (a === undefined) {\n                return -1;\n            } else if (a === b) {\n                continue;\n            } else {\n                return compareIdentifiers(a, b);\n            }\n        }while (++i);\n    }\n    // preminor will bump the version up to the next minor release, and immediately\n    // down to pre-release. premajor and prepatch work the same way.\n    inc(release, identifier, identifierBase) {\n        switch(release){\n            case \"premajor\":\n                this.prerelease.length = 0;\n                this.patch = 0;\n                this.minor = 0;\n                this.major++;\n                this.inc(\"pre\", identifier, identifierBase);\n                break;\n            case \"preminor\":\n                this.prerelease.length = 0;\n                this.patch = 0;\n                this.minor++;\n                this.inc(\"pre\", identifier, identifierBase);\n                break;\n            case \"prepatch\":\n                // If this is already a prerelease, it will bump to the next version\n                // drop any prereleases that might already exist, since they are not\n                // relevant at this point.\n                this.prerelease.length = 0;\n                this.inc(\"patch\", identifier, identifierBase);\n                this.inc(\"pre\", identifier, identifierBase);\n                break;\n            // If the input is a non-prerelease version, this acts the same as\n            // prepatch.\n            case \"prerelease\":\n                if (this.prerelease.length === 0) {\n                    this.inc(\"patch\", identifier, identifierBase);\n                }\n                this.inc(\"pre\", identifier, identifierBase);\n                break;\n            case \"major\":\n                // If this is a pre-major version, bump up to the same major version.\n                // Otherwise increment major.\n                // 1.0.0-5 bumps to 1.0.0\n                // 1.1.0 bumps to 2.0.0\n                if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {\n                    this.major++;\n                }\n                this.minor = 0;\n                this.patch = 0;\n                this.prerelease = [];\n                break;\n            case \"minor\":\n                // If this is a pre-minor version, bump up to the same minor version.\n                // Otherwise increment minor.\n                // 1.2.0-5 bumps to 1.2.0\n                // 1.2.1 bumps to 1.3.0\n                if (this.patch !== 0 || this.prerelease.length === 0) {\n                    this.minor++;\n                }\n                this.patch = 0;\n                this.prerelease = [];\n                break;\n            case \"patch\":\n                // If this is not a pre-release version, it will increment the patch.\n                // If it is a pre-release it will bump up to the same patch version.\n                // 1.2.0-5 patches to 1.2.0\n                // 1.2.0 patches to 1.2.1\n                if (this.prerelease.length === 0) {\n                    this.patch++;\n                }\n                this.prerelease = [];\n                break;\n            // This probably shouldn't be used publicly.\n            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n            case \"pre\":\n                {\n                    const base = Number(identifierBase) ? 1 : 0;\n                    if (!identifier && identifierBase === false) {\n                        throw new Error(\"invalid increment argument: identifier is empty\");\n                    }\n                    if (this.prerelease.length === 0) {\n                        this.prerelease = [\n                            base\n                        ];\n                    } else {\n                        let i = this.prerelease.length;\n                        while(--i >= 0){\n                            if (typeof this.prerelease[i] === \"number\") {\n                                this.prerelease[i]++;\n                                i = -2;\n                            }\n                        }\n                        if (i === -1) {\n                            // didn't increment anything\n                            if (identifier === this.prerelease.join(\".\") && identifierBase === false) {\n                                throw new Error(\"invalid increment argument: identifier already exists\");\n                            }\n                            this.prerelease.push(base);\n                        }\n                    }\n                    if (identifier) {\n                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n                        let prerelease = [\n                            identifier,\n                            base\n                        ];\n                        if (identifierBase === false) {\n                            prerelease = [\n                                identifier\n                            ];\n                        }\n                        if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n                            if (isNaN(this.prerelease[1])) {\n                                this.prerelease = prerelease;\n                            }\n                        } else {\n                            this.prerelease = prerelease;\n                        }\n                    }\n                    break;\n                }\n            default:\n                throw new Error(`invalid increment argument: ${release}`);\n        }\n        this.raw = this.format();\n        if (this.build.length) {\n            this.raw += `+${this.build.join(\".\")}`;\n        }\n        return this;\n    }\n}\nmodule.exports = SemVer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/clean.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/clean.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/parse.js\");\nconst clean = (version, options)=>{\n    const s = parse(version.trim().replace(/^[=v]+/, \"\"), options);\n    return s ? s.version : null;\n};\nmodule.exports = clean;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NsZWFuLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxRQUFRLENBQUNDLFNBQVNDO0lBQ3RCLE1BQU1DLElBQUlMLE1BQU1HLFFBQVFHLElBQUksR0FBR0MsT0FBTyxDQUFDLFVBQVUsS0FBS0g7SUFDdEQsT0FBT0MsSUFBSUEsRUFBRUYsT0FBTyxHQUFHO0FBQ3pCO0FBQ0FLLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY2xlYW4uanM/ZjI3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgY2xlYW4gPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBzID0gcGFyc2UodmVyc2lvbi50cmltKCkucmVwbGFjZSgvXls9dl0rLywgJycpLCBvcHRpb25zKVxuICByZXR1cm4gcyA/IHMudmVyc2lvbiA6IG51bGxcbn1cbm1vZHVsZS5leHBvcnRzID0gY2xlYW5cbiJdLCJuYW1lcyI6WyJwYXJzZSIsInJlcXVpcmUiLCJjbGVhbiIsInZlcnNpb24iLCJvcHRpb25zIiwicyIsInRyaW0iLCJyZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/clean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/cmp.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/cmp.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst eq = __webpack_require__(/*! ./eq */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/eq.js\");\nconst neq = __webpack_require__(/*! ./neq */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/neq.js\");\nconst gt = __webpack_require__(/*! ./gt */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gt.js\");\nconst gte = __webpack_require__(/*! ./gte */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gte.js\");\nconst lt = __webpack_require__(/*! ./lt */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lt.js\");\nconst lte = __webpack_require__(/*! ./lte */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lte.js\");\nconst cmp = (a, op, b, loose)=>{\n    switch(op){\n        case \"===\":\n            if (typeof a === \"object\") {\n                a = a.version;\n            }\n            if (typeof b === \"object\") {\n                b = b.version;\n            }\n            return a === b;\n        case \"!==\":\n            if (typeof a === \"object\") {\n                a = a.version;\n            }\n            if (typeof b === \"object\") {\n                b = b.version;\n            }\n            return a !== b;\n        case \"\":\n        case \"=\":\n        case \"==\":\n            return eq(a, b, loose);\n        case \"!=\":\n            return neq(a, b, loose);\n        case \">\":\n            return gt(a, b, loose);\n        case \">=\":\n            return gte(a, b, loose);\n        case \"<\":\n            return lt(a, b, loose);\n        case \"<=\":\n            return lte(a, b, loose);\n        default:\n            throw new TypeError(`Invalid operator: ${op}`);\n    }\n};\nmodule.exports = cmp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NtcC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDbkIsTUFBTUMsTUFBTUQsbUJBQU9BLENBQUM7QUFDcEIsTUFBTUUsS0FBS0YsbUJBQU9BLENBQUM7QUFDbkIsTUFBTUcsTUFBTUgsbUJBQU9BLENBQUM7QUFDcEIsTUFBTUksS0FBS0osbUJBQU9BLENBQUM7QUFDbkIsTUFBTUssTUFBTUwsbUJBQU9BLENBQUM7QUFFcEIsTUFBTU0sTUFBTSxDQUFDQyxHQUFHQyxJQUFJQyxHQUFHQztJQUNyQixPQUFRRjtRQUNOLEtBQUs7WUFDSCxJQUFJLE9BQU9ELE1BQU0sVUFBVTtnQkFDekJBLElBQUlBLEVBQUVJLE9BQU87WUFDZjtZQUNBLElBQUksT0FBT0YsTUFBTSxVQUFVO2dCQUN6QkEsSUFBSUEsRUFBRUUsT0FBTztZQUNmO1lBQ0EsT0FBT0osTUFBTUU7UUFFZixLQUFLO1lBQ0gsSUFBSSxPQUFPRixNQUFNLFVBQVU7Z0JBQ3pCQSxJQUFJQSxFQUFFSSxPQUFPO1lBQ2Y7WUFDQSxJQUFJLE9BQU9GLE1BQU0sVUFBVTtnQkFDekJBLElBQUlBLEVBQUVFLE9BQU87WUFDZjtZQUNBLE9BQU9KLE1BQU1FO1FBRWYsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0gsT0FBT1YsR0FBR1EsR0FBR0UsR0FBR0M7UUFFbEIsS0FBSztZQUNILE9BQU9ULElBQUlNLEdBQUdFLEdBQUdDO1FBRW5CLEtBQUs7WUFDSCxPQUFPUixHQUFHSyxHQUFHRSxHQUFHQztRQUVsQixLQUFLO1lBQ0gsT0FBT1AsSUFBSUksR0FBR0UsR0FBR0M7UUFFbkIsS0FBSztZQUNILE9BQU9OLEdBQUdHLEdBQUdFLEdBQUdDO1FBRWxCLEtBQUs7WUFDSCxPQUFPTCxJQUFJRSxHQUFHRSxHQUFHQztRQUVuQjtZQUNFLE1BQU0sSUFBSUUsVUFBVSxDQUFDLGtCQUFrQixFQUFFSixHQUFHLENBQUM7SUFDakQ7QUFDRjtBQUNBSyxPQUFPQyxPQUFPLEdBQUdSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NtcC5qcz9lYjNlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVxID0gcmVxdWlyZSgnLi9lcScpXG5jb25zdCBuZXEgPSByZXF1aXJlKCcuL25lcScpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4vZ3QnKVxuY29uc3QgZ3RlID0gcmVxdWlyZSgnLi9ndGUnKVxuY29uc3QgbHQgPSByZXF1aXJlKCcuL2x0JylcbmNvbnN0IGx0ZSA9IHJlcXVpcmUoJy4vbHRlJylcblxuY29uc3QgY21wID0gKGEsIG9wLCBiLCBsb29zZSkgPT4ge1xuICBzd2l0Y2ggKG9wKSB7XG4gICAgY2FzZSAnPT09JzpcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICB9XG4gICAgICByZXR1cm4gYSA9PT0gYlxuXG4gICAgY2FzZSAnIT09JzpcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICB9XG4gICAgICByZXR1cm4gYSAhPT0gYlxuXG4gICAgY2FzZSAnJzpcbiAgICBjYXNlICc9JzpcbiAgICBjYXNlICc9PSc6XG4gICAgICByZXR1cm4gZXEoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICchPSc6XG4gICAgICByZXR1cm4gbmVxKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPic6XG4gICAgICByZXR1cm4gZ3QoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc+PSc6XG4gICAgICByZXR1cm4gZ3RlKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPCc6XG4gICAgICByZXR1cm4gbHQoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc8PSc6XG4gICAgICByZXR1cm4gbHRlKGEsIGIsIGxvb3NlKVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgb3BlcmF0b3I6ICR7b3B9YClcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBjbXBcbiJdLCJuYW1lcyI6WyJlcSIsInJlcXVpcmUiLCJuZXEiLCJndCIsImd0ZSIsImx0IiwibHRlIiwiY21wIiwiYSIsIm9wIiwiYiIsImxvb3NlIiwidmVyc2lvbiIsIlR5cGVFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/cmp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/coerce.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/coerce.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/parse.js\");\nconst { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/re.js\");\nconst coerce = (version, options)=>{\n    if (version instanceof SemVer) {\n        return version;\n    }\n    if (typeof version === \"number\") {\n        version = String(version);\n    }\n    if (typeof version !== \"string\") {\n        return null;\n    }\n    options = options || {};\n    let match = null;\n    if (!options.rtl) {\n        match = version.match(re[t.COERCE]);\n    } else {\n        // Find the right-most coercible string that does not share\n        // a terminus with a more left-ward coercible string.\n        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n        //\n        // Walk through the string checking with a /g regexp\n        // Manually set the index so as to pick up overlapping matches.\n        // Stop when we get a match that ends at the string end, since no\n        // coercible string can be more right-ward without the same terminus.\n        let next;\n        while((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)){\n            if (!match || next.index + next[0].length !== match.index + match[0].length) {\n                match = next;\n            }\n            re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;\n        }\n        // leave it in a clean state\n        re[t.COERCERTL].lastIndex = -1;\n    }\n    if (match === null) {\n        return null;\n    }\n    return parse(`${match[2]}.${match[3] || \"0\"}.${match[4] || \"0\"}`, options);\n};\nmodule.exports = coerce;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvZXJjZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTSxFQUFFRSxRQUFRQyxFQUFFLEVBQUVDLENBQUMsRUFBRSxHQUFHSixtQkFBT0EsQ0FBQztBQUVsQyxNQUFNSyxTQUFTLENBQUNDLFNBQVNDO0lBQ3ZCLElBQUlELG1CQUFtQlAsUUFBUTtRQUM3QixPQUFPTztJQUNUO0lBRUEsSUFBSSxPQUFPQSxZQUFZLFVBQVU7UUFDL0JBLFVBQVVFLE9BQU9GO0lBQ25CO0lBRUEsSUFBSSxPQUFPQSxZQUFZLFVBQVU7UUFDL0IsT0FBTztJQUNUO0lBRUFDLFVBQVVBLFdBQVcsQ0FBQztJQUV0QixJQUFJRSxRQUFRO0lBQ1osSUFBSSxDQUFDRixRQUFRRyxHQUFHLEVBQUU7UUFDaEJELFFBQVFILFFBQVFHLEtBQUssQ0FBQ04sRUFBRSxDQUFDQyxFQUFFTyxNQUFNLENBQUM7SUFDcEMsT0FBTztRQUNMLDJEQUEyRDtRQUMzRCxxREFBcUQ7UUFDckQsMERBQTBEO1FBQzFELEVBQUU7UUFDRixvREFBb0Q7UUFDcEQsK0RBQStEO1FBQy9ELGlFQUFpRTtRQUNqRSxxRUFBcUU7UUFDckUsSUFBSUM7UUFDSixNQUFPLENBQUNBLE9BQU9ULEVBQUUsQ0FBQ0MsRUFBRVMsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQ1IsUUFBTyxLQUN0QyxFQUFDRyxTQUFTQSxNQUFNTSxLQUFLLEdBQUdOLEtBQUssQ0FBQyxFQUFFLENBQUNPLE1BQU0sS0FBS1YsUUFBUVUsTUFBTSxFQUM3RDtZQUNBLElBQUksQ0FBQ1AsU0FDQ0csS0FBS0csS0FBSyxHQUFHSCxJQUFJLENBQUMsRUFBRSxDQUFDSSxNQUFNLEtBQUtQLE1BQU1NLEtBQUssR0FBR04sS0FBSyxDQUFDLEVBQUUsQ0FBQ08sTUFBTSxFQUFFO2dCQUNuRVAsUUFBUUc7WUFDVjtZQUNBVCxFQUFFLENBQUNDLEVBQUVTLFNBQVMsQ0FBQyxDQUFDSSxTQUFTLEdBQUdMLEtBQUtHLEtBQUssR0FBR0gsSUFBSSxDQUFDLEVBQUUsQ0FBQ0ksTUFBTSxHQUFHSixJQUFJLENBQUMsRUFBRSxDQUFDSSxNQUFNO1FBQzFFO1FBQ0EsNEJBQTRCO1FBQzVCYixFQUFFLENBQUNDLEVBQUVTLFNBQVMsQ0FBQyxDQUFDSSxTQUFTLEdBQUcsQ0FBQztJQUMvQjtJQUVBLElBQUlSLFVBQVUsTUFBTTtRQUNsQixPQUFPO0lBQ1Q7SUFFQSxPQUFPUixNQUFNLENBQUMsRUFBRVEsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUVBLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUVBLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUVGO0FBQ3BFO0FBQ0FXLE9BQU9DLE9BQU8sR0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29lcmNlLmpzPzRhN2YiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IHsgc2FmZVJlOiByZSwgdCB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcmUnKVxuXG5jb25zdCBjb2VyY2UgPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgIHJldHVybiB2ZXJzaW9uXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gPT09ICdudW1iZXInKSB7XG4gICAgdmVyc2lvbiA9IFN0cmluZyh2ZXJzaW9uKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2ZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGxldCBtYXRjaCA9IG51bGxcbiAgaWYgKCFvcHRpb25zLnJ0bCkge1xuICAgIG1hdGNoID0gdmVyc2lvbi5tYXRjaChyZVt0LkNPRVJDRV0pXG4gIH0gZWxzZSB7XG4gICAgLy8gRmluZCB0aGUgcmlnaHQtbW9zdCBjb2VyY2libGUgc3RyaW5nIHRoYXQgZG9lcyBub3Qgc2hhcmVcbiAgICAvLyBhIHRlcm1pbnVzIHdpdGggYSBtb3JlIGxlZnQtd2FyZCBjb2VyY2libGUgc3RyaW5nLlxuICAgIC8vIEVnLCAnMS4yLjMuNCcgd2FudHMgdG8gY29lcmNlICcyLjMuNCcsIG5vdCAnMy40JyBvciAnNCdcbiAgICAvL1xuICAgIC8vIFdhbGsgdGhyb3VnaCB0aGUgc3RyaW5nIGNoZWNraW5nIHdpdGggYSAvZyByZWdleHBcbiAgICAvLyBNYW51YWxseSBzZXQgdGhlIGluZGV4IHNvIGFzIHRvIHBpY2sgdXAgb3ZlcmxhcHBpbmcgbWF0Y2hlcy5cbiAgICAvLyBTdG9wIHdoZW4gd2UgZ2V0IGEgbWF0Y2ggdGhhdCBlbmRzIGF0IHRoZSBzdHJpbmcgZW5kLCBzaW5jZSBub1xuICAgIC8vIGNvZXJjaWJsZSBzdHJpbmcgY2FuIGJlIG1vcmUgcmlnaHQtd2FyZCB3aXRob3V0IHRoZSBzYW1lIHRlcm1pbnVzLlxuICAgIGxldCBuZXh0XG4gICAgd2hpbGUgKChuZXh0ID0gcmVbdC5DT0VSQ0VSVExdLmV4ZWModmVyc2lvbikpICYmXG4gICAgICAgICghbWF0Y2ggfHwgbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggIT09IHZlcnNpb24ubGVuZ3RoKVxuICAgICkge1xuICAgICAgaWYgKCFtYXRjaCB8fFxuICAgICAgICAgICAgbmV4dC5pbmRleCArIG5leHRbMF0ubGVuZ3RoICE9PSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCkge1xuICAgICAgICBtYXRjaCA9IG5leHRcbiAgICAgIH1cbiAgICAgIHJlW3QuQ09FUkNFUlRMXS5sYXN0SW5kZXggPSBuZXh0LmluZGV4ICsgbmV4dFsxXS5sZW5ndGggKyBuZXh0WzJdLmxlbmd0aFxuICAgIH1cbiAgICAvLyBsZWF2ZSBpdCBpbiBhIGNsZWFuIHN0YXRlXG4gICAgcmVbdC5DT0VSQ0VSVExdLmxhc3RJbmRleCA9IC0xXG4gIH1cblxuICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIHBhcnNlKGAke21hdGNoWzJdfS4ke21hdGNoWzNdIHx8ICcwJ30uJHttYXRjaFs0XSB8fCAnMCd9YCwgb3B0aW9ucylcbn1cbm1vZHVsZS5leHBvcnRzID0gY29lcmNlXG4iXSwibmFtZXMiOlsiU2VtVmVyIiwicmVxdWlyZSIsInBhcnNlIiwic2FmZVJlIiwicmUiLCJ0IiwiY29lcmNlIiwidmVyc2lvbiIsIm9wdGlvbnMiLCJTdHJpbmciLCJtYXRjaCIsInJ0bCIsIkNPRVJDRSIsIm5leHQiLCJDT0VSQ0VSVEwiLCJleGVjIiwiaW5kZXgiLCJsZW5ndGgiLCJsYXN0SW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/coerce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare-build.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/compare-build.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst compareBuild = (a, b, loose)=>{\n    const versionA = new SemVer(a, loose);\n    const versionB = new SemVer(b, loose);\n    return versionA.compare(versionB) || versionA.compareBuild(versionB);\n};\nmodule.exports = compareBuild;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUtYnVpbGQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1DLGVBQWUsQ0FBQ0MsR0FBR0MsR0FBR0M7SUFDMUIsTUFBTUMsV0FBVyxJQUFJTixPQUFPRyxHQUFHRTtJQUMvQixNQUFNRSxXQUFXLElBQUlQLE9BQU9JLEdBQUdDO0lBQy9CLE9BQU9DLFNBQVNFLE9BQU8sQ0FBQ0QsYUFBYUQsU0FBU0osWUFBWSxDQUFDSztBQUM3RDtBQUNBRSxPQUFPQyxPQUFPLEdBQUdSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUtYnVpbGQuanM/ZjA0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBjb21wYXJlQnVpbGQgPSAoYSwgYiwgbG9vc2UpID0+IHtcbiAgY29uc3QgdmVyc2lvbkEgPSBuZXcgU2VtVmVyKGEsIGxvb3NlKVxuICBjb25zdCB2ZXJzaW9uQiA9IG5ldyBTZW1WZXIoYiwgbG9vc2UpXG4gIHJldHVybiB2ZXJzaW9uQS5jb21wYXJlKHZlcnNpb25CKSB8fCB2ZXJzaW9uQS5jb21wYXJlQnVpbGQodmVyc2lvbkIpXG59XG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVCdWlsZFxuIl0sIm5hbWVzIjpbIlNlbVZlciIsInJlcXVpcmUiLCJjb21wYXJlQnVpbGQiLCJhIiwiYiIsImxvb3NlIiwidmVyc2lvbkEiLCJ2ZXJzaW9uQiIsImNvbXBhcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare-loose.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/compare-loose.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compare = __webpack_require__(/*! ./compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst compareLoose = (a, b)=>compare(a, b, true);\nmodule.exports = compareLoose;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUtbG9vc2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1DLGVBQWUsQ0FBQ0MsR0FBR0MsSUFBTUosUUFBUUcsR0FBR0MsR0FBRztBQUM3Q0MsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jb21wYXJlLWxvb3NlLmpzPzNjNGMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBjb21wYXJlTG9vc2UgPSAoYSwgYikgPT4gY29tcGFyZShhLCBiLCB0cnVlKVxubW9kdWxlLmV4cG9ydHMgPSBjb21wYXJlTG9vc2VcbiJdLCJuYW1lcyI6WyJjb21wYXJlIiwicmVxdWlyZSIsImNvbXBhcmVMb29zZSIsImEiLCJiIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare-loose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/compare.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst compare = (a, b, loose)=>new SemVer(a, loose).compare(new SemVer(b, loose));\nmodule.exports = compare;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1DLFVBQVUsQ0FBQ0MsR0FBR0MsR0FBR0MsUUFDckIsSUFBSUwsT0FBT0csR0FBR0UsT0FBT0gsT0FBTyxDQUFDLElBQUlGLE9BQU9JLEdBQUdDO0FBRTdDQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUuanM/YzA3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBjb21wYXJlID0gKGEsIGIsIGxvb3NlKSA9PlxuICBuZXcgU2VtVmVyKGEsIGxvb3NlKS5jb21wYXJlKG5ldyBTZW1WZXIoYiwgbG9vc2UpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVcbiJdLCJuYW1lcyI6WyJTZW1WZXIiLCJyZXF1aXJlIiwiY29tcGFyZSIsImEiLCJiIiwibG9vc2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/diff.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/diff.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst parse = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/parse.js\");\nconst diff = (version1, version2)=>{\n    const v1 = parse(version1, null, true);\n    const v2 = parse(version2, null, true);\n    const comparison = v1.compare(v2);\n    if (comparison === 0) {\n        return null;\n    }\n    const v1Higher = comparison > 0;\n    const highVersion = v1Higher ? v1 : v2;\n    const lowVersion = v1Higher ? v2 : v1;\n    const highHasPre = !!highVersion.prerelease.length;\n    const lowHasPre = !!lowVersion.prerelease.length;\n    if (lowHasPre && !highHasPre) {\n        // Going from prerelease -> no prerelease requires some special casing\n        // If the low version has only a major, then it will always be a major\n        // Some examples:\n        // 1.0.0-1 -> 1.0.0\n        // 1.0.0-1 -> 1.1.1\n        // 1.0.0-1 -> 2.0.0\n        if (!lowVersion.patch && !lowVersion.minor) {\n            return \"major\";\n        }\n        // Otherwise it can be determined by checking the high version\n        if (highVersion.patch) {\n            // anything higher than a patch bump would result in the wrong version\n            return \"patch\";\n        }\n        if (highVersion.minor) {\n            // anything higher than a minor bump would result in the wrong version\n            return \"minor\";\n        }\n        // bumping major/minor/patch all have same result\n        return \"major\";\n    }\n    // add the `pre` prefix if we are going to a prerelease version\n    const prefix = highHasPre ? \"pre\" : \"\";\n    if (v1.major !== v2.major) {\n        return prefix + \"major\";\n    }\n    if (v1.minor !== v2.minor) {\n        return prefix + \"minor\";\n    }\n    if (v1.patch !== v2.patch) {\n        return prefix + \"patch\";\n    }\n    // high and low are preleases\n    return \"prerelease\";\n};\nmodule.exports = diff;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2RpZmYuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXRCLE1BQU1DLE9BQU8sQ0FBQ0MsVUFBVUM7SUFDdEIsTUFBTUMsS0FBS0wsTUFBTUcsVUFBVSxNQUFNO0lBQ2pDLE1BQU1HLEtBQUtOLE1BQU1JLFVBQVUsTUFBTTtJQUNqQyxNQUFNRyxhQUFhRixHQUFHRyxPQUFPLENBQUNGO0lBRTlCLElBQUlDLGVBQWUsR0FBRztRQUNwQixPQUFPO0lBQ1Q7SUFFQSxNQUFNRSxXQUFXRixhQUFhO0lBQzlCLE1BQU1HLGNBQWNELFdBQVdKLEtBQUtDO0lBQ3BDLE1BQU1LLGFBQWFGLFdBQVdILEtBQUtEO0lBQ25DLE1BQU1PLGFBQWEsQ0FBQyxDQUFDRixZQUFZRyxVQUFVLENBQUNDLE1BQU07SUFDbEQsTUFBTUMsWUFBWSxDQUFDLENBQUNKLFdBQVdFLFVBQVUsQ0FBQ0MsTUFBTTtJQUVoRCxJQUFJQyxhQUFhLENBQUNILFlBQVk7UUFDNUIsc0VBQXNFO1FBRXRFLHNFQUFzRTtRQUN0RSxpQkFBaUI7UUFDakIsbUJBQW1CO1FBQ25CLG1CQUFtQjtRQUNuQixtQkFBbUI7UUFDbkIsSUFBSSxDQUFDRCxXQUFXSyxLQUFLLElBQUksQ0FBQ0wsV0FBV00sS0FBSyxFQUFFO1lBQzFDLE9BQU87UUFDVDtRQUVBLDhEQUE4RDtRQUU5RCxJQUFJUCxZQUFZTSxLQUFLLEVBQUU7WUFDckIsc0VBQXNFO1lBQ3RFLE9BQU87UUFDVDtRQUVBLElBQUlOLFlBQVlPLEtBQUssRUFBRTtZQUNyQixzRUFBc0U7WUFDdEUsT0FBTztRQUNUO1FBRUEsaURBQWlEO1FBQ2pELE9BQU87SUFDVDtJQUVBLCtEQUErRDtJQUMvRCxNQUFNQyxTQUFTTixhQUFhLFFBQVE7SUFFcEMsSUFBSVAsR0FBR2MsS0FBSyxLQUFLYixHQUFHYSxLQUFLLEVBQUU7UUFDekIsT0FBT0QsU0FBUztJQUNsQjtJQUVBLElBQUliLEdBQUdZLEtBQUssS0FBS1gsR0FBR1csS0FBSyxFQUFFO1FBQ3pCLE9BQU9DLFNBQVM7SUFDbEI7SUFFQSxJQUFJYixHQUFHVyxLQUFLLEtBQUtWLEdBQUdVLEtBQUssRUFBRTtRQUN6QixPQUFPRSxTQUFTO0lBQ2xCO0lBRUEsNkJBQTZCO0lBQzdCLE9BQU87QUFDVDtBQUVBRSxPQUFPQyxPQUFPLEdBQUduQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9kaWZmLmpzP2U1MmUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlLmpzJylcblxuY29uc3QgZGlmZiA9ICh2ZXJzaW9uMSwgdmVyc2lvbjIpID0+IHtcbiAgY29uc3QgdjEgPSBwYXJzZSh2ZXJzaW9uMSwgbnVsbCwgdHJ1ZSlcbiAgY29uc3QgdjIgPSBwYXJzZSh2ZXJzaW9uMiwgbnVsbCwgdHJ1ZSlcbiAgY29uc3QgY29tcGFyaXNvbiA9IHYxLmNvbXBhcmUodjIpXG5cbiAgaWYgKGNvbXBhcmlzb24gPT09IDApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgdjFIaWdoZXIgPSBjb21wYXJpc29uID4gMFxuICBjb25zdCBoaWdoVmVyc2lvbiA9IHYxSGlnaGVyID8gdjEgOiB2MlxuICBjb25zdCBsb3dWZXJzaW9uID0gdjFIaWdoZXIgPyB2MiA6IHYxXG4gIGNvbnN0IGhpZ2hIYXNQcmUgPSAhIWhpZ2hWZXJzaW9uLnByZXJlbGVhc2UubGVuZ3RoXG4gIGNvbnN0IGxvd0hhc1ByZSA9ICEhbG93VmVyc2lvbi5wcmVyZWxlYXNlLmxlbmd0aFxuXG4gIGlmIChsb3dIYXNQcmUgJiYgIWhpZ2hIYXNQcmUpIHtcbiAgICAvLyBHb2luZyBmcm9tIHByZXJlbGVhc2UgLT4gbm8gcHJlcmVsZWFzZSByZXF1aXJlcyBzb21lIHNwZWNpYWwgY2FzaW5nXG5cbiAgICAvLyBJZiB0aGUgbG93IHZlcnNpb24gaGFzIG9ubHkgYSBtYWpvciwgdGhlbiBpdCB3aWxsIGFsd2F5cyBiZSBhIG1ham9yXG4gICAgLy8gU29tZSBleGFtcGxlczpcbiAgICAvLyAxLjAuMC0xIC0+IDEuMC4wXG4gICAgLy8gMS4wLjAtMSAtPiAxLjEuMVxuICAgIC8vIDEuMC4wLTEgLT4gMi4wLjBcbiAgICBpZiAoIWxvd1ZlcnNpb24ucGF0Y2ggJiYgIWxvd1ZlcnNpb24ubWlub3IpIHtcbiAgICAgIHJldHVybiAnbWFqb3InXG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlIGl0IGNhbiBiZSBkZXRlcm1pbmVkIGJ5IGNoZWNraW5nIHRoZSBoaWdoIHZlcnNpb25cblxuICAgIGlmIChoaWdoVmVyc2lvbi5wYXRjaCkge1xuICAgICAgLy8gYW55dGhpbmcgaGlnaGVyIHRoYW4gYSBwYXRjaCBidW1wIHdvdWxkIHJlc3VsdCBpbiB0aGUgd3JvbmcgdmVyc2lvblxuICAgICAgcmV0dXJuICdwYXRjaCdcbiAgICB9XG5cbiAgICBpZiAoaGlnaFZlcnNpb24ubWlub3IpIHtcbiAgICAgIC8vIGFueXRoaW5nIGhpZ2hlciB0aGFuIGEgbWlub3IgYnVtcCB3b3VsZCByZXN1bHQgaW4gdGhlIHdyb25nIHZlcnNpb25cbiAgICAgIHJldHVybiAnbWlub3InXG4gICAgfVxuXG4gICAgLy8gYnVtcGluZyBtYWpvci9taW5vci9wYXRjaCBhbGwgaGF2ZSBzYW1lIHJlc3VsdFxuICAgIHJldHVybiAnbWFqb3InXG4gIH1cblxuICAvLyBhZGQgdGhlIGBwcmVgIHByZWZpeCBpZiB3ZSBhcmUgZ29pbmcgdG8gYSBwcmVyZWxlYXNlIHZlcnNpb25cbiAgY29uc3QgcHJlZml4ID0gaGlnaEhhc1ByZSA/ICdwcmUnIDogJydcblxuICBpZiAodjEubWFqb3IgIT09IHYyLm1ham9yKSB7XG4gICAgcmV0dXJuIHByZWZpeCArICdtYWpvcidcbiAgfVxuXG4gIGlmICh2MS5taW5vciAhPT0gdjIubWlub3IpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgJ21pbm9yJ1xuICB9XG5cbiAgaWYgKHYxLnBhdGNoICE9PSB2Mi5wYXRjaCkge1xuICAgIHJldHVybiBwcmVmaXggKyAncGF0Y2gnXG4gIH1cblxuICAvLyBoaWdoIGFuZCBsb3cgYXJlIHByZWxlYXNlc1xuICByZXR1cm4gJ3ByZXJlbGVhc2UnXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGlmZlxuIl0sIm5hbWVzIjpbInBhcnNlIiwicmVxdWlyZSIsImRpZmYiLCJ2ZXJzaW9uMSIsInZlcnNpb24yIiwidjEiLCJ2MiIsImNvbXBhcmlzb24iLCJjb21wYXJlIiwidjFIaWdoZXIiLCJoaWdoVmVyc2lvbiIsImxvd1ZlcnNpb24iLCJoaWdoSGFzUHJlIiwicHJlcmVsZWFzZSIsImxlbmd0aCIsImxvd0hhc1ByZSIsInBhdGNoIiwibWlub3IiLCJwcmVmaXgiLCJtYWpvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/diff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/eq.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/eq.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compare = __webpack_require__(/*! ./compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst eq = (a, b, loose)=>compare(a, b, loose) === 0;\nmodule.exports = eq;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2VxLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN4QixNQUFNQyxLQUFLLENBQUNDLEdBQUdDLEdBQUdDLFFBQVVMLFFBQVFHLEdBQUdDLEdBQUdDLFdBQVc7QUFDckRDLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZXEuanM/MzJmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGVxID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA9PT0gMFxubW9kdWxlLmV4cG9ydHMgPSBlcVxuIl0sIm5hbWVzIjpbImNvbXBhcmUiLCJyZXF1aXJlIiwiZXEiLCJhIiwiYiIsImxvb3NlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/eq.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gt.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/gt.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compare = __webpack_require__(/*! ./compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst gt = (a, b, loose)=>compare(a, b, loose) > 0;\nmodule.exports = gt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2d0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN4QixNQUFNQyxLQUFLLENBQUNDLEdBQUdDLEdBQUdDLFFBQVVMLFFBQVFHLEdBQUdDLEdBQUdDLFNBQVM7QUFDbkRDLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZ3QuanM/YzA2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGd0ID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA+IDBcbm1vZHVsZS5leHBvcnRzID0gZ3RcbiJdLCJuYW1lcyI6WyJjb21wYXJlIiwicmVxdWlyZSIsImd0IiwiYSIsImIiLCJsb29zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gte.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/gte.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compare = __webpack_require__(/*! ./compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst gte = (a, b, loose)=>compare(a, b, loose) >= 0;\nmodule.exports = gte;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2d0ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsVUFBVUMsbUJBQU9BLENBQUM7QUFDeEIsTUFBTUMsTUFBTSxDQUFDQyxHQUFHQyxHQUFHQyxRQUFVTCxRQUFRRyxHQUFHQyxHQUFHQyxVQUFVO0FBQ3JEQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2d0ZS5qcz9mMjMwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgZ3RlID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA+PSAwXG5tb2R1bGUuZXhwb3J0cyA9IGd0ZVxuIl0sIm5hbWVzIjpbImNvbXBhcmUiLCJyZXF1aXJlIiwiZ3RlIiwiYSIsImIiLCJsb29zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gte.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/inc.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/inc.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst inc = (version, release, options, identifier, identifierBase)=>{\n    if (typeof options === \"string\") {\n        identifierBase = identifier;\n        identifier = options;\n        options = undefined;\n    }\n    try {\n        return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;\n    } catch (er) {\n        return null;\n    }\n};\nmodule.exports = inc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2luYy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFFdkIsTUFBTUMsTUFBTSxDQUFDQyxTQUFTQyxTQUFTQyxTQUFTQyxZQUFZQztJQUNsRCxJQUFJLE9BQVFGLFlBQWEsVUFBVTtRQUNqQ0UsaUJBQWlCRDtRQUNqQkEsYUFBYUQ7UUFDYkEsVUFBVUc7SUFDWjtJQUVBLElBQUk7UUFDRixPQUFPLElBQUlSLE9BQ1RHLG1CQUFtQkgsU0FBU0csUUFBUUEsT0FBTyxHQUFHQSxTQUM5Q0UsU0FDQUgsR0FBRyxDQUFDRSxTQUFTRSxZQUFZQyxnQkFBZ0JKLE9BQU87SUFDcEQsRUFBRSxPQUFPTSxJQUFJO1FBQ1gsT0FBTztJQUNUO0FBQ0Y7QUFDQUMsT0FBT0MsT0FBTyxHQUFHVCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9pbmMuanM/OGE5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5cbmNvbnN0IGluYyA9ICh2ZXJzaW9uLCByZWxlYXNlLCBvcHRpb25zLCBpZGVudGlmaWVyLCBpZGVudGlmaWVyQmFzZSkgPT4ge1xuICBpZiAodHlwZW9mIChvcHRpb25zKSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZGVudGlmaWVyQmFzZSA9IGlkZW50aWZpZXJcbiAgICBpZGVudGlmaWVyID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBTZW1WZXIoXG4gICAgICB2ZXJzaW9uIGluc3RhbmNlb2YgU2VtVmVyID8gdmVyc2lvbi52ZXJzaW9uIDogdmVyc2lvbixcbiAgICAgIG9wdGlvbnNcbiAgICApLmluYyhyZWxlYXNlLCBpZGVudGlmaWVyLCBpZGVudGlmaWVyQmFzZSkudmVyc2lvblxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gaW5jXG4iXSwibmFtZXMiOlsiU2VtVmVyIiwicmVxdWlyZSIsImluYyIsInZlcnNpb24iLCJyZWxlYXNlIiwib3B0aW9ucyIsImlkZW50aWZpZXIiLCJpZGVudGlmaWVyQmFzZSIsInVuZGVmaW5lZCIsImVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/inc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lt.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/lt.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compare = __webpack_require__(/*! ./compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst lt = (a, b, loose)=>compare(a, b, loose) < 0;\nmodule.exports = lt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2x0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN4QixNQUFNQyxLQUFLLENBQUNDLEdBQUdDLEdBQUdDLFFBQVVMLFFBQVFHLEdBQUdDLEdBQUdDLFNBQVM7QUFDbkRDLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbHQuanM/MDdiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGx0ID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA8IDBcbm1vZHVsZS5leHBvcnRzID0gbHRcbiJdLCJuYW1lcyI6WyJjb21wYXJlIiwicmVxdWlyZSIsImx0IiwiYSIsImIiLCJsb29zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lte.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/lte.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compare = __webpack_require__(/*! ./compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst lte = (a, b, loose)=>compare(a, b, loose) <= 0;\nmodule.exports = lte;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2x0ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsVUFBVUMsbUJBQU9BLENBQUM7QUFDeEIsTUFBTUMsTUFBTSxDQUFDQyxHQUFHQyxHQUFHQyxRQUFVTCxRQUFRRyxHQUFHQyxHQUFHQyxVQUFVO0FBQ3JEQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2x0ZS5qcz83Y2JkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgbHRlID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA8PSAwXG5tb2R1bGUuZXhwb3J0cyA9IGx0ZVxuIl0sIm5hbWVzIjpbImNvbXBhcmUiLCJyZXF1aXJlIiwibHRlIiwiYSIsImIiLCJsb29zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lte.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/major.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/major.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst major = (a, loose)=>new SemVer(a, loose).major;\nmodule.exports = major;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL21ham9yLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRLENBQUNDLEdBQUdDLFFBQVUsSUFBSUosT0FBT0csR0FBR0MsT0FBT0YsS0FBSztBQUN0REcsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9tYWpvci5qcz83ZWM2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IG1ham9yID0gKGEsIGxvb3NlKSA9PiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5tYWpvclxubW9kdWxlLmV4cG9ydHMgPSBtYWpvclxuIl0sIm5hbWVzIjpbIlNlbVZlciIsInJlcXVpcmUiLCJtYWpvciIsImEiLCJsb29zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/major.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/minor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/minor.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst minor = (a, loose)=>new SemVer(a, loose).minor;\nmodule.exports = minor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL21pbm9yLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRLENBQUNDLEdBQUdDLFFBQVUsSUFBSUosT0FBT0csR0FBR0MsT0FBT0YsS0FBSztBQUN0REcsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9taW5vci5qcz84MzNiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IG1pbm9yID0gKGEsIGxvb3NlKSA9PiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5taW5vclxubW9kdWxlLmV4cG9ydHMgPSBtaW5vclxuIl0sIm5hbWVzIjpbIlNlbVZlciIsInJlcXVpcmUiLCJtaW5vciIsImEiLCJsb29zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/minor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/neq.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/neq.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compare = __webpack_require__(/*! ./compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst neq = (a, b, loose)=>compare(a, b, loose) !== 0;\nmodule.exports = neq;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL25lcS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsVUFBVUMsbUJBQU9BLENBQUM7QUFDeEIsTUFBTUMsTUFBTSxDQUFDQyxHQUFHQyxHQUFHQyxRQUFVTCxRQUFRRyxHQUFHQyxHQUFHQyxXQUFXO0FBQ3REQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL25lcS5qcz9mYWM5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgbmVxID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSAhPT0gMFxubW9kdWxlLmV4cG9ydHMgPSBuZXFcbiJdLCJuYW1lcyI6WyJjb21wYXJlIiwicmVxdWlyZSIsIm5lcSIsImEiLCJiIiwibG9vc2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/neq.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/parse.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/parse.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst parse = (version, options, throwErrors = false)=>{\n    if (version instanceof SemVer) {\n        return version;\n    }\n    try {\n        return new SemVer(version, options);\n    } catch (er) {\n        if (!throwErrors) {\n            return null;\n        }\n        throw er;\n    }\n};\nmodule.exports = parse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3BhcnNlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRLENBQUNDLFNBQVNDLFNBQVNDLGNBQWMsS0FBSztJQUNsRCxJQUFJRixtQkFBbUJILFFBQVE7UUFDN0IsT0FBT0c7SUFDVDtJQUNBLElBQUk7UUFDRixPQUFPLElBQUlILE9BQU9HLFNBQVNDO0lBQzdCLEVBQUUsT0FBT0UsSUFBSTtRQUNYLElBQUksQ0FBQ0QsYUFBYTtZQUNoQixPQUFPO1FBQ1Q7UUFDQSxNQUFNQztJQUNSO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9wYXJzZS5qcz81YmY1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IHBhcnNlID0gKHZlcnNpb24sIG9wdGlvbnMsIHRocm93RXJyb3JzID0gZmFsc2UpID0+IHtcbiAgaWYgKHZlcnNpb24gaW5zdGFuY2VvZiBTZW1WZXIpIHtcbiAgICByZXR1cm4gdmVyc2lvblxuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBTZW1WZXIodmVyc2lvbiwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICBpZiAoIXRocm93RXJyb3JzKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICB0aHJvdyBlclxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VcbiJdLCJuYW1lcyI6WyJTZW1WZXIiLCJyZXF1aXJlIiwicGFyc2UiLCJ2ZXJzaW9uIiwib3B0aW9ucyIsInRocm93RXJyb3JzIiwiZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/patch.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/patch.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst patch = (a, loose)=>new SemVer(a, loose).patch;\nmodule.exports = patch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3BhdGNoLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRLENBQUNDLEdBQUdDLFFBQVUsSUFBSUosT0FBT0csR0FBR0MsT0FBT0YsS0FBSztBQUN0REcsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9wYXRjaC5qcz85NjZlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IHBhdGNoID0gKGEsIGxvb3NlKSA9PiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5wYXRjaFxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaFxuIl0sIm5hbWVzIjpbIlNlbVZlciIsInJlcXVpcmUiLCJwYXRjaCIsImEiLCJsb29zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/patch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/prerelease.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/prerelease.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/parse.js\");\nconst prerelease = (version, options)=>{\n    const parsed = parse(version, options);\n    return parsed && parsed.prerelease.length ? parsed.prerelease : null;\n};\nmodule.exports = prerelease;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3ByZXJlbGVhc2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1DLGFBQWEsQ0FBQ0MsU0FBU0M7SUFDM0IsTUFBTUMsU0FBU0wsTUFBTUcsU0FBU0M7SUFDOUIsT0FBTyxVQUFXQyxPQUFPSCxVQUFVLENBQUNJLE1BQU0sR0FBSUQsT0FBT0gsVUFBVSxHQUFHO0FBQ3BFO0FBQ0FLLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcHJlcmVsZWFzZS5qcz84YThkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCBwcmVyZWxlYXNlID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgcGFyc2VkID0gcGFyc2UodmVyc2lvbiwgb3B0aW9ucylcbiAgcmV0dXJuIChwYXJzZWQgJiYgcGFyc2VkLnByZXJlbGVhc2UubGVuZ3RoKSA/IHBhcnNlZC5wcmVyZWxlYXNlIDogbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSBwcmVyZWxlYXNlXG4iXSwibmFtZXMiOlsicGFyc2UiLCJyZXF1aXJlIiwicHJlcmVsZWFzZSIsInZlcnNpb24iLCJvcHRpb25zIiwicGFyc2VkIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/prerelease.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/rcompare.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/rcompare.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compare = __webpack_require__(/*! ./compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst rcompare = (a, b, loose)=>compare(b, a, loose);\nmodule.exports = rcompare;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3Jjb21wYXJlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN4QixNQUFNQyxXQUFXLENBQUNDLEdBQUdDLEdBQUdDLFFBQVVMLFFBQVFJLEdBQUdELEdBQUdFO0FBQ2hEQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3Jjb21wYXJlLmpzPzdlOTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCByY29tcGFyZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShiLCBhLCBsb29zZSlcbm1vZHVsZS5leHBvcnRzID0gcmNvbXBhcmVcbiJdLCJuYW1lcyI6WyJjb21wYXJlIiwicmVxdWlyZSIsInJjb21wYXJlIiwiYSIsImIiLCJsb29zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/rcompare.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/rsort.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/rsort.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compareBuild = __webpack_require__(/*! ./compare-build */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare-build.js\");\nconst rsort = (list, loose)=>list.sort((a, b)=>compareBuild(b, a, loose));\nmodule.exports = rsort;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3Jzb3J0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUM3QixNQUFNQyxRQUFRLENBQUNDLE1BQU1DLFFBQVVELEtBQUtFLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNUCxhQUFhTyxHQUFHRCxHQUFHRjtBQUN0RUksT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9yc29ydC5qcz9hYjE2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbXBhcmVCdWlsZCA9IHJlcXVpcmUoJy4vY29tcGFyZS1idWlsZCcpXG5jb25zdCByc29ydCA9IChsaXN0LCBsb29zZSkgPT4gbGlzdC5zb3J0KChhLCBiKSA9PiBjb21wYXJlQnVpbGQoYiwgYSwgbG9vc2UpKVxubW9kdWxlLmV4cG9ydHMgPSByc29ydFxuIl0sIm5hbWVzIjpbImNvbXBhcmVCdWlsZCIsInJlcXVpcmUiLCJyc29ydCIsImxpc3QiLCJsb29zZSIsInNvcnQiLCJhIiwiYiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/rsort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/satisfies.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/satisfies.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Range = __webpack_require__(/*! ../classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst satisfies = (version, range, options)=>{\n    try {\n        range = new Range(range, options);\n    } catch (er) {\n        return false;\n    }\n    return range.test(version);\n};\nmodule.exports = satisfies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NhdGlzZmllcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUMsWUFBWSxDQUFDQyxTQUFTQyxPQUFPQztJQUNqQyxJQUFJO1FBQ0ZELFFBQVEsSUFBSUosTUFBTUksT0FBT0M7SUFDM0IsRUFBRSxPQUFPQyxJQUFJO1FBQ1gsT0FBTztJQUNUO0lBQ0EsT0FBT0YsTUFBTUcsSUFBSSxDQUFDSjtBQUNwQjtBQUNBSyxPQUFPQyxPQUFPLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NhdGlzZmllcy5qcz85MzNjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBzYXRpc2ZpZXMgPSAodmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgdHJ5IHtcbiAgICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gcmFuZ2UudGVzdCh2ZXJzaW9uKVxufVxubW9kdWxlLmV4cG9ydHMgPSBzYXRpc2ZpZXNcbiJdLCJuYW1lcyI6WyJSYW5nZSIsInJlcXVpcmUiLCJzYXRpc2ZpZXMiLCJ2ZXJzaW9uIiwicmFuZ2UiLCJvcHRpb25zIiwiZXIiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/satisfies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/sort.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/sort.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst compareBuild = __webpack_require__(/*! ./compare-build */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare-build.js\");\nconst sort = (list, loose)=>list.sort((a, b)=>compareBuild(a, b, loose));\nmodule.exports = sort;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NvcnQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGVBQWVDLG1CQUFPQSxDQUFDO0FBQzdCLE1BQU1DLE9BQU8sQ0FBQ0MsTUFBTUMsUUFBVUQsS0FBS0QsSUFBSSxDQUFDLENBQUNHLEdBQUdDLElBQU1OLGFBQWFLLEdBQUdDLEdBQUdGO0FBQ3JFRyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NvcnQuanM/N2RhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlQnVpbGQgPSByZXF1aXJlKCcuL2NvbXBhcmUtYnVpbGQnKVxuY29uc3Qgc29ydCA9IChsaXN0LCBsb29zZSkgPT4gbGlzdC5zb3J0KChhLCBiKSA9PiBjb21wYXJlQnVpbGQoYSwgYiwgbG9vc2UpKVxubW9kdWxlLmV4cG9ydHMgPSBzb3J0XG4iXSwibmFtZXMiOlsiY29tcGFyZUJ1aWxkIiwicmVxdWlyZSIsInNvcnQiLCJsaXN0IiwibG9vc2UiLCJhIiwiYiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/valid.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/functions/valid.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/parse.js\");\nconst valid = (version, options)=>{\n    const v = parse(version, options);\n    return v ? v.version : null;\n};\nmodule.exports = valid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3ZhbGlkLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxRQUFRLENBQUNDLFNBQVNDO0lBQ3RCLE1BQU1DLElBQUlMLE1BQU1HLFNBQVNDO0lBQ3pCLE9BQU9DLElBQUlBLEVBQUVGLE9BQU8sR0FBRztBQUN6QjtBQUNBRyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3ZhbGlkLmpzPzVhMDUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IHZhbGlkID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgdiA9IHBhcnNlKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJldHVybiB2ID8gdi52ZXJzaW9uIDogbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZFxuIl0sIm5hbWVzIjpbInBhcnNlIiwicmVxdWlyZSIsInZhbGlkIiwidmVyc2lvbiIsIm9wdGlvbnMiLCJ2IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/valid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/index.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// just pre-load all the stuff that index.js lazily exports\n\nconst internalRe = __webpack_require__(/*! ./internal/re */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/re.js\");\nconst constants = __webpack_require__(/*! ./internal/constants */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/constants.js\");\nconst SemVer = __webpack_require__(/*! ./classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst identifiers = __webpack_require__(/*! ./internal/identifiers */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/identifiers.js\");\nconst parse = __webpack_require__(/*! ./functions/parse */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/parse.js\");\nconst valid = __webpack_require__(/*! ./functions/valid */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/valid.js\");\nconst clean = __webpack_require__(/*! ./functions/clean */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/clean.js\");\nconst inc = __webpack_require__(/*! ./functions/inc */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/inc.js\");\nconst diff = __webpack_require__(/*! ./functions/diff */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/diff.js\");\nconst major = __webpack_require__(/*! ./functions/major */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/major.js\");\nconst minor = __webpack_require__(/*! ./functions/minor */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/minor.js\");\nconst patch = __webpack_require__(/*! ./functions/patch */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/patch.js\");\nconst prerelease = __webpack_require__(/*! ./functions/prerelease */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/prerelease.js\");\nconst compare = __webpack_require__(/*! ./functions/compare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nconst rcompare = __webpack_require__(/*! ./functions/rcompare */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/rcompare.js\");\nconst compareLoose = __webpack_require__(/*! ./functions/compare-loose */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare-loose.js\");\nconst compareBuild = __webpack_require__(/*! ./functions/compare-build */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare-build.js\");\nconst sort = __webpack_require__(/*! ./functions/sort */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/sort.js\");\nconst rsort = __webpack_require__(/*! ./functions/rsort */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/rsort.js\");\nconst gt = __webpack_require__(/*! ./functions/gt */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gt.js\");\nconst lt = __webpack_require__(/*! ./functions/lt */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lt.js\");\nconst eq = __webpack_require__(/*! ./functions/eq */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/eq.js\");\nconst neq = __webpack_require__(/*! ./functions/neq */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/neq.js\");\nconst gte = __webpack_require__(/*! ./functions/gte */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gte.js\");\nconst lte = __webpack_require__(/*! ./functions/lte */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lte.js\");\nconst cmp = __webpack_require__(/*! ./functions/cmp */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/cmp.js\");\nconst coerce = __webpack_require__(/*! ./functions/coerce */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/coerce.js\");\nconst Comparator = __webpack_require__(/*! ./classes/comparator */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/comparator.js\");\nconst Range = __webpack_require__(/*! ./classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst satisfies = __webpack_require__(/*! ./functions/satisfies */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/satisfies.js\");\nconst toComparators = __webpack_require__(/*! ./ranges/to-comparators */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/to-comparators.js\");\nconst maxSatisfying = __webpack_require__(/*! ./ranges/max-satisfying */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/max-satisfying.js\");\nconst minSatisfying = __webpack_require__(/*! ./ranges/min-satisfying */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/min-satisfying.js\");\nconst minVersion = __webpack_require__(/*! ./ranges/min-version */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/min-version.js\");\nconst validRange = __webpack_require__(/*! ./ranges/valid */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/valid.js\");\nconst outside = __webpack_require__(/*! ./ranges/outside */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/outside.js\");\nconst gtr = __webpack_require__(/*! ./ranges/gtr */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/gtr.js\");\nconst ltr = __webpack_require__(/*! ./ranges/ltr */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/ltr.js\");\nconst intersects = __webpack_require__(/*! ./ranges/intersects */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/intersects.js\");\nconst simplifyRange = __webpack_require__(/*! ./ranges/simplify */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/simplify.js\");\nconst subset = __webpack_require__(/*! ./ranges/subset */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/subset.js\");\nmodule.exports = {\n    parse,\n    valid,\n    clean,\n    inc,\n    diff,\n    major,\n    minor,\n    patch,\n    prerelease,\n    compare,\n    rcompare,\n    compareLoose,\n    compareBuild,\n    sort,\n    rsort,\n    gt,\n    lt,\n    eq,\n    neq,\n    gte,\n    lte,\n    cmp,\n    coerce,\n    Comparator,\n    Range,\n    satisfies,\n    toComparators,\n    maxSatisfying,\n    minSatisfying,\n    minVersion,\n    validRange,\n    outside,\n    gtr,\n    ltr,\n    intersects,\n    simplifyRange,\n    subset,\n    SemVer,\n    re: internalRe.re,\n    src: internalRe.src,\n    tokens: internalRe.t,\n    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n    RELEASE_TYPES: constants.RELEASE_TYPES,\n    compareIdentifiers: identifiers.compareIdentifiers,\n    rcompareIdentifiers: identifiers.rcompareIdentifiers\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEOztBQUMzRCxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUN2QixNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQztBQUM1QixNQUFNSSxRQUFRSixtQkFBT0EsQ0FBQztBQUN0QixNQUFNSyxRQUFRTCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNTSxRQUFRTixtQkFBT0EsQ0FBQztBQUN0QixNQUFNTyxNQUFNUCxtQkFBT0EsQ0FBQztBQUNwQixNQUFNUSxPQUFPUixtQkFBT0EsQ0FBQztBQUNyQixNQUFNUyxRQUFRVCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNVSxRQUFRVixtQkFBT0EsQ0FBQztBQUN0QixNQUFNVyxRQUFRWCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNWSxhQUFhWixtQkFBT0EsQ0FBQztBQUMzQixNQUFNYSxVQUFVYixtQkFBT0EsQ0FBQztBQUN4QixNQUFNYyxXQUFXZCxtQkFBT0EsQ0FBQztBQUN6QixNQUFNZSxlQUFlZixtQkFBT0EsQ0FBQztBQUM3QixNQUFNZ0IsZUFBZWhCLG1CQUFPQSxDQUFDO0FBQzdCLE1BQU1pQixPQUFPakIsbUJBQU9BLENBQUM7QUFDckIsTUFBTWtCLFFBQVFsQixtQkFBT0EsQ0FBQztBQUN0QixNQUFNbUIsS0FBS25CLG1CQUFPQSxDQUFDO0FBQ25CLE1BQU1vQixLQUFLcEIsbUJBQU9BLENBQUM7QUFDbkIsTUFBTXFCLEtBQUtyQixtQkFBT0EsQ0FBQztBQUNuQixNQUFNc0IsTUFBTXRCLG1CQUFPQSxDQUFDO0FBQ3BCLE1BQU11QixNQUFNdkIsbUJBQU9BLENBQUM7QUFDcEIsTUFBTXdCLE1BQU14QixtQkFBT0EsQ0FBQztBQUNwQixNQUFNeUIsTUFBTXpCLG1CQUFPQSxDQUFDO0FBQ3BCLE1BQU0wQixTQUFTMUIsbUJBQU9BLENBQUM7QUFDdkIsTUFBTTJCLGFBQWEzQixtQkFBT0EsQ0FBQztBQUMzQixNQUFNNEIsUUFBUTVCLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU02QixZQUFZN0IsbUJBQU9BLENBQUM7QUFDMUIsTUFBTThCLGdCQUFnQjlCLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU0rQixnQkFBZ0IvQixtQkFBT0EsQ0FBQztBQUM5QixNQUFNZ0MsZ0JBQWdCaEMsbUJBQU9BLENBQUM7QUFDOUIsTUFBTWlDLGFBQWFqQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNa0MsYUFBYWxDLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU1tQyxVQUFVbkMsbUJBQU9BLENBQUM7QUFDeEIsTUFBTW9DLE1BQU1wQyxtQkFBT0EsQ0FBQztBQUNwQixNQUFNcUMsTUFBTXJDLG1CQUFPQSxDQUFDO0FBQ3BCLE1BQU1zQyxhQUFhdEMsbUJBQU9BLENBQUM7QUFDM0IsTUFBTXVDLGdCQUFnQnZDLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU13QyxTQUFTeEMsbUJBQU9BLENBQUM7QUFDdkJ5QyxPQUFPQyxPQUFPLEdBQUc7SUFDZnRDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0F0QztJQUNBeUMsSUFBSTVDLFdBQVc0QyxFQUFFO0lBQ2pCQyxLQUFLN0MsV0FBVzZDLEdBQUc7SUFDbkJDLFFBQVE5QyxXQUFXK0MsQ0FBQztJQUNwQkMscUJBQXFCOUMsVUFBVThDLG1CQUFtQjtJQUNsREMsZUFBZS9DLFVBQVUrQyxhQUFhO0lBQ3RDQyxvQkFBb0I5QyxZQUFZOEMsa0JBQWtCO0lBQ2xEQyxxQkFBcUIvQyxZQUFZK0MsbUJBQW1CO0FBQ3REIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvaW5kZXguanM/N2ZkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqdXN0IHByZS1sb2FkIGFsbCB0aGUgc3R1ZmYgdGhhdCBpbmRleC5qcyBsYXppbHkgZXhwb3J0c1xuY29uc3QgaW50ZXJuYWxSZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvcmUnKVxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9jb25zdGFudHMnKVxuY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBpZGVudGlmaWVycyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvaWRlbnRpZmllcnMnKVxuY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9wYXJzZScpXG5jb25zdCB2YWxpZCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3ZhbGlkJylcbmNvbnN0IGNsZWFuID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvY2xlYW4nKVxuY29uc3QgaW5jID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvaW5jJylcbmNvbnN0IGRpZmYgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9kaWZmJylcbmNvbnN0IG1ham9yID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvbWFqb3InKVxuY29uc3QgbWlub3IgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9taW5vcicpXG5jb25zdCBwYXRjaCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3BhdGNoJylcbmNvbnN0IHByZXJlbGVhc2UgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9wcmVyZWxlYXNlJylcbmNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jb21wYXJlJylcbmNvbnN0IHJjb21wYXJlID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvcmNvbXBhcmUnKVxuY29uc3QgY29tcGFyZUxvb3NlID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvY29tcGFyZS1sb29zZScpXG5jb25zdCBjb21wYXJlQnVpbGQgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jb21wYXJlLWJ1aWxkJylcbmNvbnN0IHNvcnQgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9zb3J0JylcbmNvbnN0IHJzb3J0ID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvcnNvcnQnKVxuY29uc3QgZ3QgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9ndCcpXG5jb25zdCBsdCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2x0JylcbmNvbnN0IGVxID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvZXEnKVxuY29uc3QgbmVxID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvbmVxJylcbmNvbnN0IGd0ZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2d0ZScpXG5jb25zdCBsdGUgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9sdGUnKVxuY29uc3QgY21wID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvY21wJylcbmNvbnN0IGNvZXJjZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvZXJjZScpXG5jb25zdCBDb21wYXJhdG9yID0gcmVxdWlyZSgnLi9jbGFzc2VzL2NvbXBhcmF0b3InKVxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3Qgc2F0aXNmaWVzID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvc2F0aXNmaWVzJylcbmNvbnN0IHRvQ29tcGFyYXRvcnMgPSByZXF1aXJlKCcuL3Jhbmdlcy90by1jb21wYXJhdG9ycycpXG5jb25zdCBtYXhTYXRpc2Z5aW5nID0gcmVxdWlyZSgnLi9yYW5nZXMvbWF4LXNhdGlzZnlpbmcnKVxuY29uc3QgbWluU2F0aXNmeWluZyA9IHJlcXVpcmUoJy4vcmFuZ2VzL21pbi1zYXRpc2Z5aW5nJylcbmNvbnN0IG1pblZlcnNpb24gPSByZXF1aXJlKCcuL3Jhbmdlcy9taW4tdmVyc2lvbicpXG5jb25zdCB2YWxpZFJhbmdlID0gcmVxdWlyZSgnLi9yYW5nZXMvdmFsaWQnKVxuY29uc3Qgb3V0c2lkZSA9IHJlcXVpcmUoJy4vcmFuZ2VzL291dHNpZGUnKVxuY29uc3QgZ3RyID0gcmVxdWlyZSgnLi9yYW5nZXMvZ3RyJylcbmNvbnN0IGx0ciA9IHJlcXVpcmUoJy4vcmFuZ2VzL2x0cicpXG5jb25zdCBpbnRlcnNlY3RzID0gcmVxdWlyZSgnLi9yYW5nZXMvaW50ZXJzZWN0cycpXG5jb25zdCBzaW1wbGlmeVJhbmdlID0gcmVxdWlyZSgnLi9yYW5nZXMvc2ltcGxpZnknKVxuY29uc3Qgc3Vic2V0ID0gcmVxdWlyZSgnLi9yYW5nZXMvc3Vic2V0Jylcbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZSxcbiAgdmFsaWQsXG4gIGNsZWFuLFxuICBpbmMsXG4gIGRpZmYsXG4gIG1ham9yLFxuICBtaW5vcixcbiAgcGF0Y2gsXG4gIHByZXJlbGVhc2UsXG4gIGNvbXBhcmUsXG4gIHJjb21wYXJlLFxuICBjb21wYXJlTG9vc2UsXG4gIGNvbXBhcmVCdWlsZCxcbiAgc29ydCxcbiAgcnNvcnQsXG4gIGd0LFxuICBsdCxcbiAgZXEsXG4gIG5lcSxcbiAgZ3RlLFxuICBsdGUsXG4gIGNtcCxcbiAgY29lcmNlLFxuICBDb21wYXJhdG9yLFxuICBSYW5nZSxcbiAgc2F0aXNmaWVzLFxuICB0b0NvbXBhcmF0b3JzLFxuICBtYXhTYXRpc2Z5aW5nLFxuICBtaW5TYXRpc2Z5aW5nLFxuICBtaW5WZXJzaW9uLFxuICB2YWxpZFJhbmdlLFxuICBvdXRzaWRlLFxuICBndHIsXG4gIGx0cixcbiAgaW50ZXJzZWN0cyxcbiAgc2ltcGxpZnlSYW5nZSxcbiAgc3Vic2V0LFxuICBTZW1WZXIsXG4gIHJlOiBpbnRlcm5hbFJlLnJlLFxuICBzcmM6IGludGVybmFsUmUuc3JjLFxuICB0b2tlbnM6IGludGVybmFsUmUudCxcbiAgU0VNVkVSX1NQRUNfVkVSU0lPTjogY29uc3RhbnRzLlNFTVZFUl9TUEVDX1ZFUlNJT04sXG4gIFJFTEVBU0VfVFlQRVM6IGNvbnN0YW50cy5SRUxFQVNFX1RZUEVTLFxuICBjb21wYXJlSWRlbnRpZmllcnM6IGlkZW50aWZpZXJzLmNvbXBhcmVJZGVudGlmaWVycyxcbiAgcmNvbXBhcmVJZGVudGlmaWVyczogaWRlbnRpZmllcnMucmNvbXBhcmVJZGVudGlmaWVycyxcbn1cbiJdLCJuYW1lcyI6WyJpbnRlcm5hbFJlIiwicmVxdWlyZSIsImNvbnN0YW50cyIsIlNlbVZlciIsImlkZW50aWZpZXJzIiwicGFyc2UiLCJ2YWxpZCIsImNsZWFuIiwiaW5jIiwiZGlmZiIsIm1ham9yIiwibWlub3IiLCJwYXRjaCIsInByZXJlbGVhc2UiLCJjb21wYXJlIiwicmNvbXBhcmUiLCJjb21wYXJlTG9vc2UiLCJjb21wYXJlQnVpbGQiLCJzb3J0IiwicnNvcnQiLCJndCIsImx0IiwiZXEiLCJuZXEiLCJndGUiLCJsdGUiLCJjbXAiLCJjb2VyY2UiLCJDb21wYXJhdG9yIiwiUmFuZ2UiLCJzYXRpc2ZpZXMiLCJ0b0NvbXBhcmF0b3JzIiwibWF4U2F0aXNmeWluZyIsIm1pblNhdGlzZnlpbmciLCJtaW5WZXJzaW9uIiwidmFsaWRSYW5nZSIsIm91dHNpZGUiLCJndHIiLCJsdHIiLCJpbnRlcnNlY3RzIiwic2ltcGxpZnlSYW5nZSIsInN1YnNldCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZSIsInNyYyIsInRva2VucyIsInQiLCJTRU1WRVJfU1BFQ19WRVJTSU9OIiwiUkVMRUFTRV9UWVBFUyIsImNvbXBhcmVJZGVudGlmaWVycyIsInJjb21wYXJlSWRlbnRpZmllcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/constants.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/internal/constants.js ***!
  \********************************************************************************/
/***/ ((module) => {

eval("// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\n\nconst SEMVER_SPEC_VERSION = \"2.0.0\";\nconst MAX_LENGTH = 256;\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16;\n// Max safe length for a build identifier. The max length minus 6 characters for\n// the shortest version with a build 0.0.0+BUILD.\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;\nconst RELEASE_TYPES = [\n    \"major\",\n    \"premajor\",\n    \"minor\",\n    \"preminor\",\n    \"patch\",\n    \"prepatch\",\n    \"prerelease\"\n];\nmodule.exports = {\n    MAX_LENGTH,\n    MAX_SAFE_COMPONENT_LENGTH,\n    MAX_SAFE_BUILD_LENGTH,\n    MAX_SAFE_INTEGER,\n    RELEASE_TYPES,\n    SEMVER_SPEC_VERSION,\n    FLAG_INCLUDE_PRERELEASE: 1,\n    FLAG_LOOSE: 2\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTtBQUN0RSxvREFBb0Q7O0FBQ3BELE1BQU1BLHNCQUFzQjtBQUU1QixNQUFNQyxhQUFhO0FBQ25CLE1BQU1DLG1CQUFtQkMsT0FBT0QsZ0JBQWdCLElBQ2hELHdCQUF3QixHQUFHO0FBRTNCLHdDQUF3QztBQUN4QyxNQUFNRSw0QkFBNEI7QUFFbEMsZ0ZBQWdGO0FBQ2hGLGlEQUFpRDtBQUNqRCxNQUFNQyx3QkFBd0JKLGFBQWE7QUFFM0MsTUFBTUssZ0JBQWdCO0lBQ3BCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFREMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZQO0lBQ0FHO0lBQ0FDO0lBQ0FIO0lBQ0FJO0lBQ0FOO0lBQ0FTLHlCQUF5QjtJQUN6QkMsWUFBWTtBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvY29uc3RhbnRzLmpzP2U1ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTm90ZTogdGhpcyBpcyB0aGUgc2VtdmVyLm9yZyB2ZXJzaW9uIG9mIHRoZSBzcGVjIHRoYXQgaXQgaW1wbGVtZW50c1xuLy8gTm90IG5lY2Vzc2FyaWx5IHRoZSBwYWNrYWdlIHZlcnNpb24gb2YgdGhpcyBjb2RlLlxuY29uc3QgU0VNVkVSX1NQRUNfVkVSU0lPTiA9ICcyLjAuMCdcblxuY29uc3QgTUFYX0xFTkdUSCA9IDI1NlxuY29uc3QgTUFYX1NBRkVfSU5URUdFUiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA5MDA3MTk5MjU0NzQwOTkxXG5cbi8vIE1heCBzYWZlIHNlZ21lbnQgbGVuZ3RoIGZvciBjb2VyY2lvbi5cbmNvbnN0IE1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEggPSAxNlxuXG4vLyBNYXggc2FmZSBsZW5ndGggZm9yIGEgYnVpbGQgaWRlbnRpZmllci4gVGhlIG1heCBsZW5ndGggbWludXMgNiBjaGFyYWN0ZXJzIGZvclxuLy8gdGhlIHNob3J0ZXN0IHZlcnNpb24gd2l0aCBhIGJ1aWxkIDAuMC4wK0JVSUxELlxuY29uc3QgTUFYX1NBRkVfQlVJTERfTEVOR1RIID0gTUFYX0xFTkdUSCAtIDZcblxuY29uc3QgUkVMRUFTRV9UWVBFUyA9IFtcbiAgJ21ham9yJyxcbiAgJ3ByZW1ham9yJyxcbiAgJ21pbm9yJyxcbiAgJ3ByZW1pbm9yJyxcbiAgJ3BhdGNoJyxcbiAgJ3ByZXBhdGNoJyxcbiAgJ3ByZXJlbGVhc2UnLFxuXVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTUFYX0xFTkdUSCxcbiAgTUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSCxcbiAgTUFYX1NBRkVfQlVJTERfTEVOR1RILFxuICBNQVhfU0FGRV9JTlRFR0VSLFxuICBSRUxFQVNFX1RZUEVTLFxuICBTRU1WRVJfU1BFQ19WRVJTSU9OLFxuICBGTEFHX0lOQ0xVREVfUFJFUkVMRUFTRTogMGIwMDEsXG4gIEZMQUdfTE9PU0U6IDBiMDEwLFxufVxuIl0sIm5hbWVzIjpbIlNFTVZFUl9TUEVDX1ZFUlNJT04iLCJNQVhfTEVOR1RIIiwiTUFYX1NBRkVfSU5URUdFUiIsIk51bWJlciIsIk1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEgiLCJNQVhfU0FGRV9CVUlMRF9MRU5HVEgiLCJSRUxFQVNFX1RZUEVTIiwibW9kdWxlIiwiZXhwb3J0cyIsIkZMQUdfSU5DTFVERV9QUkVSRUxFQVNFIiwiRkxBR19MT09TRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/debug.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/internal/debug.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\nconst debug = typeof process === \"object\" && process.env && process.env.NODE_DEBUG && /\\bsemver\\b/i.test(process.env.NODE_DEBUG) ? (...args)=>console.error(\"SEMVER\", ...args) : ()=>{};\nmodule.exports = debug;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvZGVidWcuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVEsT0FDTEMsWUFBWSxZQUNuQkEsUUFBUUMsR0FBRyxJQUNYRCxRQUFRQyxHQUFHLENBQUNDLFVBQVUsSUFDdEIsY0FBY0MsSUFBSSxDQUFDSCxRQUFRQyxHQUFHLENBQUNDLFVBQVUsSUFDdkMsQ0FBQyxHQUFHRSxPQUFTQyxRQUFRQyxLQUFLLENBQUMsYUFBYUYsUUFDeEMsS0FBTztBQUVYRyxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvZGVidWcuanM/MTQxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWJ1ZyA9IChcbiAgdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmXG4gIHByb2Nlc3MuZW52ICYmXG4gIHByb2Nlc3MuZW52Lk5PREVfREVCVUcgJiZcbiAgL1xcYnNlbXZlclxcYi9pLnRlc3QocHJvY2Vzcy5lbnYuTk9ERV9ERUJVRylcbikgPyAoLi4uYXJncykgPT4gY29uc29sZS5lcnJvcignU0VNVkVSJywgLi4uYXJncylcbiAgOiAoKSA9PiB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYnVnXG4iXSwibmFtZXMiOlsiZGVidWciLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9ERUJVRyIsInRlc3QiLCJhcmdzIiwiY29uc29sZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/debug.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/identifiers.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/internal/identifiers.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\nconst numeric = /^[0-9]+$/;\nconst compareIdentifiers = (a, b)=>{\n    const anum = numeric.test(a);\n    const bnum = numeric.test(b);\n    if (anum && bnum) {\n        a = +a;\n        b = +b;\n    }\n    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;\n};\nconst rcompareIdentifiers = (a, b)=>compareIdentifiers(b, a);\nmodule.exports = {\n    compareIdentifiers,\n    rcompareIdentifiers\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvaWRlbnRpZmllcnMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFVBQVU7QUFDaEIsTUFBTUMscUJBQXFCLENBQUNDLEdBQUdDO0lBQzdCLE1BQU1DLE9BQU9KLFFBQVFLLElBQUksQ0FBQ0g7SUFDMUIsTUFBTUksT0FBT04sUUFBUUssSUFBSSxDQUFDRjtJQUUxQixJQUFJQyxRQUFRRSxNQUFNO1FBQ2hCSixJQUFJLENBQUNBO1FBQ0xDLElBQUksQ0FBQ0E7SUFDUDtJQUVBLE9BQU9ELE1BQU1DLElBQUksSUFDYixRQUFTLENBQUNHLE9BQVEsQ0FBQyxJQUNuQixRQUFTLENBQUNGLE9BQVEsSUFDbEJGLElBQUlDLElBQUksQ0FBQyxJQUNUO0FBQ047QUFFQSxNQUFNSSxzQkFBc0IsQ0FBQ0wsR0FBR0MsSUFBTUYsbUJBQW1CRSxHQUFHRDtBQUU1RE0sT0FBT0MsT0FBTyxHQUFHO0lBQ2ZSO0lBQ0FNO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9pZGVudGlmaWVycy5qcz8xZjBmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG51bWVyaWMgPSAvXlswLTldKyQvXG5jb25zdCBjb21wYXJlSWRlbnRpZmllcnMgPSAoYSwgYikgPT4ge1xuICBjb25zdCBhbnVtID0gbnVtZXJpYy50ZXN0KGEpXG4gIGNvbnN0IGJudW0gPSBudW1lcmljLnRlc3QoYilcblxuICBpZiAoYW51bSAmJiBibnVtKSB7XG4gICAgYSA9ICthXG4gICAgYiA9ICtiXG4gIH1cblxuICByZXR1cm4gYSA9PT0gYiA/IDBcbiAgICA6IChhbnVtICYmICFibnVtKSA/IC0xXG4gICAgOiAoYm51bSAmJiAhYW51bSkgPyAxXG4gICAgOiBhIDwgYiA/IC0xXG4gICAgOiAxXG59XG5cbmNvbnN0IHJjb21wYXJlSWRlbnRpZmllcnMgPSAoYSwgYikgPT4gY29tcGFyZUlkZW50aWZpZXJzKGIsIGEpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wYXJlSWRlbnRpZmllcnMsXG4gIHJjb21wYXJlSWRlbnRpZmllcnMsXG59XG4iXSwibmFtZXMiOlsibnVtZXJpYyIsImNvbXBhcmVJZGVudGlmaWVycyIsImEiLCJiIiwiYW51bSIsInRlc3QiLCJibnVtIiwicmNvbXBhcmVJZGVudGlmaWVycyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/identifiers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/parse-options.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/internal/parse-options.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("// parse out just the options we care about\n\nconst looseOption = Object.freeze({\n    loose: true\n});\nconst emptyOpts = Object.freeze({});\nconst parseOptions = (options)=>{\n    if (!options) {\n        return emptyOpts;\n    }\n    if (typeof options !== \"object\") {\n        return looseOption;\n    }\n    return options;\n};\nmodule.exports = parseOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvcGFyc2Utb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSwyQ0FBMkM7O0FBQzNDLE1BQU1BLGNBQWNDLE9BQU9DLE1BQU0sQ0FBQztJQUFFQyxPQUFPO0FBQUs7QUFDaEQsTUFBTUMsWUFBWUgsT0FBT0MsTUFBTSxDQUFDLENBQUU7QUFDbEMsTUFBTUcsZUFBZUMsQ0FBQUE7SUFDbkIsSUFBSSxDQUFDQSxTQUFTO1FBQ1osT0FBT0Y7SUFDVDtJQUVBLElBQUksT0FBT0UsWUFBWSxVQUFVO1FBQy9CLE9BQU9OO0lBQ1Q7SUFFQSxPQUFPTTtBQUNUO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9wYXJzZS1vcHRpb25zLmpzPzcwZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFyc2Ugb3V0IGp1c3QgdGhlIG9wdGlvbnMgd2UgY2FyZSBhYm91dFxuY29uc3QgbG9vc2VPcHRpb24gPSBPYmplY3QuZnJlZXplKHsgbG9vc2U6IHRydWUgfSlcbmNvbnN0IGVtcHR5T3B0cyA9IE9iamVjdC5mcmVlemUoeyB9KVxuY29uc3QgcGFyc2VPcHRpb25zID0gb3B0aW9ucyA9PiB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIHJldHVybiBlbXB0eU9wdHNcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbG9vc2VPcHRpb25cbiAgfVxuXG4gIHJldHVybiBvcHRpb25zXG59XG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlT3B0aW9uc1xuIl0sIm5hbWVzIjpbImxvb3NlT3B0aW9uIiwiT2JqZWN0IiwiZnJlZXplIiwibG9vc2UiLCJlbXB0eU9wdHMiLCJwYXJzZU9wdGlvbnMiLCJvcHRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/parse-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/re.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/internal/re.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nconst { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/constants.js\");\nconst debug = __webpack_require__(/*! ./debug */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/debug.js\");\nexports = module.exports = {};\n// The actual regexps go on exports.re\nconst re = exports.re = [];\nconst safeRe = exports.safeRe = [];\nconst src = exports.src = [];\nconst t = exports.t = {};\nlet R = 0;\nconst LETTERDASHNUMBER = \"[a-zA-Z0-9-]\";\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nconst safeRegexReplacements = [\n    [\n        \"\\\\s\",\n        1\n    ],\n    [\n        \"\\\\d\",\n        MAX_LENGTH\n    ],\n    [\n        LETTERDASHNUMBER,\n        MAX_SAFE_BUILD_LENGTH\n    ]\n];\nconst makeSafeRegex = (value)=>{\n    for (const [token, max] of safeRegexReplacements){\n        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);\n    }\n    return value;\n};\nconst createToken = (name, value, isGlobal)=>{\n    const safe = makeSafeRegex(value);\n    const index = R++;\n    debug(name, index, value);\n    t[name] = index;\n    src[index] = value;\n    re[index] = new RegExp(value, isGlobal ? \"g\" : undefined);\n    safeRe[index] = new RegExp(safe, isGlobal ? \"g\" : undefined);\n};\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\ncreateToken(\"NUMERICIDENTIFIER\", \"0|[1-9]\\\\d*\");\ncreateToken(\"NUMERICIDENTIFIERLOOSE\", \"\\\\d+\");\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\ncreateToken(\"NONNUMERICIDENTIFIER\", `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);\n// ## Main Version\n// Three dot-separated numeric identifiers.\ncreateToken(\"MAINVERSION\", `(${src[t.NUMERICIDENTIFIER]})\\\\.` + `(${src[t.NUMERICIDENTIFIER]})\\\\.` + `(${src[t.NUMERICIDENTIFIER]})`);\ncreateToken(\"MAINVERSIONLOOSE\", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\ncreateToken(\"PRERELEASEIDENTIFIER\", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);\ncreateToken(\"PRERELEASEIDENTIFIERLOOSE\", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\ncreateToken(\"PRERELEASE\", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`);\ncreateToken(\"PRERELEASELOOSE\", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\ncreateToken(\"BUILDIDENTIFIER\", `${LETTERDASHNUMBER}+`);\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\ncreateToken(\"BUILD\", `(?:\\\\+(${src[t.BUILDIDENTIFIER]}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`);\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\ncreateToken(\"FULLPLAIN\", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);\ncreateToken(\"FULL\", `^${src[t.FULLPLAIN]}$`);\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken(\"LOOSEPLAIN\", `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);\ncreateToken(\"LOOSE\", `^${src[t.LOOSEPLAIN]}$`);\ncreateToken(\"GTLT\", \"((?:<|>)?=?)\");\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken(\"XRANGEIDENTIFIERLOOSE\", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`);\ncreateToken(\"XRANGEIDENTIFIER\", `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`);\ncreateToken(\"XRANGEPLAIN\", `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);\ncreateToken(\"XRANGEPLAINLOOSE\", `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);\ncreateToken(\"XRANGE\", `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`);\ncreateToken(\"XRANGELOOSE\", `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`);\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken(\"COERCE\", `${\"(^|[^\\\\d])\" + \"(\\\\d{1,\"}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:$|[^\\\\d])`);\ncreateToken(\"COERCERTL\", src[t.COERCE], true);\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken(\"LONETILDE\", \"(?:~>?)\");\ncreateToken(\"TILDETRIM\", `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true);\nexports.tildeTrimReplace = \"$1~\";\ncreateToken(\"TILDE\", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);\ncreateToken(\"TILDELOOSE\", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken(\"LONECARET\", \"(?:\\\\^)\");\ncreateToken(\"CARETTRIM\", `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true);\nexports.caretTrimReplace = \"$1^\";\ncreateToken(\"CARET\", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);\ncreateToken(\"CARETLOOSE\", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken(\"COMPARATORLOOSE\", `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`);\ncreateToken(\"COMPARATOR\", `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`);\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken(\"COMPARATORTRIM\", `(\\\\s*)${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);\nexports.comparatorTrimReplace = \"$1$2$3\";\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken(\"HYPHENRANGE\", `^\\\\s*(${src[t.XRANGEPLAIN]})` + `\\\\s+-\\\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\\\s*$`);\ncreateToken(\"HYPHENRANGELOOSE\", `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\\\s+-\\\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\\\s*$`);\n// Star ranges basically just allow anything at all.\ncreateToken(\"STAR\", \"(<|>)?=?\\\\s*\\\\*\");\n// >=0.0.0 is like a star\ncreateToken(\"GTE0\", \"^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$\");\ncreateToken(\"GTE0PRE\", \"^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/internal/re.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/gtr.js":
/*!************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/gtr.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Determine if version is greater than all the versions possible in the range.\n\nconst outside = __webpack_require__(/*! ./outside */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/outside.js\");\nconst gtr = (version, range, options)=>outside(version, range, \">\", options);\nmodule.exports = gtr;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2d0ci5qcyIsIm1hcHBpbmdzIjoiQUFBQSwrRUFBK0U7O0FBQy9FLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1DLE1BQU0sQ0FBQ0MsU0FBU0MsT0FBT0MsVUFBWUwsUUFBUUcsU0FBU0MsT0FBTyxLQUFLQztBQUN0RUMsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9ndHIuanM/Y2UzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZXRlcm1pbmUgaWYgdmVyc2lvbiBpcyBncmVhdGVyIHRoYW4gYWxsIHRoZSB2ZXJzaW9ucyBwb3NzaWJsZSBpbiB0aGUgcmFuZ2UuXG5jb25zdCBvdXRzaWRlID0gcmVxdWlyZSgnLi9vdXRzaWRlJylcbmNvbnN0IGd0ciA9ICh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucykgPT4gb3V0c2lkZSh2ZXJzaW9uLCByYW5nZSwgJz4nLCBvcHRpb25zKVxubW9kdWxlLmV4cG9ydHMgPSBndHJcbiJdLCJuYW1lcyI6WyJvdXRzaWRlIiwicmVxdWlyZSIsImd0ciIsInZlcnNpb24iLCJyYW5nZSIsIm9wdGlvbnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/gtr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/intersects.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/intersects.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Range = __webpack_require__(/*! ../classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst intersects = (r1, r2, options)=>{\n    r1 = new Range(r1, options);\n    r2 = new Range(r2, options);\n    return r1.intersects(r2, options);\n};\nmodule.exports = intersects;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2ludGVyc2VjdHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1DLGFBQWEsQ0FBQ0MsSUFBSUMsSUFBSUM7SUFDMUJGLEtBQUssSUFBSUgsTUFBTUcsSUFBSUU7SUFDbkJELEtBQUssSUFBSUosTUFBTUksSUFBSUM7SUFDbkIsT0FBT0YsR0FBR0QsVUFBVSxDQUFDRSxJQUFJQztBQUMzQjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2ludGVyc2VjdHMuanM/OTdhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgaW50ZXJzZWN0cyA9IChyMSwgcjIsIG9wdGlvbnMpID0+IHtcbiAgcjEgPSBuZXcgUmFuZ2UocjEsIG9wdGlvbnMpXG4gIHIyID0gbmV3IFJhbmdlKHIyLCBvcHRpb25zKVxuICByZXR1cm4gcjEuaW50ZXJzZWN0cyhyMiwgb3B0aW9ucylcbn1cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0c1xuIl0sIm5hbWVzIjpbIlJhbmdlIiwicmVxdWlyZSIsImludGVyc2VjdHMiLCJyMSIsInIyIiwib3B0aW9ucyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/intersects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/ltr.js":
/*!************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/ltr.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst outside = __webpack_require__(/*! ./outside */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/outside.js\");\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options)=>outside(version, range, \"<\", options);\nmodule.exports = ltr;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2x0ci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsVUFBVUMsbUJBQU9BLENBQUM7QUFDeEIsMkVBQTJFO0FBQzNFLE1BQU1DLE1BQU0sQ0FBQ0MsU0FBU0MsT0FBT0MsVUFBWUwsUUFBUUcsU0FBU0MsT0FBTyxLQUFLQztBQUN0RUMsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9sdHIuanM/MDQ0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvdXRzaWRlID0gcmVxdWlyZSgnLi9vdXRzaWRlJylcbi8vIERldGVybWluZSBpZiB2ZXJzaW9uIGlzIGxlc3MgdGhhbiBhbGwgdGhlIHZlcnNpb25zIHBvc3NpYmxlIGluIHRoZSByYW5nZVxuY29uc3QgbHRyID0gKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSA9PiBvdXRzaWRlKHZlcnNpb24sIHJhbmdlLCAnPCcsIG9wdGlvbnMpXG5tb2R1bGUuZXhwb3J0cyA9IGx0clxuIl0sIm5hbWVzIjpbIm91dHNpZGUiLCJyZXF1aXJlIiwibHRyIiwidmVyc2lvbiIsInJhbmdlIiwib3B0aW9ucyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/ltr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/max-satisfying.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/max-satisfying.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst Range = __webpack_require__(/*! ../classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst maxSatisfying = (versions, range, options)=>{\n    let max = null;\n    let maxSV = null;\n    let rangeObj = null;\n    try {\n        rangeObj = new Range(range, options);\n    } catch (er) {\n        return null;\n    }\n    versions.forEach((v)=>{\n        if (rangeObj.test(v)) {\n            // satisfies(v, range, options)\n            if (!max || maxSV.compare(v) === -1) {\n                // compare(max, v, true)\n                max = v;\n                maxSV = new SemVer(max, options);\n            }\n        }\n    });\n    return max;\n};\nmodule.exports = maxSatisfying;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21heC1zYXRpc2Z5aW5nLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUV0QixNQUFNRSxnQkFBZ0IsQ0FBQ0MsVUFBVUMsT0FBT0M7SUFDdEMsSUFBSUMsTUFBTTtJQUNWLElBQUlDLFFBQVE7SUFDWixJQUFJQyxXQUFXO0lBQ2YsSUFBSTtRQUNGQSxXQUFXLElBQUlQLE1BQU1HLE9BQU9DO0lBQzlCLEVBQUUsT0FBT0ksSUFBSTtRQUNYLE9BQU87SUFDVDtJQUNBTixTQUFTTyxPQUFPLENBQUMsQ0FBQ0M7UUFDaEIsSUFBSUgsU0FBU0ksSUFBSSxDQUFDRCxJQUFJO1lBQ3BCLCtCQUErQjtZQUMvQixJQUFJLENBQUNMLE9BQU9DLE1BQU1NLE9BQU8sQ0FBQ0YsT0FBTyxDQUFDLEdBQUc7Z0JBQ25DLHdCQUF3QjtnQkFDeEJMLE1BQU1LO2dCQUNOSixRQUFRLElBQUlSLE9BQU9PLEtBQUtEO1lBQzFCO1FBQ0Y7SUFDRjtJQUNBLE9BQU9DO0FBQ1Q7QUFDQVEsT0FBT0MsT0FBTyxHQUFHYiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9tYXgtc2F0aXNmeWluZy5qcz85OWUyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5cbmNvbnN0IG1heFNhdGlzZnlpbmcgPSAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIGxldCBtYXggPSBudWxsXG4gIGxldCBtYXhTViA9IG51bGxcbiAgbGV0IHJhbmdlT2JqID0gbnVsbFxuICB0cnkge1xuICAgIHJhbmdlT2JqID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgdmVyc2lvbnMuZm9yRWFjaCgodikgPT4ge1xuICAgIGlmIChyYW5nZU9iai50ZXN0KHYpKSB7XG4gICAgICAvLyBzYXRpc2ZpZXModiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgICBpZiAoIW1heCB8fCBtYXhTVi5jb21wYXJlKHYpID09PSAtMSkge1xuICAgICAgICAvLyBjb21wYXJlKG1heCwgdiwgdHJ1ZSlcbiAgICAgICAgbWF4ID0gdlxuICAgICAgICBtYXhTViA9IG5ldyBTZW1WZXIobWF4LCBvcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG1heFxufVxubW9kdWxlLmV4cG9ydHMgPSBtYXhTYXRpc2Z5aW5nXG4iXSwibmFtZXMiOlsiU2VtVmVyIiwicmVxdWlyZSIsIlJhbmdlIiwibWF4U2F0aXNmeWluZyIsInZlcnNpb25zIiwicmFuZ2UiLCJvcHRpb25zIiwibWF4IiwibWF4U1YiLCJyYW5nZU9iaiIsImVyIiwiZm9yRWFjaCIsInYiLCJ0ZXN0IiwiY29tcGFyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/max-satisfying.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/min-satisfying.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/min-satisfying.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst Range = __webpack_require__(/*! ../classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst minSatisfying = (versions, range, options)=>{\n    let min = null;\n    let minSV = null;\n    let rangeObj = null;\n    try {\n        rangeObj = new Range(range, options);\n    } catch (er) {\n        return null;\n    }\n    versions.forEach((v)=>{\n        if (rangeObj.test(v)) {\n            // satisfies(v, range, options)\n            if (!min || minSV.compare(v) === 1) {\n                // compare(min, v, true)\n                min = v;\n                minSV = new SemVer(min, options);\n            }\n        }\n    });\n    return min;\n};\nmodule.exports = minSatisfying;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi1zYXRpc2Z5aW5nLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNRSxnQkFBZ0IsQ0FBQ0MsVUFBVUMsT0FBT0M7SUFDdEMsSUFBSUMsTUFBTTtJQUNWLElBQUlDLFFBQVE7SUFDWixJQUFJQyxXQUFXO0lBQ2YsSUFBSTtRQUNGQSxXQUFXLElBQUlQLE1BQU1HLE9BQU9DO0lBQzlCLEVBQUUsT0FBT0ksSUFBSTtRQUNYLE9BQU87SUFDVDtJQUNBTixTQUFTTyxPQUFPLENBQUMsQ0FBQ0M7UUFDaEIsSUFBSUgsU0FBU0ksSUFBSSxDQUFDRCxJQUFJO1lBQ3BCLCtCQUErQjtZQUMvQixJQUFJLENBQUNMLE9BQU9DLE1BQU1NLE9BQU8sQ0FBQ0YsT0FBTyxHQUFHO2dCQUNsQyx3QkFBd0I7Z0JBQ3hCTCxNQUFNSztnQkFDTkosUUFBUSxJQUFJUixPQUFPTyxLQUFLRDtZQUMxQjtRQUNGO0lBQ0Y7SUFDQSxPQUFPQztBQUNUO0FBQ0FRLE9BQU9DLE9BQU8sR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbWluLXNhdGlzZnlpbmcuanM/YTAyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgbWluU2F0aXNmeWluZyA9ICh2ZXJzaW9ucywgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgbGV0IG1pbiA9IG51bGxcbiAgbGV0IG1pblNWID0gbnVsbFxuICBsZXQgcmFuZ2VPYmogPSBudWxsXG4gIHRyeSB7XG4gICAgcmFuZ2VPYmogPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB2ZXJzaW9ucy5mb3JFYWNoKCh2KSA9PiB7XG4gICAgaWYgKHJhbmdlT2JqLnRlc3QodikpIHtcbiAgICAgIC8vIHNhdGlzZmllcyh2LCByYW5nZSwgb3B0aW9ucylcbiAgICAgIGlmICghbWluIHx8IG1pblNWLmNvbXBhcmUodikgPT09IDEpIHtcbiAgICAgICAgLy8gY29tcGFyZShtaW4sIHYsIHRydWUpXG4gICAgICAgIG1pbiA9IHZcbiAgICAgICAgbWluU1YgPSBuZXcgU2VtVmVyKG1pbiwgb3B0aW9ucylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHJldHVybiBtaW5cbn1cbm1vZHVsZS5leHBvcnRzID0gbWluU2F0aXNmeWluZ1xuIl0sIm5hbWVzIjpbIlNlbVZlciIsInJlcXVpcmUiLCJSYW5nZSIsIm1pblNhdGlzZnlpbmciLCJ2ZXJzaW9ucyIsInJhbmdlIiwib3B0aW9ucyIsIm1pbiIsIm1pblNWIiwicmFuZ2VPYmoiLCJlciIsImZvckVhY2giLCJ2IiwidGVzdCIsImNvbXBhcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/min-satisfying.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/min-version.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/min-version.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst Range = __webpack_require__(/*! ../classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst gt = __webpack_require__(/*! ../functions/gt */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gt.js\");\nconst minVersion = (range, loose)=>{\n    range = new Range(range, loose);\n    let minver = new SemVer(\"0.0.0\");\n    if (range.test(minver)) {\n        return minver;\n    }\n    minver = new SemVer(\"0.0.0-0\");\n    if (range.test(minver)) {\n        return minver;\n    }\n    minver = null;\n    for(let i = 0; i < range.set.length; ++i){\n        const comparators = range.set[i];\n        let setMin = null;\n        comparators.forEach((comparator)=>{\n            // Clone to avoid manipulating the comparator's semver object.\n            const compver = new SemVer(comparator.semver.version);\n            switch(comparator.operator){\n                case \">\":\n                    if (compver.prerelease.length === 0) {\n                        compver.patch++;\n                    } else {\n                        compver.prerelease.push(0);\n                    }\n                    compver.raw = compver.format();\n                /* fallthrough */ case \"\":\n                case \">=\":\n                    if (!setMin || gt(compver, setMin)) {\n                        setMin = compver;\n                    }\n                    break;\n                case \"<\":\n                case \"<=\":\n                    break;\n                /* istanbul ignore next */ default:\n                    throw new Error(`Unexpected operation: ${comparator.operator}`);\n            }\n        });\n        if (setMin && (!minver || gt(minver, setMin))) {\n            minver = setMin;\n        }\n    }\n    if (minver && range.test(minver)) {\n        return minver;\n    }\n    return null;\n};\nmodule.exports = minVersion;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi12ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNRSxLQUFLRixtQkFBT0EsQ0FBQztBQUVuQixNQUFNRyxhQUFhLENBQUNDLE9BQU9DO0lBQ3pCRCxRQUFRLElBQUlILE1BQU1HLE9BQU9DO0lBRXpCLElBQUlDLFNBQVMsSUFBSVAsT0FBTztJQUN4QixJQUFJSyxNQUFNRyxJQUFJLENBQUNELFNBQVM7UUFDdEIsT0FBT0E7SUFDVDtJQUVBQSxTQUFTLElBQUlQLE9BQU87SUFDcEIsSUFBSUssTUFBTUcsSUFBSSxDQUFDRCxTQUFTO1FBQ3RCLE9BQU9BO0lBQ1Q7SUFFQUEsU0FBUztJQUNULElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJSixNQUFNSyxHQUFHLENBQUNDLE1BQU0sRUFBRSxFQUFFRixFQUFHO1FBQ3pDLE1BQU1HLGNBQWNQLE1BQU1LLEdBQUcsQ0FBQ0QsRUFBRTtRQUVoQyxJQUFJSSxTQUFTO1FBQ2JELFlBQVlFLE9BQU8sQ0FBQyxDQUFDQztZQUNuQiw4REFBOEQ7WUFDOUQsTUFBTUMsVUFBVSxJQUFJaEIsT0FBT2UsV0FBV0UsTUFBTSxDQUFDQyxPQUFPO1lBQ3BELE9BQVFILFdBQVdJLFFBQVE7Z0JBQ3pCLEtBQUs7b0JBQ0gsSUFBSUgsUUFBUUksVUFBVSxDQUFDVCxNQUFNLEtBQUssR0FBRzt3QkFDbkNLLFFBQVFLLEtBQUs7b0JBQ2YsT0FBTzt3QkFDTEwsUUFBUUksVUFBVSxDQUFDRSxJQUFJLENBQUM7b0JBQzFCO29CQUNBTixRQUFRTyxHQUFHLEdBQUdQLFFBQVFRLE1BQU07Z0JBQzVCLGVBQWUsR0FDakIsS0FBSztnQkFDTCxLQUFLO29CQUNILElBQUksQ0FBQ1gsVUFBVVYsR0FBR2EsU0FBU0gsU0FBUzt3QkFDbENBLFNBQVNHO29CQUNYO29CQUNBO2dCQUNGLEtBQUs7Z0JBQ0wsS0FBSztvQkFFSDtnQkFDRix3QkFBd0IsR0FDeEI7b0JBQ0UsTUFBTSxJQUFJUyxNQUFNLENBQUMsc0JBQXNCLEVBQUVWLFdBQVdJLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFO1FBQ0Y7UUFDQSxJQUFJTixVQUFXLEVBQUNOLFVBQVVKLEdBQUdJLFFBQVFNLE9BQU0sR0FBSTtZQUM3Q04sU0FBU007UUFDWDtJQUNGO0lBRUEsSUFBSU4sVUFBVUYsTUFBTUcsSUFBSSxDQUFDRCxTQUFTO1FBQ2hDLE9BQU9BO0lBQ1Q7SUFFQSxPQUFPO0FBQ1Q7QUFDQW1CLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi12ZXJzaW9uLmpzPzQzMWYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IGd0ID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2d0JylcblxuY29uc3QgbWluVmVyc2lvbiA9IChyYW5nZSwgbG9vc2UpID0+IHtcbiAgcmFuZ2UgPSBuZXcgUmFuZ2UocmFuZ2UsIGxvb3NlKVxuXG4gIGxldCBtaW52ZXIgPSBuZXcgU2VtVmVyKCcwLjAuMCcpXG4gIGlmIChyYW5nZS50ZXN0KG1pbnZlcikpIHtcbiAgICByZXR1cm4gbWludmVyXG4gIH1cblxuICBtaW52ZXIgPSBuZXcgU2VtVmVyKCcwLjAuMC0wJylcbiAgaWYgKHJhbmdlLnRlc3QobWludmVyKSkge1xuICAgIHJldHVybiBtaW52ZXJcbiAgfVxuXG4gIG1pbnZlciA9IG51bGxcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZS5zZXQubGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBjb21wYXJhdG9ycyA9IHJhbmdlLnNldFtpXVxuXG4gICAgbGV0IHNldE1pbiA9IG51bGxcbiAgICBjb21wYXJhdG9ycy5mb3JFYWNoKChjb21wYXJhdG9yKSA9PiB7XG4gICAgICAvLyBDbG9uZSB0byBhdm9pZCBtYW5pcHVsYXRpbmcgdGhlIGNvbXBhcmF0b3IncyBzZW12ZXIgb2JqZWN0LlxuICAgICAgY29uc3QgY29tcHZlciA9IG5ldyBTZW1WZXIoY29tcGFyYXRvci5zZW12ZXIudmVyc2lvbilcbiAgICAgIHN3aXRjaCAoY29tcGFyYXRvci5vcGVyYXRvcikge1xuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICBpZiAoY29tcHZlci5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29tcHZlci5wYXRjaCsrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXB2ZXIucHJlcmVsZWFzZS5wdXNoKDApXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbXB2ZXIucmF3ID0gY29tcHZlci5mb3JtYXQoKVxuICAgICAgICAgIC8qIGZhbGx0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJyc6XG4gICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgICBpZiAoIXNldE1pbiB8fCBndChjb21wdmVyLCBzZXRNaW4pKSB7XG4gICAgICAgICAgICBzZXRNaW4gPSBjb21wdmVyXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXNlICc8PSc6XG4gICAgICAgICAgLyogSWdub3JlIG1heGltdW0gdmVyc2lvbnMgKi9cbiAgICAgICAgICBicmVha1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBvcGVyYXRpb246ICR7Y29tcGFyYXRvci5vcGVyYXRvcn1gKVxuICAgICAgfVxuICAgIH0pXG4gICAgaWYgKHNldE1pbiAmJiAoIW1pbnZlciB8fCBndChtaW52ZXIsIHNldE1pbikpKSB7XG4gICAgICBtaW52ZXIgPSBzZXRNaW5cbiAgICB9XG4gIH1cblxuICBpZiAobWludmVyICYmIHJhbmdlLnRlc3QobWludmVyKSkge1xuICAgIHJldHVybiBtaW52ZXJcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5tb2R1bGUuZXhwb3J0cyA9IG1pblZlcnNpb25cbiJdLCJuYW1lcyI6WyJTZW1WZXIiLCJyZXF1aXJlIiwiUmFuZ2UiLCJndCIsIm1pblZlcnNpb24iLCJyYW5nZSIsImxvb3NlIiwibWludmVyIiwidGVzdCIsImkiLCJzZXQiLCJsZW5ndGgiLCJjb21wYXJhdG9ycyIsInNldE1pbiIsImZvckVhY2giLCJjb21wYXJhdG9yIiwiY29tcHZlciIsInNlbXZlciIsInZlcnNpb24iLCJvcGVyYXRvciIsInByZXJlbGVhc2UiLCJwYXRjaCIsInB1c2giLCJyYXciLCJmb3JtYXQiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/min-version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/outside.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/outside.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SemVer = __webpack_require__(/*! ../classes/semver */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/semver.js\");\nconst Comparator = __webpack_require__(/*! ../classes/comparator */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/comparator.js\");\nconst { ANY } = Comparator;\nconst Range = __webpack_require__(/*! ../classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst satisfies = __webpack_require__(/*! ../functions/satisfies */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/satisfies.js\");\nconst gt = __webpack_require__(/*! ../functions/gt */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gt.js\");\nconst lt = __webpack_require__(/*! ../functions/lt */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lt.js\");\nconst lte = __webpack_require__(/*! ../functions/lte */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/lte.js\");\nconst gte = __webpack_require__(/*! ../functions/gte */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/gte.js\");\nconst outside = (version, range, hilo, options)=>{\n    version = new SemVer(version, options);\n    range = new Range(range, options);\n    let gtfn, ltefn, ltfn, comp, ecomp;\n    switch(hilo){\n        case \">\":\n            gtfn = gt;\n            ltefn = lte;\n            ltfn = lt;\n            comp = \">\";\n            ecomp = \">=\";\n            break;\n        case \"<\":\n            gtfn = lt;\n            ltefn = gte;\n            ltfn = gt;\n            comp = \"<\";\n            ecomp = \"<=\";\n            break;\n        default:\n            throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n    }\n    // If it satisfies the range it is not outside\n    if (satisfies(version, range, options)) {\n        return false;\n    }\n    // From now on, variable terms are as if we're in \"gtr\" mode.\n    // but note that everything is flipped for the \"ltr\" function.\n    for(let i = 0; i < range.set.length; ++i){\n        const comparators = range.set[i];\n        let high = null;\n        let low = null;\n        comparators.forEach((comparator)=>{\n            if (comparator.semver === ANY) {\n                comparator = new Comparator(\">=0.0.0\");\n            }\n            high = high || comparator;\n            low = low || comparator;\n            if (gtfn(comparator.semver, high.semver, options)) {\n                high = comparator;\n            } else if (ltfn(comparator.semver, low.semver, options)) {\n                low = comparator;\n            }\n        });\n        // If the edge version comparator has a operator then our version\n        // isn't outside it\n        if (high.operator === comp || high.operator === ecomp) {\n            return false;\n        }\n        // If the lowest version comparator has an operator and our version\n        // is less than it then it isn't higher than the range\n        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {\n            return false;\n        } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n            return false;\n        }\n    }\n    return true;\n};\nmodule.exports = outside;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL291dHNpZGUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDO0FBQzNCLE1BQU0sRUFBRUUsR0FBRyxFQUFFLEdBQUdEO0FBQ2hCLE1BQU1FLFFBQVFILG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1JLFlBQVlKLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1LLEtBQUtMLG1CQUFPQSxDQUFDO0FBQ25CLE1BQU1NLEtBQUtOLG1CQUFPQSxDQUFDO0FBQ25CLE1BQU1PLE1BQU1QLG1CQUFPQSxDQUFDO0FBQ3BCLE1BQU1RLE1BQU1SLG1CQUFPQSxDQUFDO0FBRXBCLE1BQU1TLFVBQVUsQ0FBQ0MsU0FBU0MsT0FBT0MsTUFBTUM7SUFDckNILFVBQVUsSUFBSVgsT0FBT1csU0FBU0c7SUFDOUJGLFFBQVEsSUFBSVIsTUFBTVEsT0FBT0U7SUFFekIsSUFBSUMsTUFBTUMsT0FBT0MsTUFBTUMsTUFBTUM7SUFDN0IsT0FBUU47UUFDTixLQUFLO1lBQ0hFLE9BQU9UO1lBQ1BVLFFBQVFSO1lBQ1JTLE9BQU9WO1lBQ1BXLE9BQU87WUFDUEMsUUFBUTtZQUNSO1FBQ0YsS0FBSztZQUNISixPQUFPUjtZQUNQUyxRQUFRUDtZQUNSUSxPQUFPWDtZQUNQWSxPQUFPO1lBQ1BDLFFBQVE7WUFDUjtRQUNGO1lBQ0UsTUFBTSxJQUFJQyxVQUFVO0lBQ3hCO0lBRUEsOENBQThDO0lBQzlDLElBQUlmLFVBQVVNLFNBQVNDLE9BQU9FLFVBQVU7UUFDdEMsT0FBTztJQUNUO0lBRUEsNkRBQTZEO0lBQzdELDhEQUE4RDtJQUU5RCxJQUFLLElBQUlPLElBQUksR0FBR0EsSUFBSVQsTUFBTVUsR0FBRyxDQUFDQyxNQUFNLEVBQUUsRUFBRUYsRUFBRztRQUN6QyxNQUFNRyxjQUFjWixNQUFNVSxHQUFHLENBQUNELEVBQUU7UUFFaEMsSUFBSUksT0FBTztRQUNYLElBQUlDLE1BQU07UUFFVkYsWUFBWUcsT0FBTyxDQUFDLENBQUNDO1lBQ25CLElBQUlBLFdBQVdDLE1BQU0sS0FBSzFCLEtBQUs7Z0JBQzdCeUIsYUFBYSxJQUFJMUIsV0FBVztZQUM5QjtZQUNBdUIsT0FBT0EsUUFBUUc7WUFDZkYsTUFBTUEsT0FBT0U7WUFDYixJQUFJYixLQUFLYSxXQUFXQyxNQUFNLEVBQUVKLEtBQUtJLE1BQU0sRUFBRWYsVUFBVTtnQkFDakRXLE9BQU9HO1lBQ1QsT0FBTyxJQUFJWCxLQUFLVyxXQUFXQyxNQUFNLEVBQUVILElBQUlHLE1BQU0sRUFBRWYsVUFBVTtnQkFDdkRZLE1BQU1FO1lBQ1I7UUFDRjtRQUVBLGlFQUFpRTtRQUNqRSxtQkFBbUI7UUFDbkIsSUFBSUgsS0FBS0ssUUFBUSxLQUFLWixRQUFRTyxLQUFLSyxRQUFRLEtBQUtYLE9BQU87WUFDckQsT0FBTztRQUNUO1FBRUEsbUVBQW1FO1FBQ25FLHNEQUFzRDtRQUN0RCxJQUFJLENBQUMsQ0FBQ08sSUFBSUksUUFBUSxJQUFJSixJQUFJSSxRQUFRLEtBQUtaLElBQUcsS0FDdENGLE1BQU1MLFNBQVNlLElBQUlHLE1BQU0sR0FBRztZQUM5QixPQUFPO1FBQ1QsT0FBTyxJQUFJSCxJQUFJSSxRQUFRLEtBQUtYLFNBQVNGLEtBQUtOLFNBQVNlLElBQUlHLE1BQU0sR0FBRztZQUM5RCxPQUFPO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUVBRSxPQUFPQyxPQUFPLEdBQUd0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9vdXRzaWRlLmpzPzgwOTUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgQ29tcGFyYXRvciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvY29tcGFyYXRvcicpXG5jb25zdCB7IEFOWSB9ID0gQ29tcGFyYXRvclxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IHNhdGlzZmllcyA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9zYXRpc2ZpZXMnKVxuY29uc3QgZ3QgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZ3QnKVxuY29uc3QgbHQgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvbHQnKVxuY29uc3QgbHRlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2x0ZScpXG5jb25zdCBndGUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZ3RlJylcblxuY29uc3Qgb3V0c2lkZSA9ICh2ZXJzaW9uLCByYW5nZSwgaGlsbywgb3B0aW9ucykgPT4ge1xuICB2ZXJzaW9uID0gbmV3IFNlbVZlcih2ZXJzaW9uLCBvcHRpb25zKVxuICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcblxuICBsZXQgZ3RmbiwgbHRlZm4sIGx0Zm4sIGNvbXAsIGVjb21wXG4gIHN3aXRjaCAoaGlsbykge1xuICAgIGNhc2UgJz4nOlxuICAgICAgZ3RmbiA9IGd0XG4gICAgICBsdGVmbiA9IGx0ZVxuICAgICAgbHRmbiA9IGx0XG4gICAgICBjb21wID0gJz4nXG4gICAgICBlY29tcCA9ICc+PSdcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnPCc6XG4gICAgICBndGZuID0gbHRcbiAgICAgIGx0ZWZuID0gZ3RlXG4gICAgICBsdGZuID0gZ3RcbiAgICAgIGNvbXAgPSAnPCdcbiAgICAgIGVjb21wID0gJzw9J1xuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTXVzdCBwcm92aWRlIGEgaGlsbyB2YWwgb2YgXCI8XCIgb3IgXCI+XCInKVxuICB9XG5cbiAgLy8gSWYgaXQgc2F0aXNmaWVzIHRoZSByYW5nZSBpdCBpcyBub3Qgb3V0c2lkZVxuICBpZiAoc2F0aXNmaWVzKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gRnJvbSBub3cgb24sIHZhcmlhYmxlIHRlcm1zIGFyZSBhcyBpZiB3ZSdyZSBpbiBcImd0clwiIG1vZGUuXG4gIC8vIGJ1dCBub3RlIHRoYXQgZXZlcnl0aGluZyBpcyBmbGlwcGVkIGZvciB0aGUgXCJsdHJcIiBmdW5jdGlvbi5cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlLnNldC5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGNvbXBhcmF0b3JzID0gcmFuZ2Uuc2V0W2ldXG5cbiAgICBsZXQgaGlnaCA9IG51bGxcbiAgICBsZXQgbG93ID0gbnVsbFxuXG4gICAgY29tcGFyYXRvcnMuZm9yRWFjaCgoY29tcGFyYXRvcikgPT4ge1xuICAgICAgaWYgKGNvbXBhcmF0b3Iuc2VtdmVyID09PSBBTlkpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IG5ldyBDb21wYXJhdG9yKCc+PTAuMC4wJylcbiAgICAgIH1cbiAgICAgIGhpZ2ggPSBoaWdoIHx8IGNvbXBhcmF0b3JcbiAgICAgIGxvdyA9IGxvdyB8fCBjb21wYXJhdG9yXG4gICAgICBpZiAoZ3Rmbihjb21wYXJhdG9yLnNlbXZlciwgaGlnaC5zZW12ZXIsIG9wdGlvbnMpKSB7XG4gICAgICAgIGhpZ2ggPSBjb21wYXJhdG9yXG4gICAgICB9IGVsc2UgaWYgKGx0Zm4oY29tcGFyYXRvci5zZW12ZXIsIGxvdy5zZW12ZXIsIG9wdGlvbnMpKSB7XG4gICAgICAgIGxvdyA9IGNvbXBhcmF0b3JcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gSWYgdGhlIGVkZ2UgdmVyc2lvbiBjb21wYXJhdG9yIGhhcyBhIG9wZXJhdG9yIHRoZW4gb3VyIHZlcnNpb25cbiAgICAvLyBpc24ndCBvdXRzaWRlIGl0XG4gICAgaWYgKGhpZ2gub3BlcmF0b3IgPT09IGNvbXAgfHwgaGlnaC5vcGVyYXRvciA9PT0gZWNvbXApIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIElmIHRoZSBsb3dlc3QgdmVyc2lvbiBjb21wYXJhdG9yIGhhcyBhbiBvcGVyYXRvciBhbmQgb3VyIHZlcnNpb25cbiAgICAvLyBpcyBsZXNzIHRoYW4gaXQgdGhlbiBpdCBpc24ndCBoaWdoZXIgdGhhbiB0aGUgcmFuZ2VcbiAgICBpZiAoKCFsb3cub3BlcmF0b3IgfHwgbG93Lm9wZXJhdG9yID09PSBjb21wKSAmJlxuICAgICAgICBsdGVmbih2ZXJzaW9uLCBsb3cuc2VtdmVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmIChsb3cub3BlcmF0b3IgPT09IGVjb21wICYmIGx0Zm4odmVyc2lvbiwgbG93LnNlbXZlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG91dHNpZGVcbiJdLCJuYW1lcyI6WyJTZW1WZXIiLCJyZXF1aXJlIiwiQ29tcGFyYXRvciIsIkFOWSIsIlJhbmdlIiwic2F0aXNmaWVzIiwiZ3QiLCJsdCIsImx0ZSIsImd0ZSIsIm91dHNpZGUiLCJ2ZXJzaW9uIiwicmFuZ2UiLCJoaWxvIiwib3B0aW9ucyIsImd0Zm4iLCJsdGVmbiIsImx0Zm4iLCJjb21wIiwiZWNvbXAiLCJUeXBlRXJyb3IiLCJpIiwic2V0IiwibGVuZ3RoIiwiY29tcGFyYXRvcnMiLCJoaWdoIiwibG93IiwiZm9yRWFjaCIsImNvbXBhcmF0b3IiLCJzZW12ZXIiLCJvcGVyYXRvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/outside.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/simplify.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/simplify.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\n\nconst satisfies = __webpack_require__(/*! ../functions/satisfies.js */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/satisfies.js\");\nconst compare = __webpack_require__(/*! ../functions/compare.js */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\nmodule.exports = (versions, range, options)=>{\n    const set = [];\n    let first = null;\n    let prev = null;\n    const v = versions.sort((a, b)=>compare(a, b, options));\n    for (const version of v){\n        const included = satisfies(version, range, options);\n        if (included) {\n            prev = version;\n            if (!first) {\n                first = version;\n            }\n        } else {\n            if (prev) {\n                set.push([\n                    first,\n                    prev\n                ]);\n            }\n            prev = null;\n            first = null;\n        }\n    }\n    if (first) {\n        set.push([\n            first,\n            null\n        ]);\n    }\n    const ranges = [];\n    for (const [min, max] of set){\n        if (min === max) {\n            ranges.push(min);\n        } else if (!max && min === v[0]) {\n            ranges.push(\"*\");\n        } else if (!max) {\n            ranges.push(`>=${min}`);\n        } else if (min === v[0]) {\n            ranges.push(`<=${max}`);\n        } else {\n            ranges.push(`${min} - ${max}`);\n        }\n    }\n    const simplified = ranges.join(\" || \");\n    const original = typeof range.raw === \"string\" ? range.raw : String(range);\n    return simplified.length < original.length ? simplified : range;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3NpbXBsaWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1FQUFtRTtBQUNuRSwrREFBK0Q7QUFDL0QseUVBQXlFOztBQUN6RSxNQUFNQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUMxQixNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQztBQUN4QkUsT0FBT0MsT0FBTyxHQUFHLENBQUNDLFVBQVVDLE9BQU9DO0lBQ2pDLE1BQU1DLE1BQU0sRUFBRTtJQUNkLElBQUlDLFFBQVE7SUFDWixJQUFJQyxPQUFPO0lBQ1gsTUFBTUMsSUFBSU4sU0FBU08sSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1aLFFBQVFXLEdBQUdDLEdBQUdQO0lBQ2hELEtBQUssTUFBTVEsV0FBV0osRUFBRztRQUN2QixNQUFNSyxXQUFXaEIsVUFBVWUsU0FBU1QsT0FBT0M7UUFDM0MsSUFBSVMsVUFBVTtZQUNaTixPQUFPSztZQUNQLElBQUksQ0FBQ04sT0FBTztnQkFDVkEsUUFBUU07WUFDVjtRQUNGLE9BQU87WUFDTCxJQUFJTCxNQUFNO2dCQUNSRixJQUFJUyxJQUFJLENBQUM7b0JBQUNSO29CQUFPQztpQkFBSztZQUN4QjtZQUNBQSxPQUFPO1lBQ1BELFFBQVE7UUFDVjtJQUNGO0lBQ0EsSUFBSUEsT0FBTztRQUNURCxJQUFJUyxJQUFJLENBQUM7WUFBQ1I7WUFBTztTQUFLO0lBQ3hCO0lBRUEsTUFBTVMsU0FBUyxFQUFFO0lBQ2pCLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxJQUFJLElBQUlaLElBQUs7UUFDNUIsSUFBSVcsUUFBUUMsS0FBSztZQUNmRixPQUFPRCxJQUFJLENBQUNFO1FBQ2QsT0FBTyxJQUFJLENBQUNDLE9BQU9ELFFBQVFSLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDL0JPLE9BQU9ELElBQUksQ0FBQztRQUNkLE9BQU8sSUFBSSxDQUFDRyxLQUFLO1lBQ2ZGLE9BQU9ELElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRUUsSUFBSSxDQUFDO1FBQ3hCLE9BQU8sSUFBSUEsUUFBUVIsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUN2Qk8sT0FBT0QsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFRyxJQUFJLENBQUM7UUFDeEIsT0FBTztZQUNMRixPQUFPRCxJQUFJLENBQUMsQ0FBQyxFQUFFRSxJQUFJLEdBQUcsRUFBRUMsSUFBSSxDQUFDO1FBQy9CO0lBQ0Y7SUFDQSxNQUFNQyxhQUFhSCxPQUFPSSxJQUFJLENBQUM7SUFDL0IsTUFBTUMsV0FBVyxPQUFPakIsTUFBTWtCLEdBQUcsS0FBSyxXQUFXbEIsTUFBTWtCLEdBQUcsR0FBR0MsT0FBT25CO0lBQ3BFLE9BQU9lLFdBQVdLLE1BQU0sR0FBR0gsU0FBU0csTUFBTSxHQUFHTCxhQUFhZjtBQUM1RCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9zaW1wbGlmeS5qcz81MDZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGdpdmVuIGEgc2V0IG9mIHZlcnNpb25zIGFuZCBhIHJhbmdlLCBjcmVhdGUgYSBcInNpbXBsaWZpZWRcIiByYW5nZVxuLy8gdGhhdCBpbmNsdWRlcyB0aGUgc2FtZSB2ZXJzaW9ucyB0aGF0IHRoZSBvcmlnaW5hbCByYW5nZSBkb2VzXG4vLyBJZiB0aGUgb3JpZ2luYWwgcmFuZ2UgaXMgc2hvcnRlciB0aGFuIHRoZSBzaW1wbGlmaWVkIG9uZSwgcmV0dXJuIHRoYXQuXG5jb25zdCBzYXRpc2ZpZXMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvc2F0aXNmaWVzLmpzJylcbmNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvY29tcGFyZS5qcycpXG5tb2R1bGUuZXhwb3J0cyA9ICh2ZXJzaW9ucywgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgY29uc3Qgc2V0ID0gW11cbiAgbGV0IGZpcnN0ID0gbnVsbFxuICBsZXQgcHJldiA9IG51bGxcbiAgY29uc3QgdiA9IHZlcnNpb25zLnNvcnQoKGEsIGIpID0+IGNvbXBhcmUoYSwgYiwgb3B0aW9ucykpXG4gIGZvciAoY29uc3QgdmVyc2lvbiBvZiB2KSB7XG4gICAgY29uc3QgaW5jbHVkZWQgPSBzYXRpc2ZpZXModmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgaWYgKGluY2x1ZGVkKSB7XG4gICAgICBwcmV2ID0gdmVyc2lvblxuICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICBmaXJzdCA9IHZlcnNpb25cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgc2V0LnB1c2goW2ZpcnN0LCBwcmV2XSlcbiAgICAgIH1cbiAgICAgIHByZXYgPSBudWxsXG4gICAgICBmaXJzdCA9IG51bGxcbiAgICB9XG4gIH1cbiAgaWYgKGZpcnN0KSB7XG4gICAgc2V0LnB1c2goW2ZpcnN0LCBudWxsXSlcbiAgfVxuXG4gIGNvbnN0IHJhbmdlcyA9IFtdXG4gIGZvciAoY29uc3QgW21pbiwgbWF4XSBvZiBzZXQpIHtcbiAgICBpZiAobWluID09PSBtYXgpIHtcbiAgICAgIHJhbmdlcy5wdXNoKG1pbilcbiAgICB9IGVsc2UgaWYgKCFtYXggJiYgbWluID09PSB2WzBdKSB7XG4gICAgICByYW5nZXMucHVzaCgnKicpXG4gICAgfSBlbHNlIGlmICghbWF4KSB7XG4gICAgICByYW5nZXMucHVzaChgPj0ke21pbn1gKVxuICAgIH0gZWxzZSBpZiAobWluID09PSB2WzBdKSB7XG4gICAgICByYW5nZXMucHVzaChgPD0ke21heH1gKVxuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZXMucHVzaChgJHttaW59IC0gJHttYXh9YClcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2ltcGxpZmllZCA9IHJhbmdlcy5qb2luKCcgfHwgJylcbiAgY29uc3Qgb3JpZ2luYWwgPSB0eXBlb2YgcmFuZ2UucmF3ID09PSAnc3RyaW5nJyA/IHJhbmdlLnJhdyA6IFN0cmluZyhyYW5nZSlcbiAgcmV0dXJuIHNpbXBsaWZpZWQubGVuZ3RoIDwgb3JpZ2luYWwubGVuZ3RoID8gc2ltcGxpZmllZCA6IHJhbmdlXG59XG4iXSwibmFtZXMiOlsic2F0aXNmaWVzIiwicmVxdWlyZSIsImNvbXBhcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwidmVyc2lvbnMiLCJyYW5nZSIsIm9wdGlvbnMiLCJzZXQiLCJmaXJzdCIsInByZXYiLCJ2Iiwic29ydCIsImEiLCJiIiwidmVyc2lvbiIsImluY2x1ZGVkIiwicHVzaCIsInJhbmdlcyIsIm1pbiIsIm1heCIsInNpbXBsaWZpZWQiLCJqb2luIiwib3JpZ2luYWwiLCJyYXciLCJTdHJpbmciLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/simplify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/subset.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/subset.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Range = __webpack_require__(/*! ../classes/range.js */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst Comparator = __webpack_require__(/*! ../classes/comparator.js */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/comparator.js\");\nconst { ANY } = Comparator;\nconst satisfies = __webpack_require__(/*! ../functions/satisfies.js */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/satisfies.js\");\nconst compare = __webpack_require__(/*! ../functions/compare.js */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/functions/compare.js\");\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\nconst subset = (sub, dom, options = {})=>{\n    if (sub === dom) {\n        return true;\n    }\n    sub = new Range(sub, options);\n    dom = new Range(dom, options);\n    let sawNonNull = false;\n    OUTER: for (const simpleSub of sub.set){\n        for (const simpleDom of dom.set){\n            const isSub = simpleSubset(simpleSub, simpleDom, options);\n            sawNonNull = sawNonNull || isSub !== null;\n            if (isSub) {\n                continue OUTER;\n            }\n        }\n        // the null set is a subset of everything, but null simple ranges in\n        // a complex range should be ignored.  so if we saw a non-null range,\n        // then we know this isn't a subset, but if EVERY simple range was null,\n        // then it is a subset.\n        if (sawNonNull) {\n            return false;\n        }\n    }\n    return true;\n};\nconst minimumVersionWithPreRelease = [\n    new Comparator(\">=0.0.0-0\")\n];\nconst minimumVersion = [\n    new Comparator(\">=0.0.0\")\n];\nconst simpleSubset = (sub, dom, options)=>{\n    if (sub === dom) {\n        return true;\n    }\n    if (sub.length === 1 && sub[0].semver === ANY) {\n        if (dom.length === 1 && dom[0].semver === ANY) {\n            return true;\n        } else if (options.includePrerelease) {\n            sub = minimumVersionWithPreRelease;\n        } else {\n            sub = minimumVersion;\n        }\n    }\n    if (dom.length === 1 && dom[0].semver === ANY) {\n        if (options.includePrerelease) {\n            return true;\n        } else {\n            dom = minimumVersion;\n        }\n    }\n    const eqSet = new Set();\n    let gt, lt;\n    for (const c of sub){\n        if (c.operator === \">\" || c.operator === \">=\") {\n            gt = higherGT(gt, c, options);\n        } else if (c.operator === \"<\" || c.operator === \"<=\") {\n            lt = lowerLT(lt, c, options);\n        } else {\n            eqSet.add(c.semver);\n        }\n    }\n    if (eqSet.size > 1) {\n        return null;\n    }\n    let gtltComp;\n    if (gt && lt) {\n        gtltComp = compare(gt.semver, lt.semver, options);\n        if (gtltComp > 0) {\n            return null;\n        } else if (gtltComp === 0 && (gt.operator !== \">=\" || lt.operator !== \"<=\")) {\n            return null;\n        }\n    }\n    // will iterate one or zero times\n    for (const eq of eqSet){\n        if (gt && !satisfies(eq, String(gt), options)) {\n            return null;\n        }\n        if (lt && !satisfies(eq, String(lt), options)) {\n            return null;\n        }\n        for (const c of dom){\n            if (!satisfies(eq, String(c), options)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    let higher, lower;\n    let hasDomLT, hasDomGT;\n    // if the subset has a prerelease, we need a comparator in the superset\n    // with the same tuple and a prerelease, or it's not a subset\n    let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;\n    let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;\n    // exception: <1.2.3-0 is the same as <1.2.3\n    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === \"<\" && needDomLTPre.prerelease[0] === 0) {\n        needDomLTPre = false;\n    }\n    for (const c of dom){\n        hasDomGT = hasDomGT || c.operator === \">\" || c.operator === \">=\";\n        hasDomLT = hasDomLT || c.operator === \"<\" || c.operator === \"<=\";\n        if (gt) {\n            if (needDomGTPre) {\n                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {\n                    needDomGTPre = false;\n                }\n            }\n            if (c.operator === \">\" || c.operator === \">=\") {\n                higher = higherGT(gt, c, options);\n                if (higher === c && higher !== gt) {\n                    return false;\n                }\n            } else if (gt.operator === \">=\" && !satisfies(gt.semver, String(c), options)) {\n                return false;\n            }\n        }\n        if (lt) {\n            if (needDomLTPre) {\n                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {\n                    needDomLTPre = false;\n                }\n            }\n            if (c.operator === \"<\" || c.operator === \"<=\") {\n                lower = lowerLT(lt, c, options);\n                if (lower === c && lower !== lt) {\n                    return false;\n                }\n            } else if (lt.operator === \"<=\" && !satisfies(lt.semver, String(c), options)) {\n                return false;\n            }\n        }\n        if (!c.operator && (lt || gt) && gtltComp !== 0) {\n            return false;\n        }\n    }\n    // if there was a < or >, and nothing in the dom, then must be false\n    // UNLESS it was limited by another range in the other direction.\n    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n    if (gt && hasDomLT && !lt && gtltComp !== 0) {\n        return false;\n    }\n    if (lt && hasDomGT && !gt && gtltComp !== 0) {\n        return false;\n    }\n    // we needed a prerelease range in a specific tuple, but didn't get one\n    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n    // because it includes prereleases in the 1.2.3 tuple\n    if (needDomGTPre || needDomLTPre) {\n        return false;\n    }\n    return true;\n};\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options)=>{\n    if (!a) {\n        return b;\n    }\n    const comp = compare(a.semver, b.semver, options);\n    return comp > 0 ? a : comp < 0 ? b : b.operator === \">\" && a.operator === \">=\" ? b : a;\n};\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options)=>{\n    if (!a) {\n        return b;\n    }\n    const comp = compare(a.semver, b.semver, options);\n    return comp < 0 ? a : comp > 0 ? b : b.operator === \"<\" && a.operator === \"<=\" ? b : a;\n};\nmodule.exports = subset;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3N1YnNldC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUM7QUFDM0IsTUFBTSxFQUFFRSxHQUFHLEVBQUUsR0FBR0Q7QUFDaEIsTUFBTUUsWUFBWUgsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUksVUFBVUosbUJBQU9BLENBQUM7QUFFeEIsd0VBQXdFO0FBQ3hFLHVEQUF1RDtBQUN2RCw0RUFBNEU7QUFDNUUsdUJBQXVCO0FBQ3ZCLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUsb0NBQW9DO0FBQ3BDLG1EQUFtRDtBQUNuRCwrQ0FBK0M7QUFDL0Msc0NBQXNDO0FBQ3RDLG9DQUFvQztBQUNwQyx5Q0FBeUM7QUFDekMsc0NBQXNDO0FBQ3RDLDRDQUE0QztBQUM1QyxtREFBbUQ7QUFDbkQsa0RBQWtEO0FBQ2xELGlEQUFpRDtBQUNqRCxvRUFBb0U7QUFDcEUsOERBQThEO0FBQzlELFVBQVU7QUFDVixnRUFBZ0U7QUFDaEUsZ0VBQWdFO0FBQ2hFLDJDQUEyQztBQUMzQyx3QkFBd0I7QUFDeEIsVUFBVTtBQUNWLHFFQUFxRTtBQUNyRSx3RUFBd0U7QUFDeEUsZ0VBQWdFO0FBQ2hFLHVFQUF1RTtBQUN2RSxVQUFVO0FBQ1YsdUVBQXVFO0FBQ3ZFLHdFQUF3RTtBQUN4RSxnRUFBZ0U7QUFDaEUsdUVBQXVFO0FBQ3ZFLHFCQUFxQjtBQUVyQixNQUFNSyxTQUFTLENBQUNDLEtBQUtDLEtBQUtDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLElBQUlGLFFBQVFDLEtBQUs7UUFDZixPQUFPO0lBQ1Q7SUFFQUQsTUFBTSxJQUFJUCxNQUFNTyxLQUFLRTtJQUNyQkQsTUFBTSxJQUFJUixNQUFNUSxLQUFLQztJQUNyQixJQUFJQyxhQUFhO0lBRWpCQyxPQUFPLEtBQUssTUFBTUMsYUFBYUwsSUFBSU0sR0FBRyxDQUFFO1FBQ3RDLEtBQUssTUFBTUMsYUFBYU4sSUFBSUssR0FBRyxDQUFFO1lBQy9CLE1BQU1FLFFBQVFDLGFBQWFKLFdBQVdFLFdBQVdMO1lBQ2pEQyxhQUFhQSxjQUFjSyxVQUFVO1lBQ3JDLElBQUlBLE9BQU87Z0JBQ1QsU0FBU0o7WUFDWDtRQUNGO1FBQ0Esb0VBQW9FO1FBQ3BFLHFFQUFxRTtRQUNyRSx3RUFBd0U7UUFDeEUsdUJBQXVCO1FBQ3ZCLElBQUlELFlBQVk7WUFDZCxPQUFPO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUVBLE1BQU1PLCtCQUErQjtJQUFDLElBQUlmLFdBQVc7Q0FBYTtBQUNsRSxNQUFNZ0IsaUJBQWlCO0lBQUMsSUFBSWhCLFdBQVc7Q0FBVztBQUVsRCxNQUFNYyxlQUFlLENBQUNULEtBQUtDLEtBQUtDO0lBQzlCLElBQUlGLFFBQVFDLEtBQUs7UUFDZixPQUFPO0lBQ1Q7SUFFQSxJQUFJRCxJQUFJWSxNQUFNLEtBQUssS0FBS1osR0FBRyxDQUFDLEVBQUUsQ0FBQ2EsTUFBTSxLQUFLakIsS0FBSztRQUM3QyxJQUFJSyxJQUFJVyxNQUFNLEtBQUssS0FBS1gsR0FBRyxDQUFDLEVBQUUsQ0FBQ1ksTUFBTSxLQUFLakIsS0FBSztZQUM3QyxPQUFPO1FBQ1QsT0FBTyxJQUFJTSxRQUFRWSxpQkFBaUIsRUFBRTtZQUNwQ2QsTUFBTVU7UUFDUixPQUFPO1lBQ0xWLE1BQU1XO1FBQ1I7SUFDRjtJQUVBLElBQUlWLElBQUlXLE1BQU0sS0FBSyxLQUFLWCxHQUFHLENBQUMsRUFBRSxDQUFDWSxNQUFNLEtBQUtqQixLQUFLO1FBQzdDLElBQUlNLFFBQVFZLGlCQUFpQixFQUFFO1lBQzdCLE9BQU87UUFDVCxPQUFPO1lBQ0xiLE1BQU1VO1FBQ1I7SUFDRjtJQUVBLE1BQU1JLFFBQVEsSUFBSUM7SUFDbEIsSUFBSUMsSUFBSUM7SUFDUixLQUFLLE1BQU1DLEtBQUtuQixJQUFLO1FBQ25CLElBQUltQixFQUFFQyxRQUFRLEtBQUssT0FBT0QsRUFBRUMsUUFBUSxLQUFLLE1BQU07WUFDN0NILEtBQUtJLFNBQVNKLElBQUlFLEdBQUdqQjtRQUN2QixPQUFPLElBQUlpQixFQUFFQyxRQUFRLEtBQUssT0FBT0QsRUFBRUMsUUFBUSxLQUFLLE1BQU07WUFDcERGLEtBQUtJLFFBQVFKLElBQUlDLEdBQUdqQjtRQUN0QixPQUFPO1lBQ0xhLE1BQU1RLEdBQUcsQ0FBQ0osRUFBRU4sTUFBTTtRQUNwQjtJQUNGO0lBRUEsSUFBSUUsTUFBTVMsSUFBSSxHQUFHLEdBQUc7UUFDbEIsT0FBTztJQUNUO0lBRUEsSUFBSUM7SUFDSixJQUFJUixNQUFNQyxJQUFJO1FBQ1pPLFdBQVczQixRQUFRbUIsR0FBR0osTUFBTSxFQUFFSyxHQUFHTCxNQUFNLEVBQUVYO1FBQ3pDLElBQUl1QixXQUFXLEdBQUc7WUFDaEIsT0FBTztRQUNULE9BQU8sSUFBSUEsYUFBYSxLQUFNUixDQUFBQSxHQUFHRyxRQUFRLEtBQUssUUFBUUYsR0FBR0UsUUFBUSxLQUFLLElBQUcsR0FBSTtZQUMzRSxPQUFPO1FBQ1Q7SUFDRjtJQUVBLGlDQUFpQztJQUNqQyxLQUFLLE1BQU1NLE1BQU1YLE1BQU87UUFDdEIsSUFBSUUsTUFBTSxDQUFDcEIsVUFBVTZCLElBQUlDLE9BQU9WLEtBQUtmLFVBQVU7WUFDN0MsT0FBTztRQUNUO1FBRUEsSUFBSWdCLE1BQU0sQ0FBQ3JCLFVBQVU2QixJQUFJQyxPQUFPVCxLQUFLaEIsVUFBVTtZQUM3QyxPQUFPO1FBQ1Q7UUFFQSxLQUFLLE1BQU1pQixLQUFLbEIsSUFBSztZQUNuQixJQUFJLENBQUNKLFVBQVU2QixJQUFJQyxPQUFPUixJQUFJakIsVUFBVTtnQkFDdEMsT0FBTztZQUNUO1FBQ0Y7UUFFQSxPQUFPO0lBQ1Q7SUFFQSxJQUFJMEIsUUFBUUM7SUFDWixJQUFJQyxVQUFVQztJQUNkLHVFQUF1RTtJQUN2RSw2REFBNkQ7SUFDN0QsSUFBSUMsZUFBZWQsTUFDakIsQ0FBQ2hCLFFBQVFZLGlCQUFpQixJQUMxQkksR0FBR0wsTUFBTSxDQUFDb0IsVUFBVSxDQUFDckIsTUFBTSxHQUFHTSxHQUFHTCxNQUFNLEdBQUc7SUFDNUMsSUFBSXFCLGVBQWVqQixNQUNqQixDQUFDZixRQUFRWSxpQkFBaUIsSUFDMUJHLEdBQUdKLE1BQU0sQ0FBQ29CLFVBQVUsQ0FBQ3JCLE1BQU0sR0FBR0ssR0FBR0osTUFBTSxHQUFHO0lBQzVDLDRDQUE0QztJQUM1QyxJQUFJbUIsZ0JBQWdCQSxhQUFhQyxVQUFVLENBQUNyQixNQUFNLEtBQUssS0FDbkRNLEdBQUdFLFFBQVEsS0FBSyxPQUFPWSxhQUFhQyxVQUFVLENBQUMsRUFBRSxLQUFLLEdBQUc7UUFDM0RELGVBQWU7SUFDakI7SUFFQSxLQUFLLE1BQU1iLEtBQUtsQixJQUFLO1FBQ25COEIsV0FBV0EsWUFBWVosRUFBRUMsUUFBUSxLQUFLLE9BQU9ELEVBQUVDLFFBQVEsS0FBSztRQUM1RFUsV0FBV0EsWUFBWVgsRUFBRUMsUUFBUSxLQUFLLE9BQU9ELEVBQUVDLFFBQVEsS0FBSztRQUM1RCxJQUFJSCxJQUFJO1lBQ04sSUFBSWlCLGNBQWM7Z0JBQ2hCLElBQUlmLEVBQUVOLE1BQU0sQ0FBQ29CLFVBQVUsSUFBSWQsRUFBRU4sTUFBTSxDQUFDb0IsVUFBVSxDQUFDckIsTUFBTSxJQUNqRE8sRUFBRU4sTUFBTSxDQUFDc0IsS0FBSyxLQUFLRCxhQUFhQyxLQUFLLElBQ3JDaEIsRUFBRU4sTUFBTSxDQUFDdUIsS0FBSyxLQUFLRixhQUFhRSxLQUFLLElBQ3JDakIsRUFBRU4sTUFBTSxDQUFDd0IsS0FBSyxLQUFLSCxhQUFhRyxLQUFLLEVBQUU7b0JBQ3pDSCxlQUFlO2dCQUNqQjtZQUNGO1lBQ0EsSUFBSWYsRUFBRUMsUUFBUSxLQUFLLE9BQU9ELEVBQUVDLFFBQVEsS0FBSyxNQUFNO2dCQUM3Q1EsU0FBU1AsU0FBU0osSUFBSUUsR0FBR2pCO2dCQUN6QixJQUFJMEIsV0FBV1QsS0FBS1MsV0FBV1gsSUFBSTtvQkFDakMsT0FBTztnQkFDVDtZQUNGLE9BQU8sSUFBSUEsR0FBR0csUUFBUSxLQUFLLFFBQVEsQ0FBQ3ZCLFVBQVVvQixHQUFHSixNQUFNLEVBQUVjLE9BQU9SLElBQUlqQixVQUFVO2dCQUM1RSxPQUFPO1lBQ1Q7UUFDRjtRQUNBLElBQUlnQixJQUFJO1lBQ04sSUFBSWMsY0FBYztnQkFDaEIsSUFBSWIsRUFBRU4sTUFBTSxDQUFDb0IsVUFBVSxJQUFJZCxFQUFFTixNQUFNLENBQUNvQixVQUFVLENBQUNyQixNQUFNLElBQ2pETyxFQUFFTixNQUFNLENBQUNzQixLQUFLLEtBQUtILGFBQWFHLEtBQUssSUFDckNoQixFQUFFTixNQUFNLENBQUN1QixLQUFLLEtBQUtKLGFBQWFJLEtBQUssSUFDckNqQixFQUFFTixNQUFNLENBQUN3QixLQUFLLEtBQUtMLGFBQWFLLEtBQUssRUFBRTtvQkFDekNMLGVBQWU7Z0JBQ2pCO1lBQ0Y7WUFDQSxJQUFJYixFQUFFQyxRQUFRLEtBQUssT0FBT0QsRUFBRUMsUUFBUSxLQUFLLE1BQU07Z0JBQzdDUyxRQUFRUCxRQUFRSixJQUFJQyxHQUFHakI7Z0JBQ3ZCLElBQUkyQixVQUFVVixLQUFLVSxVQUFVWCxJQUFJO29CQUMvQixPQUFPO2dCQUNUO1lBQ0YsT0FBTyxJQUFJQSxHQUFHRSxRQUFRLEtBQUssUUFBUSxDQUFDdkIsVUFBVXFCLEdBQUdMLE1BQU0sRUFBRWMsT0FBT1IsSUFBSWpCLFVBQVU7Z0JBQzVFLE9BQU87WUFDVDtRQUNGO1FBQ0EsSUFBSSxDQUFDaUIsRUFBRUMsUUFBUSxJQUFLRixDQUFBQSxNQUFNRCxFQUFDLEtBQU1RLGFBQWEsR0FBRztZQUMvQyxPQUFPO1FBQ1Q7SUFDRjtJQUVBLG9FQUFvRTtJQUNwRSxpRUFBaUU7SUFDakUsZ0RBQWdEO0lBQ2hELElBQUlSLE1BQU1hLFlBQVksQ0FBQ1osTUFBTU8sYUFBYSxHQUFHO1FBQzNDLE9BQU87SUFDVDtJQUVBLElBQUlQLE1BQU1hLFlBQVksQ0FBQ2QsTUFBTVEsYUFBYSxHQUFHO1FBQzNDLE9BQU87SUFDVDtJQUVBLHVFQUF1RTtJQUN2RSx3RUFBd0U7SUFDeEUscURBQXFEO0lBQ3JELElBQUlTLGdCQUFnQkYsY0FBYztRQUNoQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPO0FBQ1Q7QUFFQSwrQkFBK0I7QUFDL0IsTUFBTVgsV0FBVyxDQUFDaUIsR0FBR0MsR0FBR3JDO0lBQ3RCLElBQUksQ0FBQ29DLEdBQUc7UUFDTixPQUFPQztJQUNUO0lBQ0EsTUFBTUMsT0FBTzFDLFFBQVF3QyxFQUFFekIsTUFBTSxFQUFFMEIsRUFBRTFCLE1BQU0sRUFBRVg7SUFDekMsT0FBT3NDLE9BQU8sSUFBSUYsSUFDZEUsT0FBTyxJQUFJRCxJQUNYQSxFQUFFbkIsUUFBUSxLQUFLLE9BQU9rQixFQUFFbEIsUUFBUSxLQUFLLE9BQU9tQixJQUM1Q0Q7QUFDTjtBQUVBLGdDQUFnQztBQUNoQyxNQUFNaEIsVUFBVSxDQUFDZ0IsR0FBR0MsR0FBR3JDO0lBQ3JCLElBQUksQ0FBQ29DLEdBQUc7UUFDTixPQUFPQztJQUNUO0lBQ0EsTUFBTUMsT0FBTzFDLFFBQVF3QyxFQUFFekIsTUFBTSxFQUFFMEIsRUFBRTFCLE1BQU0sRUFBRVg7SUFDekMsT0FBT3NDLE9BQU8sSUFBSUYsSUFDZEUsT0FBTyxJQUFJRCxJQUNYQSxFQUFFbkIsUUFBUSxLQUFLLE9BQU9rQixFQUFFbEIsUUFBUSxLQUFLLE9BQU9tQixJQUM1Q0Q7QUFDTjtBQUVBRyxPQUFPQyxPQUFPLEdBQUczQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9zdWJzZXQuanM/OGUxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UuanMnKVxuY29uc3QgQ29tcGFyYXRvciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvY29tcGFyYXRvci5qcycpXG5jb25zdCB7IEFOWSB9ID0gQ29tcGFyYXRvclxuY29uc3Qgc2F0aXNmaWVzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL3NhdGlzZmllcy5qcycpXG5jb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2NvbXBhcmUuanMnKVxuXG4vLyBDb21wbGV4IHJhbmdlIGByMSB8fCByMiB8fCAuLi5gIGlzIGEgc3Vic2V0IG9mIGBSMSB8fCBSMiB8fCAuLi5gIGlmZjpcbi8vIC0gRXZlcnkgc2ltcGxlIHJhbmdlIGByMSwgcjIsIC4uLmAgaXMgYSBudWxsIHNldCwgT1Jcbi8vIC0gRXZlcnkgc2ltcGxlIHJhbmdlIGByMSwgcjIsIC4uLmAgd2hpY2ggaXMgbm90IGEgbnVsbCBzZXQgaXMgYSBzdWJzZXQgb2Zcbi8vICAgc29tZSBgUjEsIFIyLCAuLi5gXG4vL1xuLy8gU2ltcGxlIHJhbmdlIGBjMSBjMiAuLi5gIGlzIGEgc3Vic2V0IG9mIHNpbXBsZSByYW5nZSBgQzEgQzIgLi4uYCBpZmY6XG4vLyAtIElmIGMgaXMgb25seSB0aGUgQU5ZIGNvbXBhcmF0b3Jcbi8vICAgLSBJZiBDIGlzIG9ubHkgdGhlIEFOWSBjb21wYXJhdG9yLCByZXR1cm4gdHJ1ZVxuLy8gICAtIEVsc2UgaWYgaW4gcHJlcmVsZWFzZSBtb2RlLCByZXR1cm4gZmFsc2Vcbi8vICAgLSBlbHNlIHJlcGxhY2UgYyB3aXRoIGBbPj0wLjAuMF1gXG4vLyAtIElmIEMgaXMgb25seSB0aGUgQU5ZIGNvbXBhcmF0b3Jcbi8vICAgLSBpZiBpbiBwcmVyZWxlYXNlIG1vZGUsIHJldHVybiB0cnVlXG4vLyAgIC0gZWxzZSByZXBsYWNlIEMgd2l0aCBgWz49MC4wLjBdYFxuLy8gLSBMZXQgRVEgYmUgdGhlIHNldCBvZiA9IGNvbXBhcmF0b3JzIGluIGNcbi8vIC0gSWYgRVEgaXMgbW9yZSB0aGFuIG9uZSwgcmV0dXJuIHRydWUgKG51bGwgc2V0KVxuLy8gLSBMZXQgR1QgYmUgdGhlIGhpZ2hlc3QgPiBvciA+PSBjb21wYXJhdG9yIGluIGNcbi8vIC0gTGV0IExUIGJlIHRoZSBsb3dlc3QgPCBvciA8PSBjb21wYXJhdG9yIGluIGNcbi8vIC0gSWYgR1QgYW5kIExULCBhbmQgR1Quc2VtdmVyID4gTFQuc2VtdmVyLCByZXR1cm4gdHJ1ZSAobnVsbCBzZXQpXG4vLyAtIElmIGFueSBDIGlzIGEgPSByYW5nZSwgYW5kIEdUIG9yIExUIGFyZSBzZXQsIHJldHVybiBmYWxzZVxuLy8gLSBJZiBFUVxuLy8gICAtIElmIEdULCBhbmQgRVEgZG9lcyBub3Qgc2F0aXNmeSBHVCwgcmV0dXJuIHRydWUgKG51bGwgc2V0KVxuLy8gICAtIElmIExULCBhbmQgRVEgZG9lcyBub3Qgc2F0aXNmeSBMVCwgcmV0dXJuIHRydWUgKG51bGwgc2V0KVxuLy8gICAtIElmIEVRIHNhdGlzZmllcyBldmVyeSBDLCByZXR1cm4gdHJ1ZVxuLy8gICAtIEVsc2UgcmV0dXJuIGZhbHNlXG4vLyAtIElmIEdUXG4vLyAgIC0gSWYgR1Quc2VtdmVyIGlzIGxvd2VyIHRoYW4gYW55ID4gb3IgPj0gY29tcCBpbiBDLCByZXR1cm4gZmFsc2Vcbi8vICAgLSBJZiBHVCBpcyA+PSwgYW5kIEdULnNlbXZlciBkb2VzIG5vdCBzYXRpc2Z5IGV2ZXJ5IEMsIHJldHVybiBmYWxzZVxuLy8gICAtIElmIEdULnNlbXZlciBoYXMgYSBwcmVyZWxlYXNlLCBhbmQgbm90IGluIHByZXJlbGVhc2UgbW9kZVxuLy8gICAgIC0gSWYgbm8gQyBoYXMgYSBwcmVyZWxlYXNlIGFuZCB0aGUgR1Quc2VtdmVyIHR1cGxlLCByZXR1cm4gZmFsc2Vcbi8vIC0gSWYgTFRcbi8vICAgLSBJZiBMVC5zZW12ZXIgaXMgZ3JlYXRlciB0aGFuIGFueSA8IG9yIDw9IGNvbXAgaW4gQywgcmV0dXJuIGZhbHNlXG4vLyAgIC0gSWYgTFQgaXMgPD0sIGFuZCBMVC5zZW12ZXIgZG9lcyBub3Qgc2F0aXNmeSBldmVyeSBDLCByZXR1cm4gZmFsc2Vcbi8vICAgLSBJZiBHVC5zZW12ZXIgaGFzIGEgcHJlcmVsZWFzZSwgYW5kIG5vdCBpbiBwcmVyZWxlYXNlIG1vZGVcbi8vICAgICAtIElmIG5vIEMgaGFzIGEgcHJlcmVsZWFzZSBhbmQgdGhlIExULnNlbXZlciB0dXBsZSwgcmV0dXJuIGZhbHNlXG4vLyAtIEVsc2UgcmV0dXJuIHRydWVcblxuY29uc3Qgc3Vic2V0ID0gKHN1YiwgZG9tLCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKHN1YiA9PT0gZG9tKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHN1YiA9IG5ldyBSYW5nZShzdWIsIG9wdGlvbnMpXG4gIGRvbSA9IG5ldyBSYW5nZShkb20sIG9wdGlvbnMpXG4gIGxldCBzYXdOb25OdWxsID0gZmFsc2VcblxuICBPVVRFUjogZm9yIChjb25zdCBzaW1wbGVTdWIgb2Ygc3ViLnNldCkge1xuICAgIGZvciAoY29uc3Qgc2ltcGxlRG9tIG9mIGRvbS5zZXQpIHtcbiAgICAgIGNvbnN0IGlzU3ViID0gc2ltcGxlU3Vic2V0KHNpbXBsZVN1Yiwgc2ltcGxlRG9tLCBvcHRpb25zKVxuICAgICAgc2F3Tm9uTnVsbCA9IHNhd05vbk51bGwgfHwgaXNTdWIgIT09IG51bGxcbiAgICAgIGlmIChpc1N1Yikge1xuICAgICAgICBjb250aW51ZSBPVVRFUlxuICAgICAgfVxuICAgIH1cbiAgICAvLyB0aGUgbnVsbCBzZXQgaXMgYSBzdWJzZXQgb2YgZXZlcnl0aGluZywgYnV0IG51bGwgc2ltcGxlIHJhbmdlcyBpblxuICAgIC8vIGEgY29tcGxleCByYW5nZSBzaG91bGQgYmUgaWdub3JlZC4gIHNvIGlmIHdlIHNhdyBhIG5vbi1udWxsIHJhbmdlLFxuICAgIC8vIHRoZW4gd2Uga25vdyB0aGlzIGlzbid0IGEgc3Vic2V0LCBidXQgaWYgRVZFUlkgc2ltcGxlIHJhbmdlIHdhcyBudWxsLFxuICAgIC8vIHRoZW4gaXQgaXMgYSBzdWJzZXQuXG4gICAgaWYgKHNhd05vbk51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5jb25zdCBtaW5pbXVtVmVyc2lvbldpdGhQcmVSZWxlYXNlID0gW25ldyBDb21wYXJhdG9yKCc+PTAuMC4wLTAnKV1cbmNvbnN0IG1pbmltdW1WZXJzaW9uID0gW25ldyBDb21wYXJhdG9yKCc+PTAuMC4wJyldXG5cbmNvbnN0IHNpbXBsZVN1YnNldCA9IChzdWIsIGRvbSwgb3B0aW9ucykgPT4ge1xuICBpZiAoc3ViID09PSBkb20pIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKHN1Yi5sZW5ndGggPT09IDEgJiYgc3ViWzBdLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPT09IDEgJiYgZG9tWzBdLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSkge1xuICAgICAgc3ViID0gbWluaW11bVZlcnNpb25XaXRoUHJlUmVsZWFzZVxuICAgIH0gZWxzZSB7XG4gICAgICBzdWIgPSBtaW5pbXVtVmVyc2lvblxuICAgIH1cbiAgfVxuXG4gIGlmIChkb20ubGVuZ3RoID09PSAxICYmIGRvbVswXS5zZW12ZXIgPT09IEFOWSkge1xuICAgIGlmIChvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBkb20gPSBtaW5pbXVtVmVyc2lvblxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGVxU2V0ID0gbmV3IFNldCgpXG4gIGxldCBndCwgbHRcbiAgZm9yIChjb25zdCBjIG9mIHN1Yikge1xuICAgIGlmIChjLm9wZXJhdG9yID09PSAnPicgfHwgYy5vcGVyYXRvciA9PT0gJz49Jykge1xuICAgICAgZ3QgPSBoaWdoZXJHVChndCwgYywgb3B0aW9ucylcbiAgICB9IGVsc2UgaWYgKGMub3BlcmF0b3IgPT09ICc8JyB8fCBjLm9wZXJhdG9yID09PSAnPD0nKSB7XG4gICAgICBsdCA9IGxvd2VyTFQobHQsIGMsIG9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGVxU2V0LmFkZChjLnNlbXZlcilcbiAgICB9XG4gIH1cblxuICBpZiAoZXFTZXQuc2l6ZSA+IDEpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgbGV0IGd0bHRDb21wXG4gIGlmIChndCAmJiBsdCkge1xuICAgIGd0bHRDb21wID0gY29tcGFyZShndC5zZW12ZXIsIGx0LnNlbXZlciwgb3B0aW9ucylcbiAgICBpZiAoZ3RsdENvbXAgPiAwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0gZWxzZSBpZiAoZ3RsdENvbXAgPT09IDAgJiYgKGd0Lm9wZXJhdG9yICE9PSAnPj0nIHx8IGx0Lm9wZXJhdG9yICE9PSAnPD0nKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICAvLyB3aWxsIGl0ZXJhdGUgb25lIG9yIHplcm8gdGltZXNcbiAgZm9yIChjb25zdCBlcSBvZiBlcVNldCkge1xuICAgIGlmIChndCAmJiAhc2F0aXNmaWVzKGVxLCBTdHJpbmcoZ3QpLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAobHQgJiYgIXNhdGlzZmllcyhlcSwgU3RyaW5nKGx0KSwgb3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBjIG9mIGRvbSkge1xuICAgICAgaWYgKCFzYXRpc2ZpZXMoZXEsIFN0cmluZyhjKSwgb3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGxldCBoaWdoZXIsIGxvd2VyXG4gIGxldCBoYXNEb21MVCwgaGFzRG9tR1RcbiAgLy8gaWYgdGhlIHN1YnNldCBoYXMgYSBwcmVyZWxlYXNlLCB3ZSBuZWVkIGEgY29tcGFyYXRvciBpbiB0aGUgc3VwZXJzZXRcbiAgLy8gd2l0aCB0aGUgc2FtZSB0dXBsZSBhbmQgYSBwcmVyZWxlYXNlLCBvciBpdCdzIG5vdCBhIHN1YnNldFxuICBsZXQgbmVlZERvbUxUUHJlID0gbHQgJiZcbiAgICAhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSAmJlxuICAgIGx0LnNlbXZlci5wcmVyZWxlYXNlLmxlbmd0aCA/IGx0LnNlbXZlciA6IGZhbHNlXG4gIGxldCBuZWVkRG9tR1RQcmUgPSBndCAmJlxuICAgICFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlICYmXG4gICAgZ3Quc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoID8gZ3Quc2VtdmVyIDogZmFsc2VcbiAgLy8gZXhjZXB0aW9uOiA8MS4yLjMtMCBpcyB0aGUgc2FtZSBhcyA8MS4yLjNcbiAgaWYgKG5lZWREb21MVFByZSAmJiBuZWVkRG9tTFRQcmUucHJlcmVsZWFzZS5sZW5ndGggPT09IDEgJiZcbiAgICAgIGx0Lm9wZXJhdG9yID09PSAnPCcgJiYgbmVlZERvbUxUUHJlLnByZXJlbGVhc2VbMF0gPT09IDApIHtcbiAgICBuZWVkRG9tTFRQcmUgPSBmYWxzZVxuICB9XG5cbiAgZm9yIChjb25zdCBjIG9mIGRvbSkge1xuICAgIGhhc0RvbUdUID0gaGFzRG9tR1QgfHwgYy5vcGVyYXRvciA9PT0gJz4nIHx8IGMub3BlcmF0b3IgPT09ICc+PSdcbiAgICBoYXNEb21MVCA9IGhhc0RvbUxUIHx8IGMub3BlcmF0b3IgPT09ICc8JyB8fCBjLm9wZXJhdG9yID09PSAnPD0nXG4gICAgaWYgKGd0KSB7XG4gICAgICBpZiAobmVlZERvbUdUUHJlKSB7XG4gICAgICAgIGlmIChjLnNlbXZlci5wcmVyZWxlYXNlICYmIGMuc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoICYmXG4gICAgICAgICAgICBjLnNlbXZlci5tYWpvciA9PT0gbmVlZERvbUdUUHJlLm1ham9yICYmXG4gICAgICAgICAgICBjLnNlbXZlci5taW5vciA9PT0gbmVlZERvbUdUUHJlLm1pbm9yICYmXG4gICAgICAgICAgICBjLnNlbXZlci5wYXRjaCA9PT0gbmVlZERvbUdUUHJlLnBhdGNoKSB7XG4gICAgICAgICAgbmVlZERvbUdUUHJlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGMub3BlcmF0b3IgPT09ICc+JyB8fCBjLm9wZXJhdG9yID09PSAnPj0nKSB7XG4gICAgICAgIGhpZ2hlciA9IGhpZ2hlckdUKGd0LCBjLCBvcHRpb25zKVxuICAgICAgICBpZiAoaGlnaGVyID09PSBjICYmIGhpZ2hlciAhPT0gZ3QpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChndC5vcGVyYXRvciA9PT0gJz49JyAmJiAhc2F0aXNmaWVzKGd0LnNlbXZlciwgU3RyaW5nKGMpLCBvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGx0KSB7XG4gICAgICBpZiAobmVlZERvbUxUUHJlKSB7XG4gICAgICAgIGlmIChjLnNlbXZlci5wcmVyZWxlYXNlICYmIGMuc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoICYmXG4gICAgICAgICAgICBjLnNlbXZlci5tYWpvciA9PT0gbmVlZERvbUxUUHJlLm1ham9yICYmXG4gICAgICAgICAgICBjLnNlbXZlci5taW5vciA9PT0gbmVlZERvbUxUUHJlLm1pbm9yICYmXG4gICAgICAgICAgICBjLnNlbXZlci5wYXRjaCA9PT0gbmVlZERvbUxUUHJlLnBhdGNoKSB7XG4gICAgICAgICAgbmVlZERvbUxUUHJlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGMub3BlcmF0b3IgPT09ICc8JyB8fCBjLm9wZXJhdG9yID09PSAnPD0nKSB7XG4gICAgICAgIGxvd2VyID0gbG93ZXJMVChsdCwgYywgb3B0aW9ucylcbiAgICAgICAgaWYgKGxvd2VyID09PSBjICYmIGxvd2VyICE9PSBsdCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGx0Lm9wZXJhdG9yID09PSAnPD0nICYmICFzYXRpc2ZpZXMobHQuc2VtdmVyLCBTdHJpbmcoYyksIG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWMub3BlcmF0b3IgJiYgKGx0IHx8IGd0KSAmJiBndGx0Q29tcCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlcmUgd2FzIGEgPCBvciA+LCBhbmQgbm90aGluZyBpbiB0aGUgZG9tLCB0aGVuIG11c3QgYmUgZmFsc2VcbiAgLy8gVU5MRVNTIGl0IHdhcyBsaW1pdGVkIGJ5IGFub3RoZXIgcmFuZ2UgaW4gdGhlIG90aGVyIGRpcmVjdGlvbi5cbiAgLy8gRWcsID4xLjAuMCA8MS4wLjEgaXMgc3RpbGwgYSBzdWJzZXQgb2YgPDIuMC4wXG4gIGlmIChndCAmJiBoYXNEb21MVCAmJiAhbHQgJiYgZ3RsdENvbXAgIT09IDApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmIChsdCAmJiBoYXNEb21HVCAmJiAhZ3QgJiYgZ3RsdENvbXAgIT09IDApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIHdlIG5lZWRlZCBhIHByZXJlbGVhc2UgcmFuZ2UgaW4gYSBzcGVjaWZpYyB0dXBsZSwgYnV0IGRpZG4ndCBnZXQgb25lXG4gIC8vIHRoZW4gdGhpcyBpc24ndCBhIHN1YnNldC4gIGVnID49MS4yLjMtcHJlIGlzIG5vdCBhIHN1YnNldCBvZiA+PTEuMC4wLFxuICAvLyBiZWNhdXNlIGl0IGluY2x1ZGVzIHByZXJlbGVhc2VzIGluIHRoZSAxLjIuMyB0dXBsZVxuICBpZiAobmVlZERvbUdUUHJlIHx8IG5lZWREb21MVFByZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuLy8gPj0xLjIuMyBpcyBsb3dlciB0aGFuID4xLjIuM1xuY29uc3QgaGlnaGVyR1QgPSAoYSwgYiwgb3B0aW9ucykgPT4ge1xuICBpZiAoIWEpIHtcbiAgICByZXR1cm4gYlxuICB9XG4gIGNvbnN0IGNvbXAgPSBjb21wYXJlKGEuc2VtdmVyLCBiLnNlbXZlciwgb3B0aW9ucylcbiAgcmV0dXJuIGNvbXAgPiAwID8gYVxuICAgIDogY29tcCA8IDAgPyBiXG4gICAgOiBiLm9wZXJhdG9yID09PSAnPicgJiYgYS5vcGVyYXRvciA9PT0gJz49JyA/IGJcbiAgICA6IGFcbn1cblxuLy8gPD0xLjIuMyBpcyBoaWdoZXIgdGhhbiA8MS4yLjNcbmNvbnN0IGxvd2VyTFQgPSAoYSwgYiwgb3B0aW9ucykgPT4ge1xuICBpZiAoIWEpIHtcbiAgICByZXR1cm4gYlxuICB9XG4gIGNvbnN0IGNvbXAgPSBjb21wYXJlKGEuc2VtdmVyLCBiLnNlbXZlciwgb3B0aW9ucylcbiAgcmV0dXJuIGNvbXAgPCAwID8gYVxuICAgIDogY29tcCA+IDAgPyBiXG4gICAgOiBiLm9wZXJhdG9yID09PSAnPCcgJiYgYS5vcGVyYXRvciA9PT0gJzw9JyA/IGJcbiAgICA6IGFcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdWJzZXRcbiJdLCJuYW1lcyI6WyJSYW5nZSIsInJlcXVpcmUiLCJDb21wYXJhdG9yIiwiQU5ZIiwic2F0aXNmaWVzIiwiY29tcGFyZSIsInN1YnNldCIsInN1YiIsImRvbSIsIm9wdGlvbnMiLCJzYXdOb25OdWxsIiwiT1VURVIiLCJzaW1wbGVTdWIiLCJzZXQiLCJzaW1wbGVEb20iLCJpc1N1YiIsInNpbXBsZVN1YnNldCIsIm1pbmltdW1WZXJzaW9uV2l0aFByZVJlbGVhc2UiLCJtaW5pbXVtVmVyc2lvbiIsImxlbmd0aCIsInNlbXZlciIsImluY2x1ZGVQcmVyZWxlYXNlIiwiZXFTZXQiLCJTZXQiLCJndCIsImx0IiwiYyIsIm9wZXJhdG9yIiwiaGlnaGVyR1QiLCJsb3dlckxUIiwiYWRkIiwic2l6ZSIsImd0bHRDb21wIiwiZXEiLCJTdHJpbmciLCJoaWdoZXIiLCJsb3dlciIsImhhc0RvbUxUIiwiaGFzRG9tR1QiLCJuZWVkRG9tTFRQcmUiLCJwcmVyZWxlYXNlIiwibmVlZERvbUdUUHJlIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwiYSIsImIiLCJjb21wIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/subset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/to-comparators.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/to-comparators.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Range = __webpack_require__(/*! ../classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options)=>new Range(range, options).set.map((comp)=>comp.map((c)=>c.value).join(\" \").trim().split(\" \"));\nmodule.exports = toComparators;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3RvLWNvbXBhcmF0b3JzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUV0QixpREFBaUQ7QUFDakQsTUFBTUMsZ0JBQWdCLENBQUNDLE9BQU9DLFVBQzVCLElBQUlKLE1BQU1HLE9BQU9DLFNBQVNDLEdBQUcsQ0FDMUJDLEdBQUcsQ0FBQ0MsQ0FBQUEsT0FBUUEsS0FBS0QsR0FBRyxDQUFDRSxDQUFBQSxJQUFLQSxFQUFFQyxLQUFLLEVBQUVDLElBQUksQ0FBQyxLQUFLQyxJQUFJLEdBQUdDLEtBQUssQ0FBQztBQUUvREMsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay91dGlscy9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy90by1jb21wYXJhdG9ycy5qcz82MzI5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5cbi8vIE1vc3RseSBqdXN0IGZvciB0ZXN0aW5nIGFuZCBsZWdhY3kgQVBJIHJlYXNvbnNcbmNvbnN0IHRvQ29tcGFyYXRvcnMgPSAocmFuZ2UsIG9wdGlvbnMpID0+XG4gIG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucykuc2V0XG4gICAgLm1hcChjb21wID0+IGNvbXAubWFwKGMgPT4gYy52YWx1ZSkuam9pbignICcpLnRyaW0oKS5zcGxpdCgnICcpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvQ29tcGFyYXRvcnNcbiJdLCJuYW1lcyI6WyJSYW5nZSIsInJlcXVpcmUiLCJ0b0NvbXBhcmF0b3JzIiwicmFuZ2UiLCJvcHRpb25zIiwic2V0IiwibWFwIiwiY29tcCIsImMiLCJ2YWx1ZSIsImpvaW4iLCJ0cmltIiwic3BsaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/to-comparators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/valid.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/semver/ranges/valid.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Range = __webpack_require__(/*! ../classes/range */ \"(ssr)/./node_modules/@metamask/utils/node_modules/semver/classes/range.js\");\nconst validRange = (range, options)=>{\n    try {\n        // Return '*' instead of '' so that truthiness works.\n        // This will throw if it's invalid anyway\n        return new Range(range, options).range || \"*\";\n    } catch (er) {\n        return null;\n    }\n};\nmodule.exports = validRange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3V0aWxzL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3ZhbGlkLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxhQUFhLENBQUNDLE9BQU9DO0lBQ3pCLElBQUk7UUFDRixxREFBcUQ7UUFDckQseUNBQXlDO1FBQ3pDLE9BQU8sSUFBSUosTUFBTUcsT0FBT0MsU0FBU0QsS0FBSyxJQUFJO0lBQzVDLEVBQUUsT0FBT0UsSUFBSTtRQUNYLE9BQU87SUFDVDtBQUNGO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svdXRpbHMvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvdmFsaWQuanM/OWQ2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgdmFsaWRSYW5nZSA9IChyYW5nZSwgb3B0aW9ucykgPT4ge1xuICB0cnkge1xuICAgIC8vIFJldHVybiAnKicgaW5zdGVhZCBvZiAnJyBzbyB0aGF0IHRydXRoaW5lc3Mgd29ya3MuXG4gICAgLy8gVGhpcyB3aWxsIHRocm93IGlmIGl0J3MgaW52YWxpZCBhbnl3YXlcbiAgICByZXR1cm4gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKS5yYW5nZSB8fCAnKidcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkUmFuZ2VcbiJdLCJuYW1lcyI6WyJSYW5nZSIsInJlcXVpcmUiLCJ2YWxpZFJhbmdlIiwicmFuZ2UiLCJvcHRpb25zIiwiZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/semver/ranges/valid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Struct: () => (/* binding */ Struct),\n/* harmony export */   StructError: () => (/* binding */ StructError),\n/* harmony export */   any: () => (/* binding */ any),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   date: () => (/* binding */ date),\n/* harmony export */   defaulted: () => (/* binding */ defaulted),\n/* harmony export */   define: () => (/* binding */ define),\n/* harmony export */   deprecated: () => (/* binding */ deprecated),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   enums: () => (/* binding */ enums),\n/* harmony export */   func: () => (/* binding */ func),\n/* harmony export */   instance: () => (/* binding */ instance),\n/* harmony export */   integer: () => (/* binding */ integer),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   literal: () => (/* binding */ literal),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mask: () => (/* binding */ mask),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   never: () => (/* binding */ never),\n/* harmony export */   nonempty: () => (/* binding */ nonempty),\n/* harmony export */   nullable: () => (/* binding */ nullable),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   object: () => (/* binding */ object),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   partial: () => (/* binding */ partial),\n/* harmony export */   pattern: () => (/* binding */ pattern),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   record: () => (/* binding */ record),\n/* harmony export */   refine: () => (/* binding */ refine),\n/* harmony export */   regexp: () => (/* binding */ regexp),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   trimmed: () => (/* binding */ trimmed),\n/* harmony export */   tuple: () => (/* binding */ tuple),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   unknown: () => (/* binding */ unknown),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/**\n * A `StructFailure` represents a single specific failure in validation.\n */ /**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */ class StructError extends TypeError {\n    constructor(failure, failures){\n        let cached;\n        const { message, explanation, ...rest } = failure;\n        const { path } = failure;\n        const msg = path.length === 0 ? message : `At path: ${path.join(\".\")} -- ${message}`;\n        super(explanation ?? msg);\n        if (explanation != null) this.cause = msg;\n        Object.assign(this, rest);\n        this.name = this.constructor.name;\n        this.failures = ()=>{\n            return cached ?? (cached = [\n                failure,\n                ...failures()\n            ]);\n        };\n    }\n}\n/**\n * Check if a value is an iterator.\n */ function isIterable(x) {\n    return isObject(x) && typeof x[Symbol.iterator] === \"function\";\n}\n/**\n * Check if a value is a plain object.\n */ function isObject(x) {\n    return typeof x === \"object\" && x != null;\n}\n/**\n * Check if a value is a plain object.\n */ function isPlainObject(x) {\n    if (Object.prototype.toString.call(x) !== \"[object Object]\") {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */ function print(value) {\n    if (typeof value === \"symbol\") {\n        return value.toString();\n    }\n    return typeof value === \"string\" ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */ function shiftIterator(input) {\n    const { done, value } = input.next();\n    return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */ function toFailure(result, context, struct, value) {\n    if (result === true) {\n        return;\n    } else if (result === false) {\n        result = {};\n    } else if (typeof result === \"string\") {\n        result = {\n            message: result\n        };\n    }\n    const { path, branch } = context;\n    const { type } = struct;\n    const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : \"\"}, but received: \\`${print(value)}\\`` } = result;\n    return {\n        value,\n        type,\n        refinement,\n        key: path[path.length - 1],\n        path,\n        branch,\n        ...result,\n        message\n    };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */ function* toFailures(result, context, struct, value) {\n    if (!isIterable(result)) {\n        result = [\n            result\n        ];\n    }\n    for (const r of result){\n        const failure = toFailure(r, context, struct, value);\n        if (failure) {\n            yield failure;\n        }\n    }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */ function* run(value, struct, options = {}) {\n    const { path = [], branch = [\n        value\n    ], coerce = false, mask = false } = options;\n    const ctx = {\n        path,\n        branch\n    };\n    if (coerce) {\n        value = struct.coercer(value, ctx);\n        if (mask && struct.type !== \"type\" && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n            for(const key in value){\n                if (struct.schema[key] === undefined) {\n                    delete value[key];\n                }\n            }\n        }\n    }\n    let status = \"valid\";\n    for (const failure of struct.validator(value, ctx)){\n        failure.explanation = options.message;\n        status = \"not_valid\";\n        yield [\n            failure,\n            undefined\n        ];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)){\n        const ts = run(v, s, {\n            path: k === undefined ? path : [\n                ...path,\n                k\n            ],\n            branch: k === undefined ? branch : [\n                ...branch,\n                v\n            ],\n            coerce,\n            mask,\n            message: options.message\n        });\n        for (const t of ts){\n            if (t[0]) {\n                status = t[0].refinement != null ? \"not_refined\" : \"not_valid\";\n                yield [\n                    t[0],\n                    undefined\n                ];\n            } else if (coerce) {\n                v = t[1];\n                if (k === undefined) {\n                    value = v;\n                } else if (value instanceof Map) {\n                    value.set(k, v);\n                } else if (value instanceof Set) {\n                    value.add(v);\n                } else if (isObject(value)) {\n                    if (v !== undefined || k in value) value[k] = v;\n                }\n            }\n        }\n    }\n    if (status !== \"not_valid\") {\n        for (const failure of struct.refiner(value, ctx)){\n            failure.explanation = options.message;\n            status = \"not_refined\";\n            yield [\n                failure,\n                undefined\n            ];\n        }\n    }\n    if (status === \"valid\") {\n        yield [\n            undefined,\n            value\n        ];\n    }\n}\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */ class Struct {\n    constructor(props){\n        const { type, schema, validator, refiner, coercer = (value)=>value, entries = function*() {} } = props;\n        this.type = type;\n        this.schema = schema;\n        this.entries = entries;\n        this.coercer = coercer;\n        if (validator) {\n            this.validator = (value, context)=>{\n                const result = validator(value, context);\n                return toFailures(result, context, this, value);\n            };\n        } else {\n            this.validator = ()=>[];\n        }\n        if (refiner) {\n            this.refiner = (value, context)=>{\n                const result = refiner(value, context);\n                return toFailures(result, context, this, value);\n            };\n        } else {\n            this.refiner = ()=>[];\n        }\n    }\n    /**\n     * Assert that a value passes the struct's validation, throwing if it doesn't.\n     */ assert(value, message) {\n        return assert(value, this, message);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */ create(value, message) {\n        return create(value, this, message);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */ is(value) {\n        return is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema.\n     */ mask(value, message) {\n        return mask(value, this, message);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `withCoercion` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful.\n     */ validate(value, options = {}) {\n        return validate(value, this, options);\n    }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */ function assert(value, struct, message) {\n    const result = validate(value, struct, {\n        message\n    });\n    if (result[0]) {\n        throw result[0];\n    }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */ function create(value, struct, message) {\n    const result = validate(value, struct, {\n        coerce: true,\n        message\n    });\n    if (result[0]) {\n        throw result[0];\n    } else {\n        return result[1];\n    }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */ function mask(value, struct, message) {\n    const result = validate(value, struct, {\n        coerce: true,\n        mask: true,\n        message\n    });\n    if (result[0]) {\n        throw result[0];\n    } else {\n        return result[1];\n    }\n}\n/**\n * Check if a value passes a struct.\n */ function is(value, struct) {\n    const result = validate(value, struct);\n    return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */ function validate(value, struct, options = {}) {\n    const tuples = run(value, struct, options);\n    const tuple = shiftIterator(tuples);\n    if (tuple[0]) {\n        const error = new StructError(tuple[0], function*() {\n            for (const t of tuples){\n                if (t[0]) {\n                    yield t[0];\n                }\n            }\n        });\n        return [\n            error,\n            undefined\n        ];\n    } else {\n        const v = tuple[1];\n        return [\n            undefined,\n            v\n        ];\n    }\n}\nfunction assign(...Structs) {\n    const isType = Structs[0].type === \"type\";\n    const schemas = Structs.map((s)=>s.schema);\n    const schema = Object.assign({}, ...schemas);\n    return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */ function define(name, validator) {\n    return new Struct({\n        type: name,\n        schema: null,\n        validator\n    });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */ function deprecated(struct, log) {\n    return new Struct({\n        ...struct,\n        refiner: (value, ctx)=>value === undefined || struct.refiner(value, ctx),\n        validator (value, ctx) {\n            if (value === undefined) {\n                return true;\n            } else {\n                log(value, ctx);\n                return struct.validator(value, ctx);\n            }\n        }\n    });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */ function dynamic(fn) {\n    return new Struct({\n        type: \"dynamic\",\n        schema: null,\n        *entries (value, ctx) {\n            const struct = fn(value, ctx);\n            yield* struct.entries(value, ctx);\n        },\n        validator (value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.validator(value, ctx);\n        },\n        coercer (value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.coercer(value, ctx);\n        },\n        refiner (value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.refiner(value, ctx);\n        }\n    });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */ function lazy(fn) {\n    let struct;\n    return new Struct({\n        type: \"lazy\",\n        schema: null,\n        *entries (value, ctx) {\n            struct ?? (struct = fn());\n            yield* struct.entries(value, ctx);\n        },\n        validator (value, ctx) {\n            struct ?? (struct = fn());\n            return struct.validator(value, ctx);\n        },\n        coercer (value, ctx) {\n            struct ?? (struct = fn());\n            return struct.coercer(value, ctx);\n        },\n        refiner (value, ctx) {\n            struct ?? (struct = fn());\n            return struct.refiner(value, ctx);\n        }\n    });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */ function omit(struct, keys) {\n    const { schema } = struct;\n    const subschema = {\n        ...schema\n    };\n    for (const key of keys){\n        delete subschema[key];\n    }\n    switch(struct.type){\n        case \"type\":\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */ function partial(struct) {\n    const schema = struct instanceof Struct ? {\n        ...struct.schema\n    } : {\n        ...struct\n    };\n    for(const key in schema){\n        schema[key] = optional(schema[key]);\n    }\n    return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */ function pick(struct, keys) {\n    const { schema } = struct;\n    const subschema = {};\n    for (const key of keys){\n        subschema[key] = schema[key];\n    }\n    return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */ function struct(name, validator) {\n    console.warn(\"superstruct@0.11 - The `struct` helper has been renamed to `define`.\");\n    return define(name, validator);\n}\n/**\n * Ensure that any value passes validation.\n */ function any() {\n    return define(\"any\", ()=>true);\n}\nfunction array(Element) {\n    return new Struct({\n        type: \"array\",\n        schema: Element,\n        *entries (value) {\n            if (Element && Array.isArray(value)) {\n                for (const [i, v] of value.entries()){\n                    yield [\n                        i,\n                        v,\n                        Element\n                    ];\n                }\n            }\n        },\n        coercer (value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n        validator (value) {\n            return Array.isArray(value) || `Expected an array value, but received: ${print(value)}`;\n        }\n    });\n}\n/**\n * Ensure that a value is a bigint.\n */ function bigint() {\n    return define(\"bigint\", (value)=>{\n        return typeof value === \"bigint\";\n    });\n}\n/**\n * Ensure that a value is a boolean.\n */ function boolean() {\n    return define(\"boolean\", (value)=>{\n        return typeof value === \"boolean\";\n    });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */ function date() {\n    return define(\"date\", (value)=>{\n        return value instanceof Date && !isNaN(value.getTime()) || `Expected a valid \\`Date\\` object, but received: ${print(value)}`;\n    });\n}\nfunction enums(values) {\n    const schema = {};\n    const description = values.map((v)=>print(v)).join();\n    for (const key of values){\n        schema[key] = key;\n    }\n    return new Struct({\n        type: \"enums\",\n        schema,\n        validator (value) {\n            return values.includes(value) || `Expected one of \\`${description}\\`, but received: ${print(value)}`;\n        }\n    });\n}\n/**\n * Ensure that a value is a function.\n */ function func() {\n    return define(\"func\", (value)=>{\n        return typeof value === \"function\" || `Expected a function, but received: ${print(value)}`;\n    });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */ function instance(Class) {\n    return define(\"instance\", (value)=>{\n        return value instanceof Class || `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`;\n    });\n}\n/**\n * Ensure that a value is an integer.\n */ function integer() {\n    return define(\"integer\", (value)=>{\n        return typeof value === \"number\" && !isNaN(value) && Number.isInteger(value) || `Expected an integer, but received: ${print(value)}`;\n    });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */ function intersection(Structs) {\n    return new Struct({\n        type: \"intersection\",\n        schema: null,\n        *entries (value, ctx) {\n            for (const S of Structs){\n                yield* S.entries(value, ctx);\n            }\n        },\n        *validator (value, ctx) {\n            for (const S of Structs){\n                yield* S.validator(value, ctx);\n            }\n        },\n        *refiner (value, ctx) {\n            for (const S of Structs){\n                yield* S.refiner(value, ctx);\n            }\n        }\n    });\n}\nfunction literal(constant) {\n    const description = print(constant);\n    const t = typeof constant;\n    return new Struct({\n        type: \"literal\",\n        schema: t === \"string\" || t === \"number\" || t === \"boolean\" ? constant : null,\n        validator (value) {\n            return value === constant || `Expected the literal \\`${description}\\`, but received: ${print(value)}`;\n        }\n    });\n}\nfunction map(Key, Value) {\n    return new Struct({\n        type: \"map\",\n        schema: null,\n        *entries (value) {\n            if (Key && Value && value instanceof Map) {\n                for (const [k, v] of value.entries()){\n                    yield [\n                        k,\n                        k,\n                        Key\n                    ];\n                    yield [\n                        k,\n                        v,\n                        Value\n                    ];\n                }\n            }\n        },\n        coercer (value) {\n            return value instanceof Map ? new Map(value) : value;\n        },\n        validator (value) {\n            return value instanceof Map || `Expected a \\`Map\\` object, but received: ${print(value)}`;\n        }\n    });\n}\n/**\n * Ensure that no value ever passes validation.\n */ function never() {\n    return define(\"never\", ()=>false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */ function nullable(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx)=>value === null || struct.validator(value, ctx),\n        refiner: (value, ctx)=>value === null || struct.refiner(value, ctx)\n    });\n}\n/**\n * Ensure that a value is a number.\n */ function number() {\n    return define(\"number\", (value)=>{\n        return typeof value === \"number\" && !isNaN(value) || `Expected a number, but received: ${print(value)}`;\n    });\n}\nfunction object(schema) {\n    const knowns = schema ? Object.keys(schema) : [];\n    const Never = never();\n    return new Struct({\n        type: \"object\",\n        schema: schema ? schema : null,\n        *entries (value) {\n            if (schema && isObject(value)) {\n                const unknowns = new Set(Object.keys(value));\n                for (const key of knowns){\n                    unknowns.delete(key);\n                    yield [\n                        key,\n                        value[key],\n                        schema[key]\n                    ];\n                }\n                for (const key of unknowns){\n                    yield [\n                        key,\n                        value[key],\n                        Never\n                    ];\n                }\n            }\n        },\n        validator (value) {\n            return isObject(value) || `Expected an object, but received: ${print(value)}`;\n        },\n        coercer (value) {\n            return isObject(value) ? {\n                ...value\n            } : value;\n        }\n    });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */ function optional(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx)=>value === undefined || struct.validator(value, ctx),\n        refiner: (value, ctx)=>value === undefined || struct.refiner(value, ctx)\n    });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */ function record(Key, Value) {\n    return new Struct({\n        type: \"record\",\n        schema: null,\n        *entries (value) {\n            if (isObject(value)) {\n                for(const k in value){\n                    const v = value[k];\n                    yield [\n                        k,\n                        k,\n                        Key\n                    ];\n                    yield [\n                        k,\n                        v,\n                        Value\n                    ];\n                }\n            }\n        },\n        validator (value) {\n            return isObject(value) || `Expected an object, but received: ${print(value)}`;\n        }\n    });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */ function regexp() {\n    return define(\"regexp\", (value)=>{\n        return value instanceof RegExp;\n    });\n}\nfunction set(Element) {\n    return new Struct({\n        type: \"set\",\n        schema: null,\n        *entries (value) {\n            if (Element && value instanceof Set) {\n                for (const v of value){\n                    yield [\n                        v,\n                        v,\n                        Element\n                    ];\n                }\n            }\n        },\n        coercer (value) {\n            return value instanceof Set ? new Set(value) : value;\n        },\n        validator (value) {\n            return value instanceof Set || `Expected a \\`Set\\` object, but received: ${print(value)}`;\n        }\n    });\n}\n/**\n * Ensure that a value is a string.\n */ function string() {\n    return define(\"string\", (value)=>{\n        return typeof value === \"string\" || `Expected a string, but received: ${print(value)}`;\n    });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */ function tuple(Structs) {\n    const Never = never();\n    return new Struct({\n        type: \"tuple\",\n        schema: null,\n        *entries (value) {\n            if (Array.isArray(value)) {\n                const length = Math.max(Structs.length, value.length);\n                for(let i = 0; i < length; i++){\n                    yield [\n                        i,\n                        value[i],\n                        Structs[i] || Never\n                    ];\n                }\n            }\n        },\n        validator (value) {\n            return Array.isArray(value) || `Expected an array, but received: ${print(value)}`;\n        }\n    });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */ function type(schema) {\n    const keys = Object.keys(schema);\n    return new Struct({\n        type: \"type\",\n        schema,\n        *entries (value) {\n            if (isObject(value)) {\n                for (const k of keys){\n                    yield [\n                        k,\n                        value[k],\n                        schema[k]\n                    ];\n                }\n            }\n        },\n        validator (value) {\n            return isObject(value) || `Expected an object, but received: ${print(value)}`;\n        },\n        coercer (value) {\n            return isObject(value) ? {\n                ...value\n            } : value;\n        }\n    });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */ function union(Structs) {\n    const description = Structs.map((s)=>s.type).join(\" | \");\n    return new Struct({\n        type: \"union\",\n        schema: null,\n        coercer (value) {\n            for (const S of Structs){\n                const [error, coerced] = S.validate(value, {\n                    coerce: true\n                });\n                if (!error) {\n                    return coerced;\n                }\n            }\n            return value;\n        },\n        validator (value, ctx) {\n            const failures = [];\n            for (const S of Structs){\n                const [...tuples] = run(value, S, ctx);\n                const [first] = tuples;\n                if (!first[0]) {\n                    return [];\n                } else {\n                    for (const [failure] of tuples){\n                        if (failure) {\n                            failures.push(failure);\n                        }\n                    }\n                }\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n                ...failures\n            ];\n        }\n    });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */ function unknown() {\n    return define(\"unknown\", ()=>true);\n}\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */ function coerce(struct, condition, coercer) {\n    return new Struct({\n        ...struct,\n        coercer: (value, ctx)=>{\n            return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n        }\n    });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */ function defaulted(struct, fallback, options = {}) {\n    return coerce(struct, unknown(), (x)=>{\n        const f = typeof fallback === \"function\" ? fallback() : fallback;\n        if (x === undefined) {\n            return f;\n        }\n        if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n            const ret = {\n                ...x\n            };\n            let changed = false;\n            for(const key in f){\n                if (ret[key] === undefined) {\n                    ret[key] = f[key];\n                    changed = true;\n                }\n            }\n            if (changed) {\n                return ret;\n            }\n        }\n        return x;\n    });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */ function trimmed(struct) {\n    return coerce(struct, string(), (x)=>x.trim());\n}\n/**\n * Ensure that a string, array, map, or set is empty.\n */ function empty(struct) {\n    return refine(struct, \"empty\", (value)=>{\n        const size = getSize(value);\n        return size === 0 || `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``;\n    });\n}\nfunction getSize(value) {\n    if (value instanceof Map || value instanceof Set) {\n        return value.size;\n    } else {\n        return value.length;\n    }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */ function max(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, \"max\", (value)=>{\n        return exclusive ? value < threshold : value <= threshold || `Expected a ${struct.type} less than ${exclusive ? \"\" : \"or equal to \"}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */ function min(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, \"min\", (value)=>{\n        return exclusive ? value > threshold : value >= threshold || `Expected a ${struct.type} greater than ${exclusive ? \"\" : \"or equal to \"}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */ function nonempty(struct) {\n    return refine(struct, \"nonempty\", (value)=>{\n        const size = getSize(value);\n        return size > 0 || `Expected a nonempty ${struct.type} but received an empty one`;\n    });\n}\n/**\n * Ensure that a string matches a regular expression.\n */ function pattern(struct, regexp) {\n    return refine(struct, \"pattern\", (value)=>{\n        return regexp.test(value) || `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`;\n    });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */ function size(struct, min, max = min) {\n    const expected = `Expected a ${struct.type}`;\n    const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n    return refine(struct, \"size\", (value)=>{\n        if (typeof value === \"number\" || value instanceof Date) {\n            return min <= value && value <= max || `${expected} ${of} but received \\`${value}\\``;\n        } else if (value instanceof Map || value instanceof Set) {\n            const { size } = value;\n            return min <= size && size <= max || `${expected} with a size ${of} but received one with a size of \\`${size}\\``;\n        } else {\n            const { length } = value;\n            return min <= length && length <= max || `${expected} with a length ${of} but received one with a length of \\`${length}\\``;\n        }\n    });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */ function refine(struct, name, refiner) {\n    return new Struct({\n        ...struct,\n        *refiner (value, ctx) {\n            yield* struct.refiner(value, ctx);\n            const result = refiner(value, ctx);\n            const failures = toFailures(result, ctx, struct, value);\n            for (const failure of failures){\n                yield {\n                    ...failure,\n                    refinement: name\n                };\n            }\n        }\n    });\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs\n");

/***/ })

};
;
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multibase";
exports.ids = ["vendor-chunks/multibase"];
exports.modules = {

/***/ "(ssr)/./node_modules/multibase/src/base.js":
/*!********************************************!*\
  !*** ./node_modules/multibase/src/base.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { encodeText } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/multibase/src/util.js\");\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /** @typedef {import(\"./types\").BaseName} BaseName */ /** @typedef {import(\"./types\").BaseCode} BaseCode */ /**\n * Class to encode/decode in the supported Bases\n *\n */ class Base {\n    /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */ constructor(name, code, factory, alphabet){\n        this.name = name;\n        this.code = code;\n        this.codeBuf = encodeText(this.code);\n        this.alphabet = alphabet;\n        this.codec = factory(alphabet);\n    }\n    /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */ encode(buf) {\n        return this.codec.encode(buf);\n    }\n    /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */ decode(string) {\n        for (const char of string){\n            if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n                throw new Error(`invalid character '${char}' in '${string}'`);\n            }\n        }\n        return this.codec.decode(string);\n    }\n}\nmodule.exports = Base;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxVQUFVLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFL0IsMkRBQTJELEdBQzNELG1EQUFtRCxHQUNuRCxtREFBbUQsR0FFbkQ7OztDQUdDLEdBQ0QsTUFBTUM7SUFDSjs7Ozs7R0FLQyxHQUNEQyxZQUFhQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRLENBQUU7UUFDMUMsSUFBSSxDQUFDSCxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDRyxPQUFPLEdBQUdSLFdBQVcsSUFBSSxDQUFDSyxJQUFJO1FBQ25DLElBQUksQ0FBQ0UsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNFLEtBQUssR0FBR0gsUUFBUUM7SUFDdkI7SUFFQTs7O0dBR0MsR0FDREcsT0FBUUMsR0FBRyxFQUFFO1FBQ1gsT0FBTyxJQUFJLENBQUNGLEtBQUssQ0FBQ0MsTUFBTSxDQUFDQztJQUMzQjtJQUVBOzs7R0FHQyxHQUNEQyxPQUFRQyxNQUFNLEVBQUU7UUFDZCxLQUFLLE1BQU1DLFFBQVFELE9BQVE7WUFDekIsSUFBSSxJQUFJLENBQUNOLFFBQVEsSUFBSSxJQUFJLENBQUNBLFFBQVEsQ0FBQ1EsT0FBTyxDQUFDRCxRQUFRLEdBQUc7Z0JBQ3BELE1BQU0sSUFBSUUsTUFBTSxDQUFDLG1CQUFtQixFQUFFRixLQUFLLE1BQU0sRUFBRUQsT0FBTyxDQUFDLENBQUM7WUFDOUQ7UUFDRjtRQUNBLE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUNHLE1BQU0sQ0FBQ0M7SUFDM0I7QUFDRjtBQUVBSSxPQUFPQyxPQUFPLEdBQUdoQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL211bHRpYmFzZS9zcmMvYmFzZS5qcz82Nzc5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IGVuY29kZVRleHQgfSA9IHJlcXVpcmUoJy4vdXRpbCcpXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuQ29kZWNGYWN0b3J5fSBDb2RlY0ZhY3RvcnkgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi90eXBlc1wiKS5CYXNlTmFtZX0gQmFzZU5hbWUgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi90eXBlc1wiKS5CYXNlQ29kZX0gQmFzZUNvZGUgKi9cblxuLyoqXG4gKiBDbGFzcyB0byBlbmNvZGUvZGVjb2RlIGluIHRoZSBzdXBwb3J0ZWQgQmFzZXNcbiAqXG4gKi9cbmNsYXNzIEJhc2Uge1xuICAvKipcbiAgICogQHBhcmFtIHtCYXNlTmFtZX0gbmFtZVxuICAgKiBAcGFyYW0ge0Jhc2VDb2RlfSBjb2RlXG4gICAqIEBwYXJhbSB7Q29kZWNGYWN0b3J5fSBmYWN0b3J5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhbHBoYWJldFxuICAgKi9cbiAgY29uc3RydWN0b3IgKG5hbWUsIGNvZGUsIGZhY3RvcnksIGFscGhhYmV0KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMuY29kZSA9IGNvZGVcbiAgICB0aGlzLmNvZGVCdWYgPSBlbmNvZGVUZXh0KHRoaXMuY29kZSlcbiAgICB0aGlzLmFscGhhYmV0ID0gYWxwaGFiZXRcbiAgICB0aGlzLmNvZGVjID0gZmFjdG9yeShhbHBoYWJldClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZW5jb2RlIChidWYpIHtcbiAgICByZXR1cm4gdGhpcy5jb2RlYy5lbmNvZGUoYnVmKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAgICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gICAqL1xuICBkZWNvZGUgKHN0cmluZykge1xuICAgIGZvciAoY29uc3QgY2hhciBvZiBzdHJpbmcpIHtcbiAgICAgIGlmICh0aGlzLmFscGhhYmV0ICYmIHRoaXMuYWxwaGFiZXQuaW5kZXhPZihjaGFyKSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGNoYXJhY3RlciAnJHtjaGFyfScgaW4gJyR7c3RyaW5nfSdgKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb2RlYy5kZWNvZGUoc3RyaW5nKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZVxuIl0sIm5hbWVzIjpbImVuY29kZVRleHQiLCJyZXF1aXJlIiwiQmFzZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImNvZGUiLCJmYWN0b3J5IiwiYWxwaGFiZXQiLCJjb2RlQnVmIiwiY29kZWMiLCJlbmNvZGUiLCJidWYiLCJkZWNvZGUiLCJzdHJpbmciLCJjaGFyIiwiaW5kZXhPZiIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multibase/src/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/multibase/src/constants.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst baseX = __webpack_require__(/*! @multiformats/base-x */ \"(ssr)/./node_modules/@multiformats/base-x/src/index.js\");\nconst Base = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/multibase/src/base.js\");\nconst { rfc4648 } = __webpack_require__(/*! ./rfc4648 */ \"(ssr)/./node_modules/multibase/src/rfc4648.js\");\nconst { decodeText, encodeText } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/multibase/src/util.js\");\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /** @typedef {import('./types').Codec} Codec */ /** @typedef {import('./types').BaseName} BaseName */ /** @typedef {import('./types').BaseCode} BaseCode */ /** @type {CodecFactory} */ const identity = ()=>{\n    return {\n        encode: decodeText,\n        decode: encodeText\n    };\n};\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */ const constants = [\n    [\n        \"identity\",\n        \"\\x00\",\n        identity,\n        \"\"\n    ],\n    [\n        \"base2\",\n        \"0\",\n        rfc4648(1),\n        \"01\"\n    ],\n    [\n        \"base8\",\n        \"7\",\n        rfc4648(3),\n        \"01234567\"\n    ],\n    [\n        \"base10\",\n        \"9\",\n        baseX,\n        \"0123456789\"\n    ],\n    [\n        \"base16\",\n        \"f\",\n        rfc4648(4),\n        \"0123456789abcdef\"\n    ],\n    [\n        \"base16upper\",\n        \"F\",\n        rfc4648(4),\n        \"0123456789ABCDEF\"\n    ],\n    [\n        \"base32hex\",\n        \"v\",\n        rfc4648(5),\n        \"0123456789abcdefghijklmnopqrstuv\"\n    ],\n    [\n        \"base32hexupper\",\n        \"V\",\n        rfc4648(5),\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    [\n        \"base32hexpad\",\n        \"t\",\n        rfc4648(5),\n        \"0123456789abcdefghijklmnopqrstuv=\"\n    ],\n    [\n        \"base32hexpadupper\",\n        \"T\",\n        rfc4648(5),\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\"\n    ],\n    [\n        \"base32\",\n        \"b\",\n        rfc4648(5),\n        \"abcdefghijklmnopqrstuvwxyz234567\"\n    ],\n    [\n        \"base32upper\",\n        \"B\",\n        rfc4648(5),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"\n    ],\n    [\n        \"base32pad\",\n        \"c\",\n        rfc4648(5),\n        \"abcdefghijklmnopqrstuvwxyz234567=\"\n    ],\n    [\n        \"base32padupper\",\n        \"C\",\n        rfc4648(5),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\"\n    ],\n    [\n        \"base32z\",\n        \"h\",\n        rfc4648(5),\n        \"ybndrfg8ejkmcpqxot1uwisza345h769\"\n    ],\n    [\n        \"base36\",\n        \"k\",\n        baseX,\n        \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    ],\n    [\n        \"base36upper\",\n        \"K\",\n        baseX,\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    ],\n    [\n        \"base58btc\",\n        \"z\",\n        baseX,\n        \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    ],\n    [\n        \"base58flickr\",\n        \"Z\",\n        baseX,\n        \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n    ],\n    [\n        \"base64\",\n        \"m\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    ],\n    [\n        \"base64pad\",\n        \"M\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n    ],\n    [\n        \"base64url\",\n        \"u\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n    ],\n    [\n        \"base64urlpad\",\n        \"U\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\"\n    ]\n];\n/** @type {Record<BaseName,Base>} */ const names = constants.reduce((prev, tupple)=>{\n    prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);\n    return prev;\n}, /** @type {Record<BaseName,Base>} */ {});\n/** @type {Record<BaseCode,Base>} */ const codes = constants.reduce((prev, tupple)=>{\n    prev[tupple[1]] = names[tupple[0]];\n    return prev;\n}, /** @type {Record<BaseCode,Base>} */ {});\nmodule.exports = {\n    names,\n    codes\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNLEVBQUVFLE9BQU8sRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUM1QixNQUFNLEVBQUVHLFVBQVUsRUFBRUMsVUFBVSxFQUFFLEdBQUdKLG1CQUFPQSxDQUFDO0FBRTNDLDJEQUEyRCxHQUMzRCw2Q0FBNkMsR0FDN0MsbURBQW1ELEdBQ25ELG1EQUFtRCxHQUVuRCx5QkFBeUIsR0FDekIsTUFBTUssV0FBVztJQUNmLE9BQU87UUFDTEMsUUFBUUg7UUFDUkksUUFBUUg7SUFDVjtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDRCxNQUFNSSxZQUFZO0lBQ2hCO1FBQUM7UUFBWTtRQUFRSDtRQUFVO0tBQUc7SUFDbEM7UUFBQztRQUFTO1FBQUtILFFBQVE7UUFBSTtLQUFLO0lBQ2hDO1FBQUM7UUFBUztRQUFLQSxRQUFRO1FBQUk7S0FBVztJQUN0QztRQUFDO1FBQVU7UUFBS0g7UUFBTztLQUFhO0lBQ3BDO1FBQUM7UUFBVTtRQUFLRyxRQUFRO1FBQUk7S0FBbUI7SUFDL0M7UUFBQztRQUFlO1FBQUtBLFFBQVE7UUFBSTtLQUFtQjtJQUNwRDtRQUFDO1FBQWE7UUFBS0EsUUFBUTtRQUFJO0tBQW1DO0lBQ2xFO1FBQUM7UUFBa0I7UUFBS0EsUUFBUTtRQUFJO0tBQW1DO0lBQ3ZFO1FBQUM7UUFBZ0I7UUFBS0EsUUFBUTtRQUFJO0tBQW9DO0lBQ3RFO1FBQUM7UUFBcUI7UUFBS0EsUUFBUTtRQUFJO0tBQW9DO0lBQzNFO1FBQUM7UUFBVTtRQUFLQSxRQUFRO1FBQUk7S0FBbUM7SUFDL0Q7UUFBQztRQUFlO1FBQUtBLFFBQVE7UUFBSTtLQUFtQztJQUNwRTtRQUFDO1FBQWE7UUFBS0EsUUFBUTtRQUFJO0tBQW9DO0lBQ25FO1FBQUM7UUFBa0I7UUFBS0EsUUFBUTtRQUFJO0tBQW9DO0lBQ3hFO1FBQUM7UUFBVztRQUFLQSxRQUFRO1FBQUk7S0FBbUM7SUFDaEU7UUFBQztRQUFVO1FBQUtIO1FBQU87S0FBdUM7SUFDOUQ7UUFBQztRQUFlO1FBQUtBO1FBQU87S0FBdUM7SUFDbkU7UUFBQztRQUFhO1FBQUtBO1FBQU87S0FBNkQ7SUFDdkY7UUFBQztRQUFnQjtRQUFLQTtRQUFPO0tBQTZEO0lBQzFGO1FBQUM7UUFBVTtRQUFLRyxRQUFRO1FBQUk7S0FBbUU7SUFDL0Y7UUFBQztRQUFhO1FBQUtBLFFBQVE7UUFBSTtLQUFvRTtJQUNuRztRQUFDO1FBQWE7UUFBS0EsUUFBUTtRQUFJO0tBQW1FO0lBQ2xHO1FBQUM7UUFBZ0I7UUFBS0EsUUFBUTtRQUFJO0tBQW9FO0NBQ3ZHO0FBRUQsa0NBQWtDLEdBQ2xDLE1BQU1PLFFBQVFELFVBQVVFLE1BQU0sQ0FBQyxDQUFDQyxNQUFNQztJQUNwQ0QsSUFBSSxDQUFDQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSVgsS0FBS1csTUFBTSxDQUFDLEVBQUUsRUFBRUEsTUFBTSxDQUFDLEVBQUUsRUFBRUEsTUFBTSxDQUFDLEVBQUUsRUFBRUEsTUFBTSxDQUFDLEVBQUU7SUFDckUsT0FBT0Q7QUFDVCxHQUFHLGtDQUFrQyxHQUFHLENBQUM7QUFFekMsa0NBQWtDLEdBQ2xDLE1BQU1FLFFBQVFMLFVBQVVFLE1BQU0sQ0FBQyxDQUFDQyxNQUFNQztJQUNwQ0QsSUFBSSxDQUFDQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUdILEtBQUssQ0FBQ0csTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUNsQyxPQUFPRDtBQUNULEdBQUcsa0NBQWtDLEdBQUcsQ0FBQztBQUV6Q0csT0FBT0MsT0FBTyxHQUFHO0lBQ2ZOO0lBQ0FJO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aXRoLXRhaWx3aW5kY3NzLWFwcC8uL25vZGVfbW9kdWxlcy9tdWx0aWJhc2Uvc3JjL2NvbnN0YW50cy5qcz9lYTRmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBiYXNlWCA9IHJlcXVpcmUoJ0BtdWx0aWZvcm1hdHMvYmFzZS14JylcbmNvbnN0IEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UuanMnKVxuY29uc3QgeyByZmM0NjQ4IH0gPSByZXF1aXJlKCcuL3JmYzQ2NDgnKVxuY29uc3QgeyBkZWNvZGVUZXh0LCBlbmNvZGVUZXh0IH0gPSByZXF1aXJlKCcuL3V0aWwnKVxuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLkNvZGVjRmFjdG9yeX0gQ29kZWNGYWN0b3J5ICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLkNvZGVjfSBDb2RlYyAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5CYXNlTmFtZX0gQmFzZU5hbWUgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuQmFzZUNvZGV9IEJhc2VDb2RlICovXG5cbi8qKiBAdHlwZSB7Q29kZWNGYWN0b3J5fSAqL1xuY29uc3QgaWRlbnRpdHkgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiBkZWNvZGVUZXh0LFxuICAgIGRlY29kZTogZW5jb2RlVGV4dFxuICB9XG59XG5cbi8qKlxuICpcbiAqIG5hbWUsIGNvZGUsIGltcGxlbWVudGF0aW9uLCBhbHBoYWJldFxuICpcbiAqIEB0eXBlIHtBcnJheTxbQmFzZU5hbWUsIEJhc2VDb2RlLCBDb2RlY0ZhY3RvcnksIHN0cmluZ10+fVxuICovXG5jb25zdCBjb25zdGFudHMgPSBbXG4gIFsnaWRlbnRpdHknLCAnXFx4MDAnLCBpZGVudGl0eSwgJyddLFxuICBbJ2Jhc2UyJywgJzAnLCByZmM0NjQ4KDEpLCAnMDEnXSxcbiAgWydiYXNlOCcsICc3JywgcmZjNDY0OCgzKSwgJzAxMjM0NTY3J10sXG4gIFsnYmFzZTEwJywgJzknLCBiYXNlWCwgJzAxMjM0NTY3ODknXSxcbiAgWydiYXNlMTYnLCAnZicsIHJmYzQ2NDgoNCksICcwMTIzNDU2Nzg5YWJjZGVmJ10sXG4gIFsnYmFzZTE2dXBwZXInLCAnRicsIHJmYzQ2NDgoNCksICcwMTIzNDU2Nzg5QUJDREVGJ10sXG4gIFsnYmFzZTMyaGV4JywgJ3YnLCByZmM0NjQ4KDUpLCAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXYnXSxcbiAgWydiYXNlMzJoZXh1cHBlcicsICdWJywgcmZjNDY0OCg1KSwgJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWJ10sXG4gIFsnYmFzZTMyaGV4cGFkJywgJ3QnLCByZmM0NjQ4KDUpLCAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXY9J10sXG4gIFsnYmFzZTMyaGV4cGFkdXBwZXInLCAnVCcsIHJmYzQ2NDgoNSksICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVj0nXSxcbiAgWydiYXNlMzInLCAnYicsIHJmYzQ2NDgoNSksICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejIzNDU2NyddLFxuICBbJ2Jhc2UzMnVwcGVyJywgJ0InLCByZmM0NjQ4KDUpLCAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1NjcnXSxcbiAgWydiYXNlMzJwYWQnLCAnYycsIHJmYzQ2NDgoNSksICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejIzNDU2Nz0nXSxcbiAgWydiYXNlMzJwYWR1cHBlcicsICdDJywgcmZjNDY0OCg1KSwgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMjM0NTY3PSddLFxuICBbJ2Jhc2UzMnonLCAnaCcsIHJmYzQ2NDgoNSksICd5Ym5kcmZnOGVqa21jcHF4b3QxdXdpc3phMzQ1aDc2OSddLFxuICBbJ2Jhc2UzNicsICdrJywgYmFzZVgsICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXSxcbiAgWydiYXNlMzZ1cHBlcicsICdLJywgYmFzZVgsICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonXSxcbiAgWydiYXNlNThidGMnLCAneicsIGJhc2VYLCAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eiddLFxuICBbJ2Jhc2U1OGZsaWNrcicsICdaJywgYmFzZVgsICcxMjM0NTY3ODlhYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaJ10sXG4gIFsnYmFzZTY0JywgJ20nLCByZmM0NjQ4KDYpLCAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyddLFxuICBbJ2Jhc2U2NHBhZCcsICdNJywgcmZjNDY0OCg2KSwgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89J10sXG4gIFsnYmFzZTY0dXJsJywgJ3UnLCByZmM0NjQ4KDYpLCAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktXyddLFxuICBbJ2Jhc2U2NHVybHBhZCcsICdVJywgcmZjNDY0OCg2KSwgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV89J11cbl1cblxuLyoqIEB0eXBlIHtSZWNvcmQ8QmFzZU5hbWUsQmFzZT59ICovXG5jb25zdCBuYW1lcyA9IGNvbnN0YW50cy5yZWR1Y2UoKHByZXYsIHR1cHBsZSkgPT4ge1xuICBwcmV2W3R1cHBsZVswXV0gPSBuZXcgQmFzZSh0dXBwbGVbMF0sIHR1cHBsZVsxXSwgdHVwcGxlWzJdLCB0dXBwbGVbM10pXG4gIHJldHVybiBwcmV2XG59LCAvKiogQHR5cGUge1JlY29yZDxCYXNlTmFtZSxCYXNlPn0gKi8oe30pKVxuXG4vKiogQHR5cGUge1JlY29yZDxCYXNlQ29kZSxCYXNlPn0gKi9cbmNvbnN0IGNvZGVzID0gY29uc3RhbnRzLnJlZHVjZSgocHJldiwgdHVwcGxlKSA9PiB7XG4gIHByZXZbdHVwcGxlWzFdXSA9IG5hbWVzW3R1cHBsZVswXV1cbiAgcmV0dXJuIHByZXZcbn0sIC8qKiBAdHlwZSB7UmVjb3JkPEJhc2VDb2RlLEJhc2U+fSAqLyh7fSkpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBuYW1lcyxcbiAgY29kZXNcbn1cbiJdLCJuYW1lcyI6WyJiYXNlWCIsInJlcXVpcmUiLCJCYXNlIiwicmZjNDY0OCIsImRlY29kZVRleHQiLCJlbmNvZGVUZXh0IiwiaWRlbnRpdHkiLCJlbmNvZGUiLCJkZWNvZGUiLCJjb25zdGFudHMiLCJuYW1lcyIsInJlZHVjZSIsInByZXYiLCJ0dXBwbGUiLCJjb2RlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multibase/src/index.js":
/*!*********************************************!*\
  !*** ./node_modules/multibase/src/index.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */ \nconst constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/multibase/src/constants.js\");\nconst { encodeText, decodeText, concat } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/multibase/src/util.js\");\n/** @typedef {import('./base')} Base */ /** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */ /** @typedef {import(\"./types\").BaseCode} BaseCode */ /** @typedef {import(\"./types\").BaseName} BaseName */ /**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */ function multibase(nameOrCode, buf) {\n    if (!buf) {\n        throw new Error(\"requires an encoded Uint8Array\");\n    }\n    const { name, codeBuf } = encoding(nameOrCode);\n    validEncode(name, buf);\n    return concat([\n        codeBuf,\n        buf\n    ], codeBuf.length + buf.length);\n}\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */ function encode(nameOrCode, buf) {\n    const enc = encoding(nameOrCode);\n    const data = encodeText(enc.encode(buf));\n    return concat([\n        enc.codeBuf,\n        data\n    ], enc.codeBuf.length + data.length);\n}\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */ function decode(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    const prefix = data[0];\n    // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n    if ([\n        \"f\",\n        \"F\",\n        \"v\",\n        \"V\",\n        \"t\",\n        \"T\",\n        \"b\",\n        \"B\",\n        \"c\",\n        \"C\",\n        \"h\",\n        \"k\",\n        \"K\"\n    ].includes(prefix)) {\n        data = data.toLowerCase();\n    }\n    const enc = encoding(/** @type {BaseCode} */ data[0]);\n    return enc.decode(data.substring(1));\n}\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */ function isEncoded(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    // Ensure bufOrString is a string\n    if (Object.prototype.toString.call(data) !== \"[object String]\") {\n        return false;\n    }\n    try {\n        const enc = encoding(/** @type {BaseCode} */ data[0]);\n        return enc.name;\n    } catch (err) {\n        return false;\n    }\n}\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */ function validEncode(name, buf) {\n    const enc = encoding(name);\n    enc.decode(decodeText(buf));\n}\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */ function encoding(nameOrCode) {\n    if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */ nameOrCode)) {\n        return constants.names[/** @type {BaseName} */ nameOrCode];\n    } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */ nameOrCode)) {\n        return constants.codes[/** @type {BaseCode} */ nameOrCode];\n    } else {\n        throw new Error(`Unsupported encoding: ${nameOrCode}`);\n    }\n}\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */ function encodingFromData(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    return encoding(/** @type {BaseCode} */ data[0]);\n}\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nconst names = Object.freeze(constants.names);\nconst codes = Object.freeze(constants.codes);\nexports.names = names;\nexports.codes = codes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multibase/src/rfc4648.js":
/*!***********************************************!*\
  !*** ./node_modules/multibase/src/rfc4648.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */ const decode = (string, alphabet, bitsPerChar)=>{\n    // Build the character lookup table:\n    /** @type {Record<string, number>} */ const codes = {};\n    for(let i = 0; i < alphabet.length; ++i){\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while(string[end - 1] === \"=\"){\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n    // Parse the data:\n    let bits = 0 // Number of bits currently in the buffer\n    ;\n    let buffer = 0 // Bits waiting to be written out, MSB first\n    ;\n    let written = 0 // Next byte to write\n    ;\n    for(let i = 0; i < end; ++i){\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(\"Invalid character \" + string[i]);\n        }\n        // Append the bits to the buffer:\n        buffer = buffer << bitsPerChar | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & buffer >> bits;\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || 0xff & buffer << 8 - bits) {\n        throw new SyntaxError(\"Unexpected end of data\");\n    }\n    return out;\n};\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */ const encode = (data, alphabet, bitsPerChar)=>{\n    const pad = alphabet[alphabet.length - 1] === \"=\";\n    const mask = (1 << bitsPerChar) - 1;\n    let out = \"\";\n    let bits = 0 // Number of bits currently in the buffer\n    ;\n    let buffer = 0 // Bits waiting to be written out, MSB first\n    ;\n    for(let i = 0; i < data.length; ++i){\n        // Slurp data into the buffer:\n        buffer = buffer << 8 | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while(bits > bitsPerChar){\n            bits -= bitsPerChar;\n            out += alphabet[mask & buffer >> bits];\n        }\n    }\n    // Partial character:\n    if (bits) {\n        out += alphabet[mask & buffer << bitsPerChar - bits];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while(out.length * bitsPerChar & 7){\n            out += \"=\";\n        }\n    }\n    return out;\n};\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */ const rfc4648 = (bitsPerChar)=>(alphabet)=>{\n        return {\n            /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */ encode (input) {\n                return encode(input, alphabet, bitsPerChar);\n            },\n            /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */ decode (input) {\n                return decode(input, alphabet, bitsPerChar);\n            }\n        };\n    };\nmodule.exports = {\n    rfc4648\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9yZmM0NjQ4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsMkRBQTJELEdBRTNEOzs7OztDQUtDLEdBQ0QsTUFBTUEsU0FBUyxDQUFDQyxRQUFRQyxVQUFVQztJQUNoQyxvQ0FBb0M7SUFDcEMsbUNBQW1DLEdBQ25DLE1BQU1DLFFBQVEsQ0FBQztJQUNmLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxTQUFTSSxNQUFNLEVBQUUsRUFBRUQsRUFBRztRQUN4Q0QsS0FBSyxDQUFDRixRQUFRLENBQUNHLEVBQUUsQ0FBQyxHQUFHQTtJQUN2QjtJQUVBLDJCQUEyQjtJQUMzQixJQUFJRSxNQUFNTixPQUFPSyxNQUFNO0lBQ3ZCLE1BQU9MLE1BQU0sQ0FBQ00sTUFBTSxFQUFFLEtBQUssSUFBSztRQUM5QixFQUFFQTtJQUNKO0lBRUEsdUJBQXVCO0lBQ3ZCLE1BQU1DLE1BQU0sSUFBSUMsV0FBVyxNQUFPTixjQUFjLElBQUs7SUFFckQsa0JBQWtCO0lBQ2xCLElBQUlPLE9BQU8sRUFBRSx5Q0FBeUM7O0lBQ3RELElBQUlDLFNBQVMsRUFBRSw0Q0FBNEM7O0lBQzNELElBQUlDLFVBQVUsRUFBRSxxQkFBcUI7O0lBQ3JDLElBQUssSUFBSVAsSUFBSSxHQUFHQSxJQUFJRSxLQUFLLEVBQUVGLEVBQUc7UUFDNUIsc0NBQXNDO1FBQ3RDLE1BQU1RLFFBQVFULEtBQUssQ0FBQ0gsTUFBTSxDQUFDSSxFQUFFLENBQUM7UUFDOUIsSUFBSVEsVUFBVUMsV0FBVztZQUN2QixNQUFNLElBQUlDLFlBQVksdUJBQXVCZCxNQUFNLENBQUNJLEVBQUU7UUFDeEQ7UUFFQSxpQ0FBaUM7UUFDakNNLFNBQVMsVUFBV1IsY0FBZVU7UUFDbkNILFFBQVFQO1FBRVIsd0RBQXdEO1FBQ3hELElBQUlPLFFBQVEsR0FBRztZQUNiQSxRQUFRO1lBQ1JGLEdBQUcsQ0FBQ0ksVUFBVSxHQUFHLE9BQVFELFVBQVVEO1FBQ3JDO0lBQ0Y7SUFFQSxpREFBaUQ7SUFDakQsSUFBSUEsUUFBUVAsZUFBZSxPQUFRUSxVQUFXLElBQUlELE1BQVE7UUFDeEQsTUFBTSxJQUFJSyxZQUFZO0lBQ3hCO0lBRUEsT0FBT1A7QUFDVDtBQUVBOzs7OztDQUtDLEdBQ0QsTUFBTVEsU0FBUyxDQUFDQyxNQUFNZixVQUFVQztJQUM5QixNQUFNZSxNQUFNaEIsUUFBUSxDQUFDQSxTQUFTSSxNQUFNLEdBQUcsRUFBRSxLQUFLO0lBQzlDLE1BQU1hLE9BQU8sQ0FBQyxLQUFLaEIsV0FBVSxJQUFLO0lBQ2xDLElBQUlLLE1BQU07SUFFVixJQUFJRSxPQUFPLEVBQUUseUNBQXlDOztJQUN0RCxJQUFJQyxTQUFTLEVBQUUsNENBQTRDOztJQUMzRCxJQUFLLElBQUlOLElBQUksR0FBR0EsSUFBSVksS0FBS1gsTUFBTSxFQUFFLEVBQUVELEVBQUc7UUFDcEMsOEJBQThCO1FBQzlCTSxTQUFTLFVBQVcsSUFBS00sSUFBSSxDQUFDWixFQUFFO1FBQ2hDSyxRQUFRO1FBRVIsK0JBQStCO1FBQy9CLE1BQU9BLE9BQU9QLFlBQWE7WUFDekJPLFFBQVFQO1lBQ1JLLE9BQU9OLFFBQVEsQ0FBQ2lCLE9BQVFSLFVBQVVELEtBQU07UUFDMUM7SUFDRjtJQUVBLHFCQUFxQjtJQUNyQixJQUFJQSxNQUFNO1FBQ1JGLE9BQU9OLFFBQVEsQ0FBQ2lCLE9BQVFSLFVBQVdSLGNBQWNPLEtBQU87SUFDMUQ7SUFFQSx1REFBdUQ7SUFDdkQsSUFBSVEsS0FBSztRQUNQLE1BQU8sSUFBS1osTUFBTSxHQUFHSCxjQUFlLEVBQUc7WUFDckNLLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBT0E7QUFDVDtBQUVBOzs7OztDQUtDLEdBQ0QsTUFBTVksVUFBVSxDQUFDakIsY0FBZ0IsQ0FBQ0Q7UUFDaEMsT0FBTztZQUNMOzs7S0FHQyxHQUNEYyxRQUFRSyxLQUFLO2dCQUNYLE9BQU9MLE9BQU9LLE9BQU9uQixVQUFVQztZQUNqQztZQUNBOzs7S0FHQyxHQUNESCxRQUFRcUIsS0FBSztnQkFDWCxPQUFPckIsT0FBT3FCLE9BQU9uQixVQUFVQztZQUNqQztRQUNGO0lBQ0Y7QUFFQW1CLE9BQU9DLE9BQU8sR0FBRztJQUFFSDtBQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9yZmM0NjQ4LmpzPzEwOTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuQ29kZWNGYWN0b3J5fSBDb2RlY0ZhY3RvcnkgKi9cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gYWxwaGFiZXRcbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzUGVyQ2hhclxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IGRlY29kZSA9IChzdHJpbmcsIGFscGhhYmV0LCBiaXRzUGVyQ2hhcikgPT4ge1xuICAvLyBCdWlsZCB0aGUgY2hhcmFjdGVyIGxvb2t1cCB0YWJsZTpcbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBudW1iZXI+fSAqL1xuICBjb25zdCBjb2RlcyA9IHt9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYWxwaGFiZXQubGVuZ3RoOyArK2kpIHtcbiAgICBjb2Rlc1thbHBoYWJldFtpXV0gPSBpXG4gIH1cblxuICAvLyBDb3VudCB0aGUgcGFkZGluZyBieXRlczpcbiAgbGV0IGVuZCA9IHN0cmluZy5sZW5ndGhcbiAgd2hpbGUgKHN0cmluZ1tlbmQgLSAxXSA9PT0gJz0nKSB7XG4gICAgLS1lbmRcbiAgfVxuXG4gIC8vIEFsbG9jYXRlIHRoZSBvdXRwdXQ6XG4gIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KChlbmQgKiBiaXRzUGVyQ2hhciAvIDgpIHwgMClcblxuICAvLyBQYXJzZSB0aGUgZGF0YTpcbiAgbGV0IGJpdHMgPSAwIC8vIE51bWJlciBvZiBiaXRzIGN1cnJlbnRseSBpbiB0aGUgYnVmZmVyXG4gIGxldCBidWZmZXIgPSAwIC8vIEJpdHMgd2FpdGluZyB0byBiZSB3cml0dGVuIG91dCwgTVNCIGZpcnN0XG4gIGxldCB3cml0dGVuID0gMCAvLyBOZXh0IGJ5dGUgdG8gd3JpdGVcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmQ7ICsraSkge1xuICAgIC8vIFJlYWQgb25lIGNoYXJhY3RlciBmcm9tIHRoZSBzdHJpbmc6XG4gICAgY29uc3QgdmFsdWUgPSBjb2Rlc1tzdHJpbmdbaV1dXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgJyArIHN0cmluZ1tpXSlcbiAgICB9XG5cbiAgICAvLyBBcHBlbmQgdGhlIGJpdHMgdG8gdGhlIGJ1ZmZlcjpcbiAgICBidWZmZXIgPSAoYnVmZmVyIDw8IGJpdHNQZXJDaGFyKSB8IHZhbHVlXG4gICAgYml0cyArPSBiaXRzUGVyQ2hhclxuXG4gICAgLy8gV3JpdGUgb3V0IHNvbWUgYml0cyBpZiB0aGUgYnVmZmVyIGhhcyBhIGJ5dGUncyB3b3J0aDpcbiAgICBpZiAoYml0cyA+PSA4KSB7XG4gICAgICBiaXRzIC09IDhcbiAgICAgIG91dFt3cml0dGVuKytdID0gMHhmZiAmIChidWZmZXIgPj4gYml0cylcbiAgICB9XG4gIH1cblxuICAvLyBWZXJpZnkgdGhhdCB3ZSBoYXZlIHJlY2VpdmVkIGp1c3QgZW5vdWdoIGJpdHM6XG4gIGlmIChiaXRzID49IGJpdHNQZXJDaGFyIHx8IDB4ZmYgJiAoYnVmZmVyIDw8ICg4IC0gYml0cykpKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdVbmV4cGVjdGVkIGVuZCBvZiBkYXRhJylcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbHBoYWJldFxuICogQHBhcmFtIHtudW1iZXJ9IGJpdHNQZXJDaGFyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5jb25zdCBlbmNvZGUgPSAoZGF0YSwgYWxwaGFiZXQsIGJpdHNQZXJDaGFyKSA9PiB7XG4gIGNvbnN0IHBhZCA9IGFscGhhYmV0W2FscGhhYmV0Lmxlbmd0aCAtIDFdID09PSAnPSdcbiAgY29uc3QgbWFzayA9ICgxIDw8IGJpdHNQZXJDaGFyKSAtIDFcbiAgbGV0IG91dCA9ICcnXG5cbiAgbGV0IGJpdHMgPSAwIC8vIE51bWJlciBvZiBiaXRzIGN1cnJlbnRseSBpbiB0aGUgYnVmZmVyXG4gIGxldCBidWZmZXIgPSAwIC8vIEJpdHMgd2FpdGluZyB0byBiZSB3cml0dGVuIG91dCwgTVNCIGZpcnN0XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgIC8vIFNsdXJwIGRhdGEgaW50byB0aGUgYnVmZmVyOlxuICAgIGJ1ZmZlciA9IChidWZmZXIgPDwgOCkgfCBkYXRhW2ldXG4gICAgYml0cyArPSA4XG5cbiAgICAvLyBXcml0ZSBvdXQgYXMgbXVjaCBhcyB3ZSBjYW46XG4gICAgd2hpbGUgKGJpdHMgPiBiaXRzUGVyQ2hhcikge1xuICAgICAgYml0cyAtPSBiaXRzUGVyQ2hhclxuICAgICAgb3V0ICs9IGFscGhhYmV0W21hc2sgJiAoYnVmZmVyID4+IGJpdHMpXVxuICAgIH1cbiAgfVxuXG4gIC8vIFBhcnRpYWwgY2hhcmFjdGVyOlxuICBpZiAoYml0cykge1xuICAgIG91dCArPSBhbHBoYWJldFttYXNrICYgKGJ1ZmZlciA8PCAoYml0c1BlckNoYXIgLSBiaXRzKSldXG4gIH1cblxuICAvLyBBZGQgcGFkZGluZyBjaGFyYWN0ZXJzIHVudGlsIHdlIGhpdCBhIGJ5dGUgYm91bmRhcnk6XG4gIGlmIChwYWQpIHtcbiAgICB3aGlsZSAoKG91dC5sZW5ndGggKiBiaXRzUGVyQ2hhcikgJiA3KSB7XG4gICAgICBvdXQgKz0gJz0nXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG4vKipcbiAqIFJGQzQ2NDggRmFjdG9yeVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzUGVyQ2hhclxuICogQHJldHVybnMge0NvZGVjRmFjdG9yeX1cbiAqL1xuY29uc3QgcmZjNDY0OCA9IChiaXRzUGVyQ2hhcikgPT4gKGFscGhhYmV0KSA9PiB7XG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZW5jb2RlIChpbnB1dCkge1xuICAgICAgcmV0dXJuIGVuY29kZShpbnB1dCwgYWxwaGFiZXQsIGJpdHNQZXJDaGFyKVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gICAgICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gICAgICovXG4gICAgZGVjb2RlIChpbnB1dCkge1xuICAgICAgcmV0dXJuIGRlY29kZShpbnB1dCwgYWxwaGFiZXQsIGJpdHNQZXJDaGFyKVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmZjNDY0OCB9XG4iXSwibmFtZXMiOlsiZGVjb2RlIiwic3RyaW5nIiwiYWxwaGFiZXQiLCJiaXRzUGVyQ2hhciIsImNvZGVzIiwiaSIsImxlbmd0aCIsImVuZCIsIm91dCIsIlVpbnQ4QXJyYXkiLCJiaXRzIiwiYnVmZmVyIiwid3JpdHRlbiIsInZhbHVlIiwidW5kZWZpbmVkIiwiU3ludGF4RXJyb3IiLCJlbmNvZGUiLCJkYXRhIiwicGFkIiwibWFzayIsInJmYzQ2NDgiLCJpbnB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/rfc4648.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multibase/src/util.js":
/*!********************************************!*\
  !*** ./node_modules/multibase/src/util.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nconst textDecoder = new TextDecoder();\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */ const decodeText = (bytes)=>textDecoder.decode(bytes);\nconst textEncoder = new TextEncoder();\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */ const encodeText = (text)=>textEncoder.encode(text);\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */ function concat(arrs, length) {\n    const output = new Uint8Array(length);\n    let offset = 0;\n    for (const arr of arrs){\n        output.set(arr, offset);\n        offset += arr.length;\n    }\n    return output;\n}\nmodule.exports = {\n    decodeText,\n    encodeText,\n    concat\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsY0FBYyxJQUFJQztBQUN4Qjs7O0NBR0MsR0FDRCxNQUFNQyxhQUFhLENBQUNDLFFBQVVILFlBQVlJLE1BQU0sQ0FBQ0Q7QUFFakQsTUFBTUUsY0FBYyxJQUFJQztBQUN4Qjs7O0NBR0MsR0FDRCxNQUFNQyxhQUFhLENBQUNDLE9BQVNILFlBQVlJLE1BQU0sQ0FBQ0Q7QUFFaEQ7Ozs7OztDQU1DLEdBQ0QsU0FBU0UsT0FBUUMsSUFBSSxFQUFFQyxNQUFNO0lBQzNCLE1BQU1DLFNBQVMsSUFBSUMsV0FBV0Y7SUFDOUIsSUFBSUcsU0FBUztJQUViLEtBQUssTUFBTUMsT0FBT0wsS0FBTTtRQUN0QkUsT0FBT0ksR0FBRyxDQUFDRCxLQUFLRDtRQUNoQkEsVUFBVUMsSUFBSUosTUFBTTtJQUN0QjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQUssT0FBT0MsT0FBTyxHQUFHO0lBQUVqQjtJQUFZSztJQUFZRztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2l0aC10YWlsd2luZGNzcy1hcHAvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy91dGlsLmpzPzY3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHRleHREZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKClcbi8qKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlclZpZXd8QXJyYXlCdWZmZXJ9IGJ5dGVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5jb25zdCBkZWNvZGVUZXh0ID0gKGJ5dGVzKSA9PiB0ZXh0RGVjb2Rlci5kZWNvZGUoYnl0ZXMpXG5cbmNvbnN0IHRleHRFbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKClcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBlbmNvZGVUZXh0ID0gKHRleHQpID0+IHRleHRFbmNvZGVyLmVuY29kZSh0ZXh0KVxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgVWludDhBcnJheSBjcmVhdGVkIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIHBhc3NlZCBBcnJheXNcbiAqXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5TGlrZTxudW1iZXI+Pn0gYXJyc1xuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGNvbmNhdCAoYXJycywgbGVuZ3RoKSB7XG4gIGNvbnN0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgbGV0IG9mZnNldCA9IDBcblxuICBmb3IgKGNvbnN0IGFyciBvZiBhcnJzKSB7XG4gICAgb3V0cHV0LnNldChhcnIsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gYXJyLmxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIG91dHB1dFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZGVjb2RlVGV4dCwgZW5jb2RlVGV4dCwgY29uY2F0IH1cbiJdLCJuYW1lcyI6WyJ0ZXh0RGVjb2RlciIsIlRleHREZWNvZGVyIiwiZGVjb2RlVGV4dCIsImJ5dGVzIiwiZGVjb2RlIiwidGV4dEVuY29kZXIiLCJUZXh0RW5jb2RlciIsImVuY29kZVRleHQiLCJ0ZXh0IiwiZW5jb2RlIiwiY29uY2F0IiwiYXJycyIsImxlbmd0aCIsIm91dHB1dCIsIlVpbnQ4QXJyYXkiLCJvZmZzZXQiLCJhcnIiLCJzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/util.js\n");

/***/ })

};
;
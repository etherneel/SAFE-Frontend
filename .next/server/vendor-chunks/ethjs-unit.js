"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethjs-unit";
exports.ids = ["vendor-chunks/ethjs-unit"];
exports.modules = {

/***/ "(ssr)/./node_modules/ethjs-unit/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/ethjs-unit/lib/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js\");\nvar numberToBN = __webpack_require__(/*! number-to-bn */ \"(ssr)/./node_modules/number-to-bn/src/index.js\");\nvar zero = new BN(0);\nvar negative1 = new BN(-1);\n// complete ethereum unit map\nvar unitMap = {\n    \"noether\": \"0\",\n    \"wei\": \"1\",\n    \"kwei\": \"1000\",\n    \"Kwei\": \"1000\",\n    \"babbage\": \"1000\",\n    \"femtoether\": \"1000\",\n    \"mwei\": \"1000000\",\n    \"Mwei\": \"1000000\",\n    \"lovelace\": \"1000000\",\n    \"picoether\": \"1000000\",\n    \"gwei\": \"1000000000\",\n    \"Gwei\": \"1000000000\",\n    \"shannon\": \"1000000000\",\n    \"nanoether\": \"1000000000\",\n    \"nano\": \"1000000000\",\n    \"szabo\": \"1000000000000\",\n    \"microether\": \"1000000000000\",\n    \"micro\": \"1000000000000\",\n    \"finney\": \"1000000000000000\",\n    \"milliether\": \"1000000000000000\",\n    \"milli\": \"1000000000000000\",\n    \"ether\": \"1000000000000000000\",\n    \"kether\": \"1000000000000000000000\",\n    \"grand\": \"1000000000000000000000\",\n    \"mether\": \"1000000000000000000000000\",\n    \"gether\": \"1000000000000000000000000000\",\n    \"tether\": \"1000000000000000000000000000000\"\n};\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */ function getValueOfUnit(unitInput) {\n    var unit = unitInput ? unitInput.toLowerCase() : \"ether\";\n    var unitValue = unitMap[unit]; // eslint-disable-line\n    if (typeof unitValue !== \"string\") {\n        throw new Error(\"[ethjs-unit] the unit provided \" + unitInput + \" doesn't exists, please use the one of the following units \" + JSON.stringify(unitMap, null, 2));\n    }\n    return new BN(unitValue, 10);\n}\nfunction numberToString(arg) {\n    if (typeof arg === \"string\") {\n        if (!arg.match(/^-?[0-9.]+$/)) {\n            throw new Error(\"while converting number to string, invalid number value '\" + arg + \"', should be a number matching (^-?[0-9.]+).\");\n        }\n        return arg;\n    } else if (typeof arg === \"number\") {\n        return String(arg);\n    } else if (typeof arg === \"object\" && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n        if (arg.toPrecision) {\n            return String(arg.toPrecision());\n        } else {\n            // eslint-disable-line\n            return arg.toString(10);\n        }\n    }\n    throw new Error(\"while converting number to string, invalid number value '\" + arg + \"' type \" + typeof arg + \".\");\n}\nfunction fromWei(weiInput, unit, optionsInput) {\n    var wei = numberToBN(weiInput); // eslint-disable-line\n    var negative = wei.lt(zero); // eslint-disable-line\n    var base = getValueOfUnit(unit);\n    var baseLength = unitMap[unit].length - 1 || 1;\n    var options = optionsInput || {};\n    if (negative) {\n        wei = wei.mul(negative1);\n    }\n    var fraction = wei.mod(base).toString(10); // eslint-disable-line\n    while(fraction.length < baseLength){\n        fraction = \"0\" + fraction;\n    }\n    if (!options.pad) {\n        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    }\n    var whole = wei.div(base).toString(10); // eslint-disable-line\n    if (options.commify) {\n        whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    var value = \"\" + whole + (fraction == \"0\" ? \"\" : \".\" + fraction); // eslint-disable-line\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nfunction toWei(etherInput, unit) {\n    var ether = numberToString(etherInput); // eslint-disable-line\n    var base = getValueOfUnit(unit);\n    var baseLength = unitMap[unit].length - 1 || 1;\n    // Is it negative?\n    var negative = ether.substring(0, 1) === \"-\"; // eslint-disable-line\n    if (negative) {\n        ether = ether.substring(1);\n    }\n    if (ether === \".\") {\n        throw new Error(\"[ethjs-unit] while converting number \" + etherInput + \" to wei, invalid value\");\n    }\n    // Split it into a whole and fractional part\n    var comps = ether.split(\".\"); // eslint-disable-line\n    if (comps.length > 2) {\n        throw new Error(\"[ethjs-unit] while converting number \" + etherInput + \" to wei,  too many decimal points\");\n    }\n    var whole = comps[0], fraction = comps[1]; // eslint-disable-line\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    if (fraction.length > baseLength) {\n        throw new Error(\"[ethjs-unit] while converting number \" + etherInput + \" to wei, too many decimal places\");\n    }\n    while(fraction.length < baseLength){\n        fraction += \"0\";\n    }\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    var wei = whole.mul(base).add(fraction); // eslint-disable-line\n    if (negative) {\n        wei = wei.mul(negative1);\n    }\n    return new BN(wei.toString(10), 10);\n}\nmodule.exports = {\n    unitMap: unitMap,\n    numberToString: numberToString,\n    getValueOfUnit: getValueOfUnit,\n    fromWei: fromWei,\n    toWei: toWei\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethjs-unit/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n(function(module1, exports) {\n    \"use strict\";\n    // Utils\n    function assert(val, msg) {\n        if (!val) throw new Error(msg || \"Assertion failed\");\n    }\n    // Could use `inherits` module, but don't want to move from single file\n    // architecture yet.\n    function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {};\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n    }\n    // BN\n    function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n            return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        // Reduction context\n        this.red = null;\n        if (number !== null) {\n            if (base === \"le\" || base === \"be\") {\n                endian = base;\n                base = 10;\n            }\n            this._init(number || 0, base || 10, endian || \"be\");\n        }\n    }\n    if (typeof module1 === \"object\") {\n        module1.exports = BN;\n    } else {\n        exports.BN = BN;\n    }\n    BN.BN = BN;\n    BN.wordSize = 26;\n    var Buffer;\n    try {\n        Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    } catch (e) {}\n    BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n            return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n    };\n    BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n    };\n    BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n    };\n    BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n            return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n            return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n            base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n            start++;\n        }\n        if (base === 16) {\n            this._parseHex(number, start);\n        } else {\n            this._parseBase(number, base, start);\n        }\n        if (number[0] === \"-\") {\n            this.negative = 1;\n        }\n        this.strip();\n        if (endian !== \"le\") return;\n        this._initArray(this.toArray(), base, endian);\n    };\n    BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n            this.negative = 1;\n            number = -number;\n        }\n        if (number < 0x4000000) {\n            this.words = [\n                number & 0x3ffffff\n            ];\n            this.length = 1;\n        } else if (number < 0x10000000000000) {\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff\n            ];\n            this.length = 2;\n        } else {\n            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff,\n                1\n            ];\n            this.length = 3;\n        }\n        if (endian !== \"le\") return;\n        // Reverse the bytes\n        this._initArray(this.toArray(), base, endian);\n    };\n    BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n            this.words = [\n                0\n            ];\n            this.length = 1;\n            return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n            for(i = number.length - 1, j = 0; i >= 0; i -= 3){\n                w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        } else if (endian === \"le\") {\n            for(i = 0, j = 0; i < number.length; i += 3){\n                w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        }\n        return this.strip();\n    };\n    function parseHex(str, start, end) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for(var i = start; i < len; i++){\n            var c = str.charCodeAt(i) - 48;\n            r <<= 4;\n            // 'a' - 'f'\n            if (c >= 49 && c <= 54) {\n                r |= c - 49 + 0xa;\n            // 'A' - 'F'\n            } else if (c >= 17 && c <= 22) {\n                r |= c - 17 + 0xa;\n            // '0' - '9'\n            } else {\n                r |= c & 0xf;\n            }\n        }\n        return r;\n    }\n    BN.prototype._parseHex = function _parseHex(number, start) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        var j, w;\n        // Scan 24-bit chunks and add them to the number\n        var off = 0;\n        for(i = number.length - 6, j = 0; i >= start; i -= 6){\n            w = parseHex(number, i, i + 6);\n            this.words[j] |= w << off & 0x3ffffff;\n            // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n            this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n            off += 24;\n            if (off >= 26) {\n                off -= 26;\n                j++;\n            }\n        }\n        if (i + 6 !== start) {\n            w = parseHex(number, start, i + 6);\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n        }\n        this.strip();\n    };\n    function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for(var i = start; i < len; i++){\n            var c = str.charCodeAt(i) - 48;\n            r *= mul;\n            // 'a'\n            if (c >= 49) {\n                r += c - 49 + 0xa;\n            // 'A'\n            } else if (c >= 17) {\n                r += c - 17 + 0xa;\n            // '0' - '9'\n            } else {\n                r += c;\n            }\n        }\n        return r;\n    }\n    BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [\n            0\n        ];\n        this.length = 1;\n        // Find length of limb in base\n        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base){\n            limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for(var i = start; i < end; i += limbLen){\n            word = parseBase(number, i, i + limbLen, base);\n            this.imuln(limbPow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n        if (mod !== 0) {\n            var pow = 1;\n            word = parseBase(number, i, number.length, base);\n            for(i = 0; i < mod; i++){\n                pow *= base;\n            }\n            this.imuln(pow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n    };\n    BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n    };\n    BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n    };\n    BN.prototype._expand = function _expand(size) {\n        while(this.length < size){\n            this.words[this.length++] = 0;\n        }\n        return this;\n    };\n    // Remove leading `0` from `this`\n    BN.prototype.strip = function strip() {\n        while(this.length > 1 && this.words[this.length - 1] === 0){\n            this.length--;\n        }\n        return this._normSign();\n    };\n    BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n            this.negative = 0;\n        }\n        return this;\n    };\n    BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n    };\n    /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */ var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n    ];\n    var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n    ];\n    var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        10000000,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64000000,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        24300000,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n    ];\n    BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n            out = \"\";\n            var off = 0;\n            var carry = 0;\n            for(var i = 0; i < this.length; i++){\n                var w = this.words[i];\n                var word = ((w << off | carry) & 0xffffff).toString(16);\n                carry = w >>> 24 - off & 0xffffff;\n                if (carry !== 0 || i !== this.length - 1) {\n                    out = zeros[6 - word.length] + word + out;\n                } else {\n                    out = word + out;\n                }\n                off += 2;\n                if (off >= 26) {\n                    off -= 26;\n                    i--;\n                }\n            }\n            if (carry !== 0) {\n                out = carry.toString(16) + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n            var groupSize = groupSizes[base];\n            // var groupBase = Math.pow(base, groupSize);\n            var groupBase = groupBases[base];\n            out = \"\";\n            var c = this.clone();\n            c.negative = 0;\n            while(!c.isZero()){\n                var r = c.modn(groupBase).toString(base);\n                c = c.idivn(groupBase);\n                if (!c.isZero()) {\n                    out = zeros[groupSize - r.length] + r + out;\n                } else {\n                    out = r + out;\n                }\n            }\n            if (this.isZero()) {\n                out = \"0\" + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n    };\n    BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n            ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n            // NOTE: at this stage it is known that the top bit is set\n            ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n            assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n    };\n    BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n    };\n    BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer !== \"undefined\");\n        return this.toArrayLike(Buffer, endian, length);\n    };\n    BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n    };\n    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n            // Assume big-endian\n            for(i = 0; i < reqLength - byteLength; i++){\n                res[i] = 0;\n            }\n            for(i = 0; !q.isZero(); i++){\n                b = q.andln(0xff);\n                q.iushrn(8);\n                res[reqLength - i - 1] = b;\n            }\n        } else {\n            for(i = 0; !q.isZero(); i++){\n                b = q.andln(0xff);\n                q.iushrn(8);\n                res[i] = b;\n            }\n            for(; i < reqLength; i++){\n                res[i] = 0;\n            }\n        }\n        return res;\n    };\n    if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n            return 32 - Math.clz32(w);\n        };\n    } else {\n        BN.prototype._countBits = function _countBits(w) {\n            var t = w;\n            var r = 0;\n            if (t >= 0x1000) {\n                r += 13;\n                t >>>= 13;\n            }\n            if (t >= 0x40) {\n                r += 7;\n                t >>>= 7;\n            }\n            if (t >= 0x8) {\n                r += 4;\n                t >>>= 4;\n            }\n            if (t >= 0x02) {\n                r += 2;\n                t >>>= 2;\n            }\n            return r + t;\n        };\n    }\n    BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 0x1fff) === 0) {\n            r += 13;\n            t >>>= 13;\n        }\n        if ((t & 0x7f) === 0) {\n            r += 7;\n            t >>>= 7;\n        }\n        if ((t & 0xf) === 0) {\n            r += 4;\n            t >>>= 4;\n        }\n        if ((t & 0x3) === 0) {\n            r += 2;\n            t >>>= 2;\n        }\n        if ((t & 0x1) === 0) {\n            r++;\n        }\n        return r;\n    };\n    // Return number of used bits in a BN\n    BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n    };\n    function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for(var bit = 0; bit < w.length; bit++){\n            var off = bit / 26 | 0;\n            var wbit = bit % 26;\n            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n    }\n    // Number of trailing zero bits\n    BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n        for(var i = 0; i < this.length; i++){\n            var b = this._zeroBits(this.words[i]);\n            r += b;\n            if (b !== 26) break;\n        }\n        return r;\n    };\n    BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n    };\n    BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n            return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n    };\n    BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n            return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n    };\n    BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n    };\n    // Return negative clone of `this`\n    BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n    };\n    BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n            this.negative ^= 1;\n        }\n        return this;\n    };\n    // Or `num` with `this` in-place\n    BN.prototype.iuor = function iuor(num) {\n        while(this.length < num.length){\n            this.words[this.length++] = 0;\n        }\n        for(var i = 0; i < num.length; i++){\n            this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n    };\n    BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n    };\n    // Or `num` with `this`\n    BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n    };\n    BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n    };\n    // And `num` with `this` in-place\n    BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n        if (this.length > num.length) {\n            b = num;\n        } else {\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n    };\n    BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n    };\n    // And `num` with `this`\n    BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n    };\n    BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n    };\n    // Xor `num` with `this` in-place\n    BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = a.length;\n        return this.strip();\n    };\n    BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n    };\n    // Xor `num` with `this`\n    BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n    };\n    BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n    };\n    // Not ``this`` with ``width`` bitwidth\n    BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        // Extend the buffer with leading zeroes\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n            bytesNeeded--;\n        }\n        // Handle complete words\n        for(var i = 0; i < bytesNeeded; i++){\n            this.words[i] = ~this.words[i] & 0x3ffffff;\n        }\n        // Handle the residue\n        if (bitsLeft > 0) {\n            this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        }\n        // And remove leading zeroes\n        return this.strip();\n    };\n    BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n    };\n    // Set `bit` of `this`\n    BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n            this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n            this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n    };\n    // Add `num` to `this` in-place\n    BN.prototype.iadd = function iadd(num) {\n        var r;\n        // negative + positive\n        if (this.negative !== 0 && num.negative === 0) {\n            this.negative = 0;\n            r = this.isub(num);\n            this.negative ^= 1;\n            return this._normSign();\n        // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n            num.negative = 0;\n            r = this.isub(num);\n            num.negative = 1;\n            return r._normSign();\n        }\n        // a.length > b.length\n        var a, b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n            this.words[this.length] = carry;\n            this.length++;\n        // Copy the rest of the words\n        } else if (a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        return this;\n    };\n    // Add `num` to `this`\n    BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n            num.negative = 0;\n            res = this.sub(num);\n            num.negative ^= 1;\n            return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n            this.negative = 0;\n            res = num.sub(this);\n            this.negative = 1;\n            return res;\n        }\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n    };\n    // Subtract `num` from `this` in-place\n    BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n            num.negative = 0;\n            var r = this.iadd(num);\n            num.negative = 1;\n            return r._normSign();\n        // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n            this.negative = 0;\n            this.iadd(num);\n            this.negative = 1;\n            return this._normSign();\n        }\n        // At this point both numbers are positive\n        var cmp = this.cmp(num);\n        // Optimization - zeroify\n        if (cmp === 0) {\n            this.negative = 0;\n            this.length = 1;\n            this.words[0] = 0;\n            return this;\n        }\n        // a > b\n        var a, b;\n        if (cmp > 0) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        // Copy rest of the words\n        if (carry === 0 && i < a.length && a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n            this.negative = 1;\n        }\n        return this.strip();\n    };\n    // Subtract `num` from `this`\n    BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n    };\n    function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        // Peel one iteration (compiler can't do it, because of code complexity)\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n        for(var k = 1; k < len; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = carry >>> 26;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j | 0;\n                a = self.words[i] | 0;\n                b = num.words[j] | 0;\n                r = a * b + rword;\n                ncarry += r / 0x4000000 | 0;\n                rword = r & 0x3ffffff;\n            }\n            out.words[k] = rword | 0;\n            carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry | 0;\n        } else {\n            out.length--;\n        }\n        return out.strip();\n    }\n    // TODO(indutny): it may be reasonable to omit it for users who don't need\n    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n    // multiplication (like elliptic secp256k1).\n    var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */ lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */ lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */ lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */ lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */ lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */ lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */ lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */ lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */ lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */ lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */ lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */ lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */ lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */ lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */ lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */ lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */ lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */ lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */ lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n            o[19] = c;\n            out.length++;\n        }\n        return out;\n    };\n    // Polyfill comb\n    if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n    }\n    function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for(var k = 0; k < out.length - 1; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = hncarry;\n            hncarry = 0;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j;\n                var a = self.words[i] | 0;\n                var b = num.words[j] | 0;\n                var r = a * b;\n                var lo = r & 0x3ffffff;\n                ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n                lo = lo + rword | 0;\n                rword = lo & 0x3ffffff;\n                ncarry = ncarry + (lo >>> 26) | 0;\n                hncarry += ncarry >>> 26;\n                ncarry &= 0x3ffffff;\n            }\n            out.words[k] = rword;\n            carry = ncarry;\n            ncarry = hncarry;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry;\n        } else {\n            out.length--;\n        }\n        return out.strip();\n    }\n    function jumboMulTo(self, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self, num, out);\n    }\n    BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n            res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n            res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n            res = bigMulTo(this, num, out);\n        } else {\n            res = jumboMulTo(this, num, out);\n        }\n        return res;\n    };\n    // Cooley-Tukey algorithm for FFT\n    // slightly revisited to rely on looping instead of recursion\n    function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for(var i = 0; i < N; i++){\n            t[i] = this.revBin(i, l, N);\n        }\n        return t;\n    };\n    // Returns binary-reversed representation of `x`\n    FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n        for(var i = 0; i < l; i++){\n            rb |= (x & 1) << l - i - 1;\n            x >>= 1;\n        }\n        return rb;\n    };\n    // Performs \"tweedling\" phase, therefore 'emulating'\n    // behaviour of the recursive algorithm\n    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for(var i = 0; i < N; i++){\n            rtws[i] = rws[rbt[i]];\n            itws[i] = iws[rbt[i]];\n        }\n    };\n    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for(var s = 1; s < N; s <<= 1){\n            var l = s << 1;\n            var rtwdf = Math.cos(2 * Math.PI / l);\n            var itwdf = Math.sin(2 * Math.PI / l);\n            for(var p = 0; p < N; p += l){\n                var rtwdf_ = rtwdf;\n                var itwdf_ = itwdf;\n                for(var j = 0; j < s; j++){\n                    var re = rtws[p + j];\n                    var ie = itws[p + j];\n                    var ro = rtws[p + j + s];\n                    var io = itws[p + j + s];\n                    var rx = rtwdf_ * ro - itwdf_ * io;\n                    io = rtwdf_ * io + itwdf_ * ro;\n                    ro = rx;\n                    rtws[p + j] = re + ro;\n                    itws[p + j] = ie + io;\n                    rtws[p + j + s] = re - ro;\n                    itws[p + j + s] = ie - io;\n                    /* jshint maxdepth : false */ if (j !== l) {\n                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                        rtwdf_ = rx;\n                    }\n                }\n            }\n        }\n    };\n    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for(N = N / 2 | 0; N; N = N >>> 1){\n            i++;\n        }\n        return 1 << i + 1 + odd;\n    };\n    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n        for(var i = 0; i < N / 2; i++){\n            var t = rws[i];\n            rws[i] = rws[N - i - 1];\n            rws[N - i - 1] = t;\n            t = iws[i];\n            iws[i] = -iws[N - i - 1];\n            iws[N - i - 1] = -t;\n        }\n    };\n    FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for(var i = 0; i < N / 2; i++){\n            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n            ws[i] = w & 0x3ffffff;\n            if (w < 0x4000000) {\n                carry = 0;\n            } else {\n                carry = w / 0x4000000 | 0;\n            }\n        }\n        return ws;\n    };\n    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for(var i = 0; i < len; i++){\n            carry = carry + (ws[i] | 0);\n            rws[2 * i] = carry & 0x1fff;\n            carry = carry >>> 13;\n            rws[2 * i + 1] = carry & 0x1fff;\n            carry = carry >>> 13;\n        }\n        // Pad with zeroes\n        for(i = 2 * len; i < N; ++i){\n            rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n    };\n    FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for(var i = 0; i < N; i++){\n            ph[i] = 0;\n        }\n        return ph;\n    };\n    FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for(var i = 0; i < N; i++){\n            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n            rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n    };\n    // Multiply `this` by `num`\n    BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n    };\n    // Multiply employing FFT\n    BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n    };\n    // In-place Multiplication\n    BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n    };\n    BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        // Carry\n        var carry = 0;\n        for(var i = 0; i < this.length; i++){\n            var w = (this.words[i] | 0) * num;\n            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n            carry >>= 26;\n            carry += w / 0x4000000 | 0;\n            // NOTE: lo is 27bit maximum\n            carry += lo >>> 26;\n            this.words[i] = lo & 0x3ffffff;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n    };\n    // `this` * `this`\n    BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n    };\n    // `this` * `this` in-place\n    BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n    };\n    // Math.pow(`this`, `num`)\n    BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1);\n        // Skip leading zeroes\n        var res = this;\n        for(var i = 0; i < w.length; i++, res = res.sqr()){\n            if (w[i] !== 0) break;\n        }\n        if (++i < w.length) {\n            for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){\n                if (w[i] === 0) continue;\n                res = res.mul(q);\n            }\n        }\n        return res;\n    };\n    // Shift-left in-place\n    BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n            var carry = 0;\n            for(i = 0; i < this.length; i++){\n                var newCarry = this.words[i] & carryMask;\n                var c = (this.words[i] | 0) - newCarry << r;\n                this.words[i] = c | carry;\n                carry = newCarry >>> 26 - r;\n            }\n            if (carry) {\n                this.words[i] = carry;\n                this.length++;\n            }\n        }\n        if (s !== 0) {\n            for(i = this.length - 1; i >= 0; i--){\n                this.words[i + s] = this.words[i];\n            }\n            for(i = 0; i < s; i++){\n                this.words[i] = 0;\n            }\n            this.length += s;\n        }\n        return this.strip();\n    };\n    BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n    };\n    // Shift-right in-place\n    // NOTE: `hint` is a lowest bit before trailing zeroes\n    // NOTE: if `extended` is present - it will be filled with destroyed bits\n    BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n            h = (hint - hint % 26) / 26;\n        } else {\n            h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        // Extended mode, copy masked part\n        if (maskedWords) {\n            for(var i = 0; i < s; i++){\n                maskedWords.words[i] = this.words[i];\n            }\n            maskedWords.length = s;\n        }\n        if (s === 0) {\n        // No-op, we should not move anything at all\n        } else if (this.length > s) {\n            this.length -= s;\n            for(i = 0; i < this.length; i++){\n                this.words[i] = this.words[i + s];\n            }\n        } else {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        var carry = 0;\n        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){\n            var word = this.words[i] | 0;\n            this.words[i] = carry << 26 - r | word >>> r;\n            carry = word & mask;\n        }\n        // Push carried bits as a mask\n        if (maskedWords && carry !== 0) {\n            maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        return this.strip();\n    };\n    BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n    };\n    // Shift-left\n    BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n    };\n    BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n    };\n    // Shift-right\n    BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n    };\n    BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n    };\n    // Test if n bit is set\n    BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) return false;\n        // Check bit and return\n        var w = this.words[s];\n        return !!(w & q);\n    };\n    // Return only lowers bits of number (in-place)\n    BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n            return this;\n        }\n        if (r !== 0) {\n            s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n            this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n    };\n    // Return only lowers bits of number\n    BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n    };\n    // Add plain number `num` to `this`\n    BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num);\n        // Possible sign change\n        if (this.negative !== 0) {\n            if (this.length === 1 && (this.words[0] | 0) < num) {\n                this.words[0] = num - (this.words[0] | 0);\n                this.negative = 0;\n                return this;\n            }\n            this.negative = 0;\n            this.isubn(num);\n            this.negative = 1;\n            return this;\n        }\n        // Add without checks\n        return this._iaddn(num);\n    };\n    BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        // Carry\n        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){\n            this.words[i] -= 0x4000000;\n            if (i === this.length - 1) {\n                this.words[i + 1] = 1;\n            } else {\n                this.words[i + 1]++;\n            }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n    };\n    // Subtract plain number `num` from `this`\n    BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n        if (this.negative !== 0) {\n            this.negative = 0;\n            this.iaddn(num);\n            this.negative = 1;\n            return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n            this.words[0] = -this.words[0];\n            this.negative = 1;\n        } else {\n            // Carry\n            for(var i = 0; i < this.length && this.words[i] < 0; i++){\n                this.words[i] += 0x4000000;\n                this.words[i + 1] -= 1;\n            }\n        }\n        return this.strip();\n    };\n    BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n    };\n    BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n    };\n    BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n    };\n    BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n    };\n    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for(i = 0; i < num.length; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            var right = (num.words[i] | 0) * mul;\n            w -= right & 0x3ffffff;\n            carry = (w >> 26) - (right / 0x4000000 | 0);\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        for(; i < this.length - shift; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            carry = w >> 26;\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        if (carry === 0) return this.strip();\n        // Subtraction overflow\n        assert(carry === -1);\n        carry = 0;\n        for(i = 0; i < this.length; i++){\n            w = -(this.words[i] | 0) + carry;\n            carry = w >> 26;\n            this.words[i] = w & 0x3ffffff;\n        }\n        this.negative = 1;\n        return this.strip();\n    };\n    BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        // Normalize\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n            b = b.ushln(shift);\n            a.iushln(shift);\n            bhi = b.words[b.length - 1] | 0;\n        }\n        // Initialize quotient\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n            q = new BN(null);\n            q.length = m + 1;\n            q.words = new Array(q.length);\n            for(var i = 0; i < q.length; i++){\n                q.words[i] = 0;\n            }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n            a = diff;\n            if (q) {\n                q.words[m] = 1;\n            }\n        }\n        for(var j = m - 1; j >= 0; j--){\n            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);\n            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n            // (0x7ffffff)\n            qj = Math.min(qj / bhi | 0, 0x3ffffff);\n            a._ishlnsubmul(b, qj, j);\n            while(a.negative !== 0){\n                qj--;\n                a.negative = 0;\n                a._ishlnsubmul(b, 1, j);\n                if (!a.isZero()) {\n                    a.negative ^= 1;\n                }\n            }\n            if (q) {\n                q.words[j] = qj;\n            }\n        }\n        if (q) {\n            q.strip();\n        }\n        a.strip();\n        // Denormalize\n        if (mode !== \"div\" && shift !== 0) {\n            a.iushrn(shift);\n        }\n        return {\n            div: q || null,\n            mod: a\n        };\n    };\n    // NOTE: 1) `mode` can be set to `mod` to request mod only,\n    //       to `div` to request div only, or be absent to\n    //       request both div & mod\n    //       2) `positive` is true if unsigned mod is requested\n    BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n            return {\n                div: new BN(0),\n                mod: new BN(0)\n            };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n            res = this.neg().divmod(num, mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.iadd(num);\n                }\n            }\n            return {\n                div: div,\n                mod: mod\n            };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n            res = this.divmod(num.neg(), mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            return {\n                div: div,\n                mod: res.mod\n            };\n        }\n        if ((this.negative & num.negative) !== 0) {\n            res = this.neg().divmod(num.neg(), mode);\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.isub(num);\n                }\n            }\n            return {\n                div: res.div,\n                mod: mod\n            };\n        }\n        // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n        if (num.length > this.length || this.cmp(num) < 0) {\n            return {\n                div: new BN(0),\n                mod: this\n            };\n        }\n        // Very short reduction\n        if (num.length === 1) {\n            if (mode === \"div\") {\n                return {\n                    div: this.divn(num.words[0]),\n                    mod: null\n                };\n            }\n            if (mode === \"mod\") {\n                return {\n                    div: null,\n                    mod: new BN(this.modn(num.words[0]))\n                };\n            }\n            return {\n                div: this.divn(num.words[0]),\n                mod: new BN(this.modn(num.words[0]))\n            };\n        }\n        return this._wordDiv(num, mode);\n    };\n    // Find `this` / `num`\n    BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n    };\n    // Find `this` % `num`\n    BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n    };\n    BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n    };\n    // Find Round(`this` / `num`)\n    BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        // Fast case - exact division\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        // Round down\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n        // Round up\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n    };\n    BN.prototype.modn = function modn(num) {\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n    };\n    // In-place division by number\n    BN.prototype.idivn = function idivn(num) {\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var w = (this.words[i] | 0) + carry * 0x4000000;\n            this.words[i] = w / num | 0;\n            carry = w % num;\n        }\n        return this.strip();\n    };\n    BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n    };\n    BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n            x = x.umod(p);\n        } else {\n            x = x.clone();\n        }\n        // A * x + B * y = x\n        var A = new BN(1);\n        var B = new BN(0);\n        // C * x + D * y = y\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while(x.isEven() && y.isEven()){\n            x.iushrn(1);\n            y.iushrn(1);\n            ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while(!x.isZero()){\n            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                x.iushrn(i);\n                while(i-- > 0){\n                    if (A.isOdd() || B.isOdd()) {\n                        A.iadd(yp);\n                        B.isub(xp);\n                    }\n                    A.iushrn(1);\n                    B.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                y.iushrn(j);\n                while(j-- > 0){\n                    if (C.isOdd() || D.isOdd()) {\n                        C.iadd(yp);\n                        D.isub(xp);\n                    }\n                    C.iushrn(1);\n                    D.iushrn(1);\n                }\n            }\n            if (x.cmp(y) >= 0) {\n                x.isub(y);\n                A.isub(C);\n                B.isub(D);\n            } else {\n                y.isub(x);\n                C.isub(A);\n                D.isub(B);\n            }\n        }\n        return {\n            a: C,\n            b: D,\n            gcd: y.iushln(g)\n        };\n    };\n    // This is reduced incarnation of the binary EEA\n    // above, designated to invert members of the\n    // _prime_ fields F(p) at a maximal speed\n    BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n            a = a.umod(p);\n        } else {\n            a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){\n            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                a.iushrn(i);\n                while(i-- > 0){\n                    if (x1.isOdd()) {\n                        x1.iadd(delta);\n                    }\n                    x1.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                b.iushrn(j);\n                while(j-- > 0){\n                    if (x2.isOdd()) {\n                        x2.iadd(delta);\n                    }\n                    x2.iushrn(1);\n                }\n            }\n            if (a.cmp(b) >= 0) {\n                a.isub(b);\n                x1.isub(x2);\n            } else {\n                b.isub(a);\n                x2.isub(x1);\n            }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n            res = x1;\n        } else {\n            res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n            res.iadd(p);\n        }\n        return res;\n    };\n    BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        // Remove common factor of two\n        for(var shift = 0; a.isEven() && b.isEven(); shift++){\n            a.iushrn(1);\n            b.iushrn(1);\n        }\n        do {\n            while(a.isEven()){\n                a.iushrn(1);\n            }\n            while(b.isEven()){\n                b.iushrn(1);\n            }\n            var r = a.cmp(b);\n            if (r < 0) {\n                // Swap `a` and `b` to make `a` always bigger than `b`\n                var t = a;\n                a = b;\n                b = t;\n            } else if (r === 0 || b.cmpn(1) === 0) {\n                break;\n            }\n            a.isub(b);\n        }while (true);\n        return b.iushln(shift);\n    };\n    // Invert number in the field F(num)\n    BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n    };\n    BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n    };\n    BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n    };\n    // And first word and num\n    BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n    };\n    // Increment at the bit position in-line\n    BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) {\n            this._expand(s + 1);\n            this.words[s] |= q;\n            return this;\n        }\n        // Add bit and propagate, if needed\n        var carry = q;\n        for(var i = s; carry !== 0 && i < this.length; i++){\n            var w = this.words[i] | 0;\n            w += carry;\n            carry = w >>> 26;\n            w &= 0x3ffffff;\n            this.words[i] = w;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n    };\n    BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n            res = 1;\n        } else {\n            if (negative) {\n                num = -num;\n            }\n            assert(num <= 0x3ffffff, \"Number is too big\");\n            var w = this.words[0] | 0;\n            res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Compare two numbers and return:\n    // 1 - if `this` > `num`\n    // 0 - if `this` == `num`\n    // -1 - if `this` < `num`\n    BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Unsigned comparison\n    BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var a = this.words[i] | 0;\n            var b = num.words[i] | 0;\n            if (a === b) continue;\n            if (a < b) {\n                res = -1;\n            } else if (a > b) {\n                res = 1;\n            }\n            break;\n        }\n        return res;\n    };\n    BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n    };\n    BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n    };\n    BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n    };\n    BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n    };\n    BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n    };\n    BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n    };\n    BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n    };\n    BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n    };\n    BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n    };\n    BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n    };\n    //\n    // A reduce context, could be using montgomery or something better, depending\n    // on the `m` itself.\n    //\n    BN.red = function red(num) {\n        return new Red(num);\n    };\n    BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n    };\n    BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n    };\n    BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n    };\n    BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n    };\n    BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n    };\n    BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n    };\n    BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n    };\n    BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n    };\n    BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n    };\n    BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n    };\n    BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n    };\n    BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n    };\n    BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n    };\n    // Square root over p\n    BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n    };\n    BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n    };\n    // Return negative clone of `this` % `red modulo`\n    BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n    };\n    BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n    };\n    // Prime numbers with efficient reduction\n    var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n    };\n    // Pseudo-Mersenne prime\n    function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n    }\n    MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n    };\n    MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n        do {\n            this.split(r, this.tmp);\n            r = this.imulK(r);\n            r = r.iadd(this.tmp);\n            rlen = r.bitLength();\n        }while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n            r.words[0] = 0;\n            r.length = 1;\n        } else if (cmp > 0) {\n            r.isub(this.p);\n        } else {\n            r.strip();\n        }\n        return r;\n    };\n    MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n    };\n    MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n    };\n    function K256() {\n        MPrime.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");\n    }\n    inherits(K256, MPrime);\n    K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n        for(var i = 0; i < outLen; i++){\n            output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n            input.words[0] = 0;\n            input.length = 1;\n            return;\n        }\n        // Shift by 9 limbs\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for(i = 10; i < input.length; i++){\n            var next = input.words[i] | 0;\n            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n            prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n            input.length -= 10;\n        } else {\n            input.length -= 9;\n        }\n    };\n    K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n        var lo = 0;\n        for(var i = 0; i < num.length; i++){\n            var w = num.words[i] | 0;\n            lo += w * 0x3d1;\n            num.words[i] = lo & 0x3ffffff;\n            lo = w * 0x40 + (lo / 0x4000000 | 0);\n        }\n        // Fast length reduction\n        if (num.words[num.length - 1] === 0) {\n            num.length--;\n            if (num.words[num.length - 1] === 0) {\n                num.length--;\n            }\n        }\n        return num;\n    };\n    function P224() {\n        MPrime.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");\n    }\n    inherits(P224, MPrime);\n    function P192() {\n        MPrime.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");\n    }\n    inherits(P192, MPrime);\n    function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");\n    }\n    inherits(P25519, MPrime);\n    P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n        for(var i = 0; i < num.length; i++){\n            var hi = (num.words[i] | 0) * 0x13 + carry;\n            var lo = hi & 0x3ffffff;\n            hi >>>= 26;\n            num.words[i] = lo;\n            carry = hi;\n        }\n        if (carry !== 0) {\n            num.words[num.length++] = carry;\n        }\n        return num;\n    };\n    // Exported mostly for testing purposes, use plain name instead\n    BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n        if (name === \"k256\") {\n            prime = new K256();\n        } else if (name === \"p224\") {\n            prime = new P224();\n        } else if (name === \"p192\") {\n            prime = new P192();\n        } else if (name === \"p25519\") {\n            prime = new P25519();\n        } else {\n            throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime;\n        return prime;\n    };\n    //\n    // Base reduction engine\n    //\n    function Red(m) {\n        if (typeof m === \"string\") {\n            var prime = BN._prime(m);\n            this.m = prime.p;\n            this.prime = prime;\n        } else {\n            assert(m.gtn(1), \"modulus must be greater than 1\");\n            this.m = m;\n            this.prime = null;\n        }\n    }\n    Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n    };\n    Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(a.red && a.red === b.red, \"red works only with red numbers\");\n    };\n    Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n    };\n    Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n            return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n    };\n    Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res;\n    };\n    Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res;\n    };\n    Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n    };\n    Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n    };\n    Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n    };\n    Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n    };\n    Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n    };\n    Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        // Fast case\n        if (mod3 === 3) {\n            var pow = this.m.add(new BN(1)).iushrn(2);\n            return this.pow(a, pow);\n        }\n        // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n        var q = this.m.subn(1);\n        var s = 0;\n        while(!q.isZero() && q.andln(1) === 0){\n            s++;\n            q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while(this.pow(z, lpow).cmp(nOne) !== 0){\n            z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while(t.cmp(one) !== 0){\n            var tmp = t;\n            for(var i = 0; tmp.cmp(one) !== 0; i++){\n                tmp = tmp.redSqr();\n            }\n            assert(i < m);\n            var b = this.pow(c, new BN(1).iushln(m - i - 1));\n            r = r.redMul(b);\n            c = b.redSqr();\n            t = t.redMul(c);\n            m = i;\n        }\n        return r;\n    };\n    Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n            inv.negative = 0;\n            return this.imod(inv).redNeg();\n        } else {\n            return this.imod(inv);\n        }\n    };\n    Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for(var i = 2; i < wnd.length; i++){\n            wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n            start = 26;\n        }\n        for(i = num.length - 1; i >= 0; i--){\n            var word = num.words[i];\n            for(var j = start - 1; j >= 0; j--){\n                var bit = word >> j & 1;\n                if (res !== wnd[0]) {\n                    res = this.sqr(res);\n                }\n                if (bit === 0 && current === 0) {\n                    currentLen = 0;\n                    continue;\n                }\n                current <<= 1;\n                current |= bit;\n                currentLen++;\n                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n                res = this.mul(res, wnd[current]);\n                currentLen = 0;\n                current = 0;\n            }\n            start = 26;\n        }\n        return res;\n    };\n    Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n    };\n    Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n    };\n    //\n    // Montgomery method engine\n    //\n    BN.mont = function mont(num) {\n        return new Mont(num);\n    };\n    function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n            this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n    }\n    inherits(Mont, Red);\n    Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n    };\n    Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n    };\n    Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n            a.words[0] = 0;\n            a.length = 1;\n            return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n    };\n})( false || module, void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoanMtdW5pdC9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwibWFwcGluZ3MiOiI7O0FBQUMsVUFBVUEsT0FBTSxFQUFFQyxPQUFPO0lBQ3hCO0lBRUEsUUFBUTtJQUNSLFNBQVNDLE9BQVFDLEdBQUcsRUFBRUMsR0FBRztRQUN2QixJQUFJLENBQUNELEtBQUssTUFBTSxJQUFJRSxNQUFNRCxPQUFPO0lBQ25DO0lBRUEsdUVBQXVFO0lBQ3ZFLG9CQUFvQjtJQUNwQixTQUFTRSxTQUFVQyxJQUFJLEVBQUVDLFNBQVM7UUFDaENELEtBQUtFLE1BQU0sR0FBR0Q7UUFDZCxJQUFJRSxXQUFXLFlBQWE7UUFDNUJBLFNBQVNDLFNBQVMsR0FBR0gsVUFBVUcsU0FBUztRQUN4Q0osS0FBS0ksU0FBUyxHQUFHLElBQUlEO1FBQ3JCSCxLQUFLSSxTQUFTLENBQUNDLFdBQVcsR0FBR0w7SUFDL0I7SUFFQSxLQUFLO0lBRUwsU0FBU00sR0FBSUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07UUFDL0IsSUFBSUgsR0FBR0ksSUFBSSxDQUFDSCxTQUFTO1lBQ25CLE9BQU9BO1FBQ1Q7UUFFQSxJQUFJLENBQUNJLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsTUFBTSxHQUFHO1FBRWQsb0JBQW9CO1FBQ3BCLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBRVgsSUFBSVAsV0FBVyxNQUFNO1lBQ25CLElBQUlDLFNBQVMsUUFBUUEsU0FBUyxNQUFNO2dCQUNsQ0MsU0FBU0Q7Z0JBQ1RBLE9BQU87WUFDVDtZQUVBLElBQUksQ0FBQ08sS0FBSyxDQUFDUixVQUFVLEdBQUdDLFFBQVEsSUFBSUMsVUFBVTtRQUNoRDtJQUNGO0lBQ0EsSUFBSSxPQUFPaEIsWUFBVyxVQUFVO1FBQzlCQSxRQUFPQyxPQUFPLEdBQUdZO0lBQ25CLE9BQU87UUFDTFosUUFBUVksRUFBRSxHQUFHQTtJQUNmO0lBRUFB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Q0FBQ3FDO1FBQ2QsSUFBSXhDLElBQUk4QyxFQUFFME0sS0FBSyxDQUFDLElBQUksQ0FBQ00sS0FBSyxFQUFFM1AsR0FBRyxDQUFDLElBQUksQ0FBQzJXLElBQUksRUFBRXZILE1BQU0sQ0FBQyxJQUFJLENBQUNPLEtBQUssRUFBRTNQLEdBQUcsQ0FBQyxJQUFJLENBQUNpTixDQUFDO1FBQ3hFLElBQUkySixJQUFJalUsRUFBRW9DLElBQUksQ0FBQ2xGLEdBQUcyQyxNQUFNLENBQUMsSUFBSSxDQUFDbU4sS0FBSztRQUNuQyxJQUFJdk4sTUFBTXdVO1FBQ1YsSUFBSUEsRUFBRXRZLEdBQUcsQ0FBQyxJQUFJLENBQUMyTyxDQUFDLEtBQUssR0FBRztZQUN0QjdLLE1BQU13VSxFQUFFN1IsSUFBSSxDQUFDLElBQUksQ0FBQ2tJLENBQUM7UUFDckIsT0FBTyxJQUFJMkosRUFBRS9FLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDeEJ6UCxNQUFNd1UsRUFBRTlSLElBQUksQ0FBQyxJQUFJLENBQUNtSSxDQUFDO1FBQ3JCO1FBRUEsT0FBTzdLLElBQUkyUSxTQUFTLENBQUMsSUFBSTtJQUMzQjtJQUVBMEQsS0FBS3paLFNBQVMsQ0FBQzhVLElBQUksR0FBRyxTQUFTQSxLQUFNdk4sQ0FBQztRQUNwQyxpREFBaUQ7UUFDakQsSUFBSW5DLE1BQU0sSUFBSSxDQUFDeVQsSUFBSSxDQUFDdFIsRUFBRWtOLE1BQU0sQ0FBQyxJQUFJLENBQUN4RSxDQUFDLEVBQUVqTixHQUFHLENBQUMsSUFBSSxDQUFDMFEsRUFBRTtRQUNoRCxPQUFPdE8sSUFBSTJRLFNBQVMsQ0FBQyxJQUFJO0lBQzNCO0FBQ0YsR0FBRyxNQUFrQixJQUFlMVcsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL3dpdGgtdGFpbHdpbmRjc3MtYXBwLy4vbm9kZV9tb2R1bGVzL2V0aGpzLXVuaXQvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcz8yMGU2Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVdGlsc1xuICBmdW5jdGlvbiBhc3NlcnQgKHZhbCwgbXNnKSB7XG4gICAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxuXG4gIC8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4gIC8vIGFyY2hpdGVjdHVyZSB5ZXQuXG4gIGZ1bmN0aW9uIGluaGVyaXRzIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgLy8gQk5cblxuICBmdW5jdGlvbiBCTiAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAoQk4uaXNCTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIC8vIFJlZHVjdGlvbiBjb250ZXh0XG4gICAgdGhpcy5yZWQgPSBudWxsO1xuXG4gICAgaWYgKG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgICAgICBlbmRpYW4gPSBiYXNlO1xuICAgICAgICBiYXNlID0gMTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXQobnVtYmVyIHx8IDAsIGJhc2UgfHwgMTAsIGVuZGlhbiB8fCAnYmUnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCTjtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJOID0gQk47XG4gIH1cblxuICBCTi5CTiA9IEJOO1xuICBCTi53b3JkU2l6ZSA9IDI2O1xuXG4gIHZhciBCdWZmZXI7XG4gIHRyeSB7XG4gICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmJyArICdmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuc3RyaXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhc3NlcnQiLCJ2YWwiLCJtc2ciLCJFcnJvciIsImluaGVyaXRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJCTiIsIm51bWJlciIsImJhc2UiLCJlbmRpYW4iLCJpc0JOIiwibmVnYXRpdmUiLCJ3b3JkcyIsImxlbmd0aCIsInJlZCIsIl9pbml0Iiwid29yZFNpemUiLCJCdWZmZXIiLCJyZXF1aXJlIiwiZSIsIm51bSIsIkFycmF5IiwiaXNBcnJheSIsIm1heCIsImxlZnQiLCJyaWdodCIsImNtcCIsIm1pbiIsImluaXQiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJzdGFydCIsIl9wYXJzZUhleCIsIl9wYXJzZUJhc2UiLCJzdHJpcCIsInRvQXJyYXkiLCJNYXRoIiwiY2VpbCIsImkiLCJqIiwidyIsIm9mZiIsInBhcnNlSGV4Iiwic3RyIiwiZW5kIiwiciIsImxlbiIsImMiLCJjaGFyQ29kZUF0IiwicGFyc2VCYXNlIiwibXVsIiwibGltYkxlbiIsImxpbWJQb3ciLCJ0b3RhbCIsIm1vZCIsIndvcmQiLCJpbXVsbiIsIl9pYWRkbiIsInBvdyIsImNvcHkiLCJkZXN0IiwiY2xvbmUiLCJfZXhwYW5kIiwic2l6ZSIsIl9ub3JtU2lnbiIsImluc3BlY3QiLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwicGFkZGluZyIsIm91dCIsImNhcnJ5IiwiZ3JvdXBTaXplIiwiZ3JvdXBCYXNlIiwiaXNaZXJvIiwibW9kbiIsImlkaXZuIiwidG9OdW1iZXIiLCJyZXQiLCJ0b0pTT04iLCJ0b0J1ZmZlciIsInRvQXJyYXlMaWtlIiwiQXJyYXlUeXBlIiwiYnl0ZUxlbmd0aCIsInJlcUxlbmd0aCIsImxpdHRsZUVuZGlhbiIsInJlcyIsImIiLCJxIiwiYW5kbG4iLCJpdXNocm4iLCJjbHozMiIsIl9jb3VudEJpdHMiLCJ0IiwiX3plcm9CaXRzIiwiYml0TGVuZ3RoIiwiaGkiLCJ0b0JpdEFycmF5IiwiYml0Iiwid2JpdCIsInplcm9CaXRzIiwidG9Ud29zIiwid2lkdGgiLCJhYnMiLCJpbm90biIsImlhZGRuIiwiZnJvbVR3b3MiLCJ0ZXN0biIsIm5vdG4iLCJpbmVnIiwiaXNOZWciLCJuZWciLCJpdW9yIiwiaW9yIiwib3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJhbmQiLCJ1YW5kIiwiaXV4b3IiLCJhIiwiaXhvciIsInhvciIsInV4b3IiLCJieXRlc05lZWRlZCIsImJpdHNMZWZ0Iiwic2V0biIsImlhZGQiLCJpc3ViIiwiYWRkIiwic3ViIiwic21hbGxNdWxUbyIsInNlbGYiLCJsbyIsImsiLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJjb21iMTBNdWxUbyIsIm8iLCJtaWQiLCJhMCIsImFsMCIsImFoMCIsImExIiwiYWwxIiwiYWgxIiwiYTIiLCJhbDIiLCJhaDIiLCJhMyIsImFsMyIsImFoMyIsImE0IiwiYWw0IiwiYWg0IiwiYTUiLCJhbDUiLCJhaDUiLCJhNiIsImFsNiIsImFoNiIsImE3IiwiYWw3IiwiYWg3IiwiYTgiLCJhbDgiLCJhaDgiLCJhOSIsImFsOSIsImFoOSIsImIwIiwiYmwwIiwiYmgwIiwiYjEiLCJibDEiLCJiaDEiLCJiMiIsImJsMiIsImJoMiIsImIzIiwiYmwzIiwiYmgzIiwiYjQiLCJibDQiLCJiaDQiLCJiNSIsImJsNSIsImJoNSIsImI2IiwiYmw2IiwiYmg2IiwiYjciLCJibDciLCJiaDciLCJiOCIsImJsOCIsImJoOCIsImI5IiwiYmw5IiwiYmg5IiwiaW11bCIsIncwIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwiYmlnTXVsVG8iLCJobmNhcnJ5IiwianVtYm9NdWxUbyIsImZmdG0iLCJGRlRNIiwibXVscCIsIm11bFRvIiwieCIsInkiLCJtYWtlUkJUIiwiTiIsImwiLCJyZXZCaW4iLCJyYiIsInBlcm11dGUiLCJyYnQiLCJyd3MiLCJpd3MiLCJydHdzIiwiaXR3cyIsInRyYW5zZm9ybSIsInMiLCJydHdkZiIsImNvcyIsIlBJIiwiaXR3ZGYiLCJzaW4iLCJwIiwicnR3ZGZfIiwiaXR3ZGZfIiwicmUiLCJpZSIsInJvIiwiaW8iLCJyeCIsImd1ZXNzTGVuMTNiIiwibiIsIm0iLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsInJvdW5kIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsIl8iLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsIml1c2hsbiIsImJpdHMiLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImlzaGxuIiwiaGludCIsImV4dGVuZGVkIiwiaCIsIm1hc2siLCJtYXNrZWRXb3JkcyIsImlzaHJuIiwic2hsbiIsInVzaGxuIiwic2hybiIsInVzaHJuIiwiaW1hc2tuIiwibWFza24iLCJpc3VibiIsImFkZG4iLCJzdWJuIiwiaWFicyIsIl9pc2hsbnN1Ym11bCIsInNoaWZ0IiwiX3dvcmREaXYiLCJtb2RlIiwiYmhpIiwiYmhpQml0cyIsImRpZmYiLCJxaiIsImRpdiIsImRpdm1vZCIsInBvc2l0aXZlIiwiZGl2biIsInVtb2QiLCJkaXZSb3VuZCIsImRtIiwiaGFsZiIsInIyIiwiYWNjIiwiZWdjZCIsIkEiLCJCIiwiQyIsIkQiLCJnIiwiaXNFdmVuIiwieXAiLCJ4cCIsImltIiwiaXNPZGQiLCJqbSIsImdjZCIsIl9pbnZtcCIsIngxIiwieDIiLCJkZWx0YSIsImNtcG4iLCJpbnZtIiwiYmluY24iLCJ1Y21wIiwiZ3RuIiwiZ3QiLCJndGVuIiwiZ3RlIiwibHRuIiwibHQiLCJsdGVuIiwibHRlIiwiZXFuIiwiZXEiLCJSZWQiLCJ0b1JlZCIsImN0eCIsImNvbnZlcnRUbyIsIl9mb3JjZVJlZCIsImZyb21SZWQiLCJjb252ZXJ0RnJvbSIsImZvcmNlUmVkIiwicmVkQWRkIiwicmVkSUFkZCIsInJlZFN1YiIsInJlZElTdWIiLCJyZWRTaGwiLCJzaGwiLCJyZWRNdWwiLCJfdmVyaWZ5MiIsInJlZElNdWwiLCJyZWRTcXIiLCJfdmVyaWZ5MSIsInJlZElTcXIiLCJyZWRTcXJ0Iiwic3FydCIsInJlZEludm0iLCJyZWROZWciLCJyZWRQb3ciLCJwcmltZXMiLCJrMjU2IiwicDIyNCIsInAxOTIiLCJwMjU1MTkiLCJNUHJpbWUiLCJuYW1lIiwidG1wIiwiX3RtcCIsImlyZWR1Y2UiLCJybGVuIiwic3BsaXQiLCJpbXVsSyIsImlucHV0IiwiSzI1NiIsImNhbGwiLCJvdXRwdXQiLCJvdXRMZW4iLCJwcmV2IiwibmV4dCIsIlAyMjQiLCJQMTkyIiwiUDI1NTE5IiwiX3ByaW1lIiwicHJpbWUiLCJpbW9kIiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwieiIsImludiIsIndpbmRvd1NpemUiLCJ3bmQiLCJjdXJyZW50IiwiY3VycmVudExlbiIsIm1vbnQiLCJNb250IiwicmludiIsIm1pbnYiLCJ1Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js\n");

/***/ })

};
;